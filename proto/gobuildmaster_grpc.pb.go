// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoBuildMasterClient is the client API for GoBuildMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoBuildMasterClient interface {
	Compare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CompareResponse, error)
	GetDecisions(ctx context.Context, in *GetDecisionsRequest, opts ...grpc.CallOption) (*GetDecisionsResponse, error)
}

type goBuildMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewGoBuildMasterClient(cc grpc.ClientConnInterface) GoBuildMasterClient {
	return &goBuildMasterClient{cc}
}

func (c *goBuildMasterClient) Compare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CompareResponse, error) {
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, "/gobuildmaster.GoBuildMaster/Compare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildMasterClient) GetDecisions(ctx context.Context, in *GetDecisionsRequest, opts ...grpc.CallOption) (*GetDecisionsResponse, error) {
	out := new(GetDecisionsResponse)
	err := c.cc.Invoke(ctx, "/gobuildmaster.GoBuildMaster/GetDecisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoBuildMasterServer is the server API for GoBuildMaster service.
// All implementations should embed UnimplementedGoBuildMasterServer
// for forward compatibility
type GoBuildMasterServer interface {
	Compare(context.Context, *Empty) (*CompareResponse, error)
	GetDecisions(context.Context, *GetDecisionsRequest) (*GetDecisionsResponse, error)
}

// UnimplementedGoBuildMasterServer should be embedded to have forward compatible implementations.
type UnimplementedGoBuildMasterServer struct {
}

func (UnimplementedGoBuildMasterServer) Compare(context.Context, *Empty) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compare not implemented")
}
func (UnimplementedGoBuildMasterServer) GetDecisions(context.Context, *GetDecisionsRequest) (*GetDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecisions not implemented")
}

// UnsafeGoBuildMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoBuildMasterServer will
// result in compilation errors.
type UnsafeGoBuildMasterServer interface {
	mustEmbedUnimplementedGoBuildMasterServer()
}

func RegisterGoBuildMasterServer(s grpc.ServiceRegistrar, srv GoBuildMasterServer) {
	s.RegisterService(&GoBuildMaster_ServiceDesc, srv)
}

func _GoBuildMaster_Compare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildMasterServer).Compare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildmaster.GoBuildMaster/Compare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildMasterServer).Compare(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildMaster_GetDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildMasterServer).GetDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildmaster.GoBuildMaster/GetDecisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildMasterServer).GetDecisions(ctx, req.(*GetDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoBuildMaster_ServiceDesc is the grpc.ServiceDesc for GoBuildMaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoBuildMaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildmaster.GoBuildMaster",
	HandlerType: (*GoBuildMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compare",
			Handler:    _GoBuildMaster_Compare_Handler,
		},
		{
			MethodName: "GetDecisions",
			Handler:    _GoBuildMaster_GetDecisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gobuildmaster.proto",
}
