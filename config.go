// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xed\x8a\xdb\x30\x10\xfc\xdd\x3c\x85\xc8\x03\xf4\xe8\x5f\x53\x02\x57\x2e\x94\xd2\xe3\x0a\xb9\x6b\xe9\xbf\x20\xcb\x5b\x47\x17\x59\xeb\xae\x56\x21\x7e\xfb\xe2\x7c\x35\xb6\xf3\x21\x9d\x52\x1a\x08\x01\x79\x27\x33\x23\xcd\xae\x6c\xb5\x65\xb0\xec\xc4\xc7\x91\x10\xaf\x98\x6f\x7e\x85\xb0\xb2\x82\x4c\x8c\x73\xaf\x4d\xe1\x80\x56\x40\xe3\xcd\x7a\x89\xf3\x5a\xf2\x22\x13\xe3\x52\xf3\xc2\xe7\xef\x15\x56\x77\x39\x21\x2f\x80\x0c\x96\x5a\xdd\x0d\x20\xb5\x24\xd6\xd2\xcc\x73\x44\x76\x4c\xb2\xce\x04\x93\x87\xcd\x33\x82\xdf\x5e\x13\x54\x07\x05\xed\x47\x49\x86\x12\xa9\xc9\xc4\xc3\x97\xe7\xaf\xbb\xc5\x9a\xb0\x06\x62\x0d\x2e\x13\x63\xa7\x48\xb2\x5a\x6c\xff\x7f\x32\xda\x7e\x09\x0a\x6f\x0b\x69\x55\x93\x89\xd9\xf4\xe1\xfb\xd3\xc3\xfd\xd3\xcb\x68\x32\x3a\xe3\xf0\xba\x93\x5f\xda\x80\xc2\x5a\xef\x8d\xec\xf6\xa4\xbf\x7c\xc9\x5f\x4e\x20\x97\xe8\xf9\xb0\xd4\x17\xfa\xf9\xf1\xdb\xa7\xfb\xc7\x91\x10\x16\xe7\x95\x74\x0c\xb4\x2b\x3d\xab\x7b\xa7\x62\x05\xe4\x34\x5a\x26\xa9\x96\xe1\x87\x73\x0a\xf5\x7f\xf4\x2f\xa1\x71\x8c\x04\xa1\xca\xbb\xf5\x57\x72\xf3\x3c\x9d\xfd\x98\xce\x4e\x25\x87\xbc\xb5\x7b\xe3\xa7\x82\xb3\xf3\x73\x4d\x7d\x21\x59\x46\xc9\xef\x01\xde\x98\xfb\xee\x26\x9c\xd7\xff\x2e\x25\xf6\xdb\x75\x25\xa9\xe8\xc4\xbe\xb7\xdc\x12\xc7\xb6\xdc\x7e\xf3\x08\xeb\x1c\xd7\xae\xb1\x2a\x78\xfb\xba\x90\x89\x10\xf1\x0d\xbf\x6f\x5f\x92\x15\x44\xb6\x4d\x1f\x93\xc2\x5f\x13\xae\x9b\x50\xe2\xa3\xe2\x41\x2b\x5e\x4d\xd1\xf4\xe7\xcb\x74\xf6\xb4\xe9\xce\x41\x92\x60\xcd\x40\x56\x9a\x39\x81\x2c\x9a\x6e\x9e\x14\x7a\xcb\x99\xf8\x70\xd5\x8a\xc1\xb2\xd4\xb6\x0c\x35\xd3\x29\xff\xe7\x93\xff\x42\x0f\xec\x2f\x37\x00\x8a\xbc\xdb\x3a\x88\x94\x14\xc0\x1a\x94\x67\x0c\x66\xee\xd6\x0f\xc7\xf2\x40\x4a\xe0\x20\xab\x09\x57\xba\xbd\x12\xc2\x37\x61\x00\x39\x91\x4c\xe7\x0b\xbc\x85\xb8\xf6\x71\x84\xb0\xa3\xf2\x84\xb7\x8e\xf3\xb7\x47\x87\x61\x72\xb0\x16\xdc\x30\x6d\x7e\x22\x47\x4f\x0f\xf2\xe6\xbd\x24\x50\x48\x85\x42\x63\x40\xb1\x46\x1b\xca\x7f\x0a\x97\x12\xfc\x2d\x0f\x81\x02\x1d\xd1\x78\x43\x54\xd2\x08\xf6\xc6\xb4\x19\x00\x17\x93\xae\x3e\x28\x45\x01\x41\xa5\x6d\x01\xe4\xc2\x8f\xe1\x08\x90\xc6\xdc\x9e\x67\x09\x1c\x61\xbd\x8f\x49\xe7\x77\x48\xa5\xb4\xda\xc5\x6a\xe8\xe2\x52\x74\xe4\xd2\x69\xf5\x8a\x79\x70\x1f\x1e\xd5\xa7\xfb\x97\x45\x11\x6b\xfd\x00\x49\x67\xcf\x7d\x7b\x98\x71\xf4\x7f\x31\x37\x70\x6f\xda\x89\x1a\xfe\xe2\x30\x44\xa5\x6b\xa8\xda\xd7\x88\xd8\x33\x38\x02\xdd\x40\x01\x46\x0c\xc0\x1e\x24\x9d\x3d\xf2\x6e\x1d\x80\x6e\xa1\x00\x15\xb8\x88\x09\xd8\x03\x5d\x54\xf0\x27\x00\x00\xff\xff\xdc\x6a\x9a\xc1\xd7\x10\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4311, mode: os.FileMode(436), modTime: time.Unix(1595551913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
