// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x6a\xdb\x40\x0c\xc7\x3f\x2f\x4f\x71\xf8\x01\x56\xf6\xd5\x8c\x40\x47\xcc\x18\x2b\x19\xa4\xdd\xd8\xb7\x20\x9f\xb5\xe4\x96\xf3\xe9\xa6\xd3\x95\xf8\xed\x47\xdc\x24\x6d\xe2\xa4\x3e\xa7\x81\x06\x82\x41\x96\xe4\x9f\xfe\x92\x90\x33\x4e\xd0\x49\x50\x9f\x47\x4a\xfd\xa5\xb2\x7d\x2a\xe5\xa0\xc6\x5c\x65\x65\x34\xb6\x0a\xc8\x8f\xc8\x59\x6b\x5f\xd0\xdc\x83\x2c\x73\x95\x2d\x8c\x2c\x63\xf9\x51\x53\x7d\x53\x32\xc9\x12\xd9\xd2\xc2\xe8\x9b\x4e\x88\x07\x16\x03\x76\x5e\x12\x49\x10\x06\x9f\x2b\xe1\x88\xed\x3b\xc6\x7f\xd1\x30\xd6\x7b\x82\xcd\x4f\x83\xe0\x82\xb8\xc9\xd5\xe4\xdb\xfd\xf7\xad\xd1\x33\x79\x64\x31\x18\x72\x95\x05\xcd\x20\x7a\xf9\x94\x7f\x9c\x92\xe9\xbe\x98\xfd\x2a\x66\xa7\x72\x09\x84\x95\x35\x41\x9e\x93\x6d\xfe\x8c\x55\x74\x15\x38\xdd\xe4\x6a\x56\x4c\x7e\x4e\x27\xb7\xd3\x87\xd1\x78\x74\x46\xae\x7e\x59\xfe\x18\x8b\x9a\xbc\xd9\xa9\xb2\x15\xf8\xd8\xfc\x9a\x58\x25\x23\xac\x28\xca\xde\x74\x0c\xfa\xf5\xee\xc7\x97\xdb\xbb\x91\x52\x8e\xe6\x35\x04\x41\xde\xba\x9e\xe5\xde\x52\x3c\x22\x07\x43\x4e\x18\xf4\x2a\xbd\xd3\xa7\xa2\xde\x87\x1f\x2c\xb2\xa4\x83\xbf\x70\x1f\x2b\x35\xbc\xdb\x87\xaa\x0d\x5b\x8f\x13\x41\x17\x8f\x2e\x47\xe7\x76\x49\x76\x83\xab\x29\x3a\xc9\xd5\xa7\x5e\xfa\x15\x36\x41\x88\x31\x15\xfc\xd0\xff\xaa\xcc\x27\x66\xa0\x8f\xbe\x62\xf2\x25\xad\x43\xe3\x74\x6a\x01\x47\x21\x6f\xe9\xbc\x67\x5a\x37\xa9\xdf\x7d\xe1\xdc\xa3\x5a\xf1\xfb\xa1\x98\x4d\xdb\x0d\xe8\xe8\x86\x6b\x41\x76\x60\xe7\x8c\x50\x35\x17\xf6\xfc\x09\x91\x51\xa3\x19\x30\xb2\xdd\xa8\x37\x69\x17\xad\xdd\xe8\x80\x61\xc0\xc6\x76\x82\x2e\x22\x48\x2d\x55\x03\x57\x59\x57\xb7\xbd\xb9\xbd\x38\x97\x55\x5f\x93\x33\x42\xc9\x75\x1f\xb8\x5f\xeb\x58\x9e\xbd\x6f\x1f\x7a\xf1\x71\x8d\x3a\x0e\xe0\x3f\xf4\xef\x1e\x80\x4e\x17\x13\xd7\x7f\x73\x73\xd2\xa7\xe7\xd9\xfb\x95\xd3\xfe\x3f\x00\x00\xff\xff\xd0\x28\x8e\x4c\x09\x09\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2313, mode: os.FileMode(436), modTime: time.Unix(1575226914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
