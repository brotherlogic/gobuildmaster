// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x6e\xe3\x36\x10\xfc\x5d\x3f\x05\xe1\x07\x68\xd0\xbf\x46\x61\x20\x45\x8c\xa2\x68\x90\x02\x4e\x5a\xf4\x9f\xb1\xa2\xf6\x64\xc6\x14\x57\xb7\x5c\xe5\xec\xb7\x3f\xc8\x1f\x3a\x4b\xb2\x63\x32\xd4\xdd\x05\x08\x02\xd0\x3b\x9e\xd9\xe5\xce\x92\xa1\x33\x4e\xd0\x89\x57\xbf\x4f\x94\x7a\xa5\x6c\xff\x57\x29\x07\x25\xce\xd4\x34\xab\x8d\xcd\x3d\xf2\x1b\xf2\x74\xbf\x5e\xd0\xaa\x02\x59\xcf\xd4\xb4\x30\xb2\xae\xb3\x5f\x35\x95\x77\x19\x93\xac\x91\x2d\x15\x46\xdf\x0d\x20\x15\xb0\x18\xb0\xab\x8c\x48\xbc\x30\x54\x33\x25\x5c\xe3\xfe\x33\xc6\xcf\xb5\x61\x2c\x5b\x05\xcd\x8f\x06\xc1\x82\x78\x37\x53\x0f\x7f\x3d\xff\x7d\x5c\xac\x98\x2a\x64\x31\xe8\x67\x6a\xea\x35\x83\xe8\xf5\xe1\xfb\xe7\x93\xc3\x2f\x63\x5e\xbb\x1c\x9c\xde\xcd\xd4\x72\xf1\xf0\xef\xd3\xc3\xfd\xd3\xcb\x64\x3e\xb9\x92\xe1\xed\x4c\x3e\x19\x8b\x9a\x2a\x73\x4a\xe4\x58\x93\xfe\xf2\x7b\xf9\x65\x8c\xb0\xa1\x5a\xda\xa5\xbe\xd0\x3f\x1f\xff\xf9\xe3\xfe\x71\xa2\x94\xa3\x55\x09\x5e\x90\x8f\xa1\x57\x75\x1f\x55\xbc\x21\x7b\x43\x4e\x18\xf4\x26\x7c\x73\x2e\xa1\x7e\x8e\xfe\x0d\xee\xbc\x10\x63\xa8\xf2\x6e\xfc\x40\xd7\xcd\x56\x7a\x5e\x2c\xff\x5b\x2c\x2f\x36\x93\x80\x18\x72\xe4\xf0\x7a\x3f\x1d\xd3\xbc\x95\x54\x0e\x02\x51\x59\xf5\x00\x1f\xb4\x43\xef\x5b\xae\x27\xf0\x4b\x8a\x1d\x0e\xeb\x1a\x38\xef\xd8\xa1\xb7\xdc\x10\xc7\x5a\xf1\x54\x3d\xa6\x2a\xa3\xad\xdf\x39\x1d\x5c\xbf\x2e\x64\xae\x54\xfc\x20\x38\xd9\x9a\xa1\xc4\x48\x3b\xf5\x31\x29\xfc\x15\xd3\x76\x17\x4a\x7c\x16\x1c\x6f\x85\xc5\xff\x2f\x8b\xe5\xd3\xde\xb5\x83\x56\xc2\xad\x20\x3b\xb0\x2b\x46\xc8\x77\xdd\x7e\xd2\x54\x3b\x99\xa9\xdf\x6e\xa6\x62\xa9\x28\x8c\x2b\x42\x93\xe9\x84\x7f\xf7\x13\xe1\x1d\x0f\x9c\x0e\x3d\x44\x8e\x3c\xf3\x3a\x88\x94\x2e\xc0\x2d\xea\x5a\x28\x98\xb9\x1b\x3f\x1c\xd7\x03\x29\x81\x93\xac\x62\x7a\x33\xcd\x51\x11\x5e\x84\x01\xe4\x42\x67\xfa\x3a\xa7\x31\xc4\x35\x1f\x47\x08\x3b\x0b\xbf\x20\x2a\xe1\x82\x72\xfd\x54\xe9\x90\xce\xdb\x6c\x83\x3d\xd4\xb4\x54\xe4\x34\x1a\x40\xc6\x6b\x07\x46\x4d\x9c\x6b\xb2\x16\x75\x73\x58\x86\x4a\xba\x84\x4b\xb1\xc7\x81\x87\x51\xa3\x89\xb0\xe7\x10\x95\x34\xa8\x6b\x6b\x9b\xb6\x40\x1f\xd3\x83\x7d\x50\x8a\x02\xc6\xd2\xb8\x1c\xd9\x87\x6f\xc3\x19\x20\x8d\xb9\xd9\xcf\x02\x25\x22\xf5\x3e\x26\x9d\xdf\x13\x17\xe0\x8c\x8f\xd5\xd0\xc5\xa5\xe8\xc8\xc0\x1b\xfd\x4a\x59\xb0\x35\xcf\xe2\xd3\xf3\x87\x3c\x8f\x4d\xbd\x85\xa4\xb3\x67\x75\xb3\x99\x71\xf4\xdf\x30\x23\x64\x6f\x9b\x21\x1b\x7e\xbd\x18\xa2\xd2\x35\x94\xcd\x65\x23\x76\x0f\xce\x40\x23\x28\xa0\x88\x01\xd8\x83\xa4\xb3\x47\x9e\xc0\x03\xd0\x18\x0a\x48\xa3\x8f\x98\x80\x3d\xd0\x08\x53\x08\x2c\x46\xf2\xb7\x90\x11\xd8\x05\x24\x96\xfd\x04\x49\x61\xd7\xa7\x22\x86\xdf\x51\x07\x90\x0f\xde\xf1\x19\x4c\x9e\xf4\xe4\xd3\x29\xe0\x17\x70\xb1\x05\x6c\x21\x49\x37\x7c\xd1\x1b\x63\x6d\xb8\x79\x7a\x80\xf1\x2e\x75\x07\x42\x01\xbf\x09\xae\x43\x0f\x92\x52\x87\xdc\x14\x46\xc0\x36\x35\xb5\xc6\x07\x9f\x27\x17\x60\x23\x98\x49\x13\x47\x7b\xb9\xc5\xa4\xf0\x13\x17\x91\xb3\xb4\x8b\x48\xe1\x6e\xbe\x2f\xf8\x26\xdf\x06\xa7\x30\x0a\x96\x55\x28\xe1\x29\x36\xa9\xc7\xc0\xaf\x33\x6a\x5f\xac\x42\xde\xe3\x3a\x80\x31\x9f\x19\x2b\x64\x4f\x0e\x6c\xff\x3f\xc2\x0f\x18\xd7\xa3\xae\x19\xa3\x1e\x8c\x06\x90\x1f\xf4\x6c\xf4\xde\xe6\x7d\x0d\x00\x00\xff\xff\x00\x65\x05\x44\x7b\x18\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6267, mode: os.FileMode(436), modTime: time.Unix(1603409162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
