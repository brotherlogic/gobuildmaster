// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x6f\xdb\x36\x10\xfe\x5c\xff\x0a\xc2\x3f\x60\xc5\x86\x61\x1f\x8c\x21\x40\xb7\x18\x43\xb0\x22\x2b\xdc\x6c\xd8\x37\xe3\x44\x5d\x64\xd6\x14\x4f\x3d\x52\x5e\xbc\x5f\x5f\xc8\x2f\xaa\x5e\xdc\x98\x17\x0a\x69\x80\xc0\x00\x75\x8f\x9e\x7b\x8e\xc7\xe3\x89\x74\xc6\x05\x74\xc1\xab\x5f\x67\x4a\x7d\xa2\xec\xf0\xab\x94\x83\x12\x17\x6a\x9e\xd5\xc6\xe6\x1e\x79\x87\x3c\x3f\x8c\x17\xb4\xae\x20\x6c\x16\x6a\x5e\x98\xb0\xa9\xb3\x1f\x34\x95\x6f\x33\xa6\xb0\x41\xb6\x54\x18\xfd\x76\x04\xa9\x80\x83\x01\xbb\xce\x88\x82\x0f\x0c\xd5\x42\x05\xae\xf1\xf0\x8c\xf1\x73\x6d\x18\xcb\xd6\x83\xe6\x4f\x43\xc0\x82\x78\xbf\x50\xb7\x77\x1f\xff\x3c\x0d\x56\x4c\x15\x72\x30\xe8\x17\x6a\xee\x35\x43\xd0\x9b\xe3\xfb\x6f\x66\xc7\x7f\xc6\xbc\x76\x39\x38\xbd\x5f\xa8\xd5\xf2\xf6\xef\xfb\xdb\x77\xf7\x0f\xb3\x9b\xd9\xf7\x55\x98\x31\xc2\x96\xea\xf0\xaa\xa2\xbb\xe3\xbf\xfc\x1c\x15\x8e\xeb\xb2\x1f\x8d\x45\x4d\x95\x39\xab\x3e\x05\x70\x38\x2c\x0a\xc6\x50\xc2\x1f\xef\xff\xfa\xed\xdd\xfb\x99\x52\x8e\xd6\x25\xf8\x80\x7c\x32\xbd\x36\x8d\x3b\x64\x6f\xc8\x05\x06\xbd\x8d\x9f\xc9\x4b\xa8\xef\xe3\xff\x16\xf7\x3e\x10\x63\xac\xe7\x7d\x7b\x79\x92\x7d\x5c\xae\xfe\x59\xae\x2e\xa5\xd9\x23\x43\x89\x61\xc3\x88\xdf\xce\xb4\x93\xcc\x6b\xa2\x1e\x2d\x55\xd5\x3e\x56\x52\xd7\x7a\x52\x41\x9d\xf7\x26\x88\xc9\x21\x80\x68\x8a\x06\x80\x17\xae\xfa\xc1\x5b\xbe\x2d\xe0\xcd\x75\x05\x32\xf7\x3b\xd6\xaf\x53\xe0\xa6\x90\x7a\x5d\xd7\x71\x5c\x03\xe7\xbd\x32\x36\x18\x6e\x88\x5f\xb8\xa3\xe4\x4c\x55\x46\x4f\x7e\xef\x74\x74\xac\xfb\x90\x1b\xa5\x5e\xbc\x9f\x6d\x10\x6c\xd8\xe8\x0d\x4a\xea\xe0\x08\x94\xe2\x01\xe4\xbb\xe6\xa1\x68\x4b\x1d\x62\x52\xf8\x8f\x05\x4c\xb6\x11\x0c\x31\x29\xfc\x15\xd3\x53\x74\xd1\xeb\x18\xcb\x17\xd2\xf2\xdf\x87\xe5\xea\xfe\xb0\xdf\x8c\x16\x13\x3e\x05\x64\x07\x76\xcd\x08\xf9\xa0\xfa\x69\xaa\x5d\x58\xa8\x1f\xaf\x4a\xb1\x54\x14\xc6\x15\xb1\x62\x7a\xe6\xaf\xd8\xf8\x74\x76\xdd\xb0\x26\xb7\x3e\xe6\xd1\x42\xcd\x39\x37\xbe\xb2\xb0\x9f\x5f\x2f\x8e\x19\x22\x0b\xdb\xc0\x1e\x22\x25\x63\xf0\x09\x75\x1d\x28\x9a\xb9\x6f\x3f\x6e\x4a\x46\xae\x44\x6e\x71\x15\xd3\xce\x34\x0d\x51\x7c\x10\x46\x90\x0b\xd3\xfe\xdc\xee\xe1\xeb\x9c\xa6\x70\xbc\x79\x2c\x70\xba\x63\x2e\xcf\xd3\xd5\xf2\xf7\xe5\xdd\x87\x87\xf5\x87\xd5\xdd\xfd\xc3\xa9\xe7\xb8\x49\x4c\x81\x73\xa2\xc6\x6e\x18\x5d\xf3\x88\x04\x10\x7c\x0f\x21\xb2\xb0\x78\x8e\x20\x57\x43\xfa\x46\xd0\xbe\xfd\x8f\x4c\x3f\xcd\x07\x41\x3e\x54\x30\x15\x53\xc2\x18\x35\x71\xae\xc9\x5a\xd4\xc1\x90\x8b\x15\x75\x09\x97\x12\xd7\x23\x0f\xa3\x46\x23\xa8\x31\x63\x54\xd2\xce\x54\x5b\xdb\x4c\x04\x7a\xc9\x62\x19\x82\x52\x3c\x60\x2c\x8d\xcb\x91\x7d\xfc\x34\x74\x00\x69\xcc\xcd\x7c\x16\x18\x04\xd2\x87\x98\x74\x7e\x4f\x5c\x80\x33\x5e\xea\x43\x1f\x97\xb4\xbe\xc1\x1b\xfd\x89\xb2\xe8\xc5\xdd\xb1\x4f\xd7\x0f\x79\x2e\x95\xde\x42\xd2\xd9\xb3\xba\x99\x4c\x19\xfd\x57\xcc\x04\xea\x6d\x53\xd5\xe2\xfb\xa9\x31\x2a\xdd\x87\xb2\x69\xa5\xa4\x73\xd0\x01\x4d\xe0\x01\x09\x0a\xe0\x00\x92\xce\x2e\x6c\x15\x46\xa0\x29\x3c\x20\x8d\x5e\x50\x01\x07\xa0\x09\xaa\x10\x58\x14\xf2\xb7\x90\x09\xd8\x03\x04\x29\xfb\x19\x92\xc2\xae\xcf\x41\x8c\x6f\xb4\x47\x90\x17\x7e\xc1\x30\x98\x7c\x8a\xc3\xea\x63\x34\xfe\x03\x27\x0d\x60\x0b\x49\x6f\x61\x02\xf8\x6d\x34\xfb\x00\x92\xd6\x21\x17\x26\x80\x6d\x94\x58\xe3\xa3\xab\xf8\x05\xd8\x04\x29\xac\x89\xc5\x2b\xa8\xc5\xa4\xf0\x13\x17\xc2\x0a\xd6\x47\xa4\x70\x37\xef\x8b\xee\x9f\x5b\xe3\x14\xc6\x80\x65\x15\x4b\x78\xb6\x4d\xe1\xdb\xe2\xbe\x84\xaa\x8a\x0f\x6e\x0f\x90\xc2\x7c\x58\xa0\x92\xbc\xee\x01\xd2\x1a\x42\xbd\xad\xa3\xa3\xdc\xb5\x9e\xa6\x18\x26\x2f\xc6\x1d\x58\x93\x83\xe0\xf8\xe4\x02\x2c\xed\xbc\xcf\xb8\x90\xb1\xc9\x8b\xe8\xb3\xf5\x01\x24\x85\xdd\x07\x92\x71\xf7\x00\x69\xe5\x40\x6f\xe3\xab\xc1\xd1\x36\x85\xef\x73\x8d\x75\xb4\xca\xd6\x38\x3d\xbf\x1e\xc1\x51\x2d\xfc\x6a\xf8\x8a\x49\xe7\xd7\x16\x41\x70\x22\x37\x02\x25\x9d\x4c\xd6\x36\x9e\xb9\x35\x9e\xe6\x3b\x59\xfe\x85\x9c\xdc\x62\x80\xdf\x64\xd4\xde\x0c\xc5\x5c\xf1\xf5\x00\x53\xde\x5a\x56\xc8\x9e\x1c\xd8\xe7\x2a\x65\xe4\xe9\xa8\x47\x5d\x33\x8a\xae\x25\x46\x90\x57\xba\x9c\x78\x6e\xf2\xbe\x04\x00\x00\xff\xff\x6d\xf9\xb7\xb2\xaa\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8874, mode: os.FileMode(436), modTime: time.Unix(1647217233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
