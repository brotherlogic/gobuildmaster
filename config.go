package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdb\x6e\xe3\x36\x10\x7d\x5e\x7f\x05\xe1\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xcc\x35\xc5\xd1\x0e\xa9\x34\xee\xd7\x17\xf2\x45\xb1\x28\x67\xcd\x09\x85\xb6\x01\x02\x03\xf4\x1c\x9d\x39\x73\x23\x45\x3b\xe3\x02\xba\xe0\xd5\x8f\x33\xa5\xbe\x50\xb1\xff\x54\xca\x41\x8d\x0b\x35\x2f\x5a\x63\x4b\x8f\xfc\x84\x3c\xdf\xaf\x57\xb4\x6e\x20\x6c\x16\x6a\x5e\x99\xb0\x69\x8b\xef\x34\xd5\xef\x0b\xa6\xb0\x41\xb6\x54\x19\xfd\x7e\x04\x69\x80\x83\x01\xbb\x2e\x88\x82\x0f\x0c\xcd\x42\x05\x6e\x71\xff\x1d\xe3\xd7\xd6\x30\xd6\xbd\x07\xdd\x9f\x86\x80\x15\xf1\x6e\xa1\x6e\xef\x3e\xff\x7a\x5c\x6c\x98\x1a\xe4\x60\xd0\x2f\xd4\xdc\x6b\x86\xa0\x37\x87\xe7\xdf\xcc\x0e\xff\x8c\x65\xeb\x4a\x70\x7a\xb7\x50\xab\xe5\xed\xef\xf7\xb7\x1f\xee\x1f\x66\x37\xb3\x57\x14\x5e\x57\xf2\x68\x2c\x6a\x6a\xcc\x49\xc8\x31\x26\xf1\xf2\xb7\xf4\x15\x8c\xb0\xa5\x36\xf4\x4b\xb1\xa3\xbf\x7c\xfc\xed\xa7\x0f\x1f\x67\x4a\x39\x5a\xd7\xe0\x03\xf2\xd1\xf4\x55\xbf\x8f\x5e\x3c\x21\x7b\x43\x2e\x30\xe8\x6d\x7a\x72\x2e\xa1\xfe\x1b\xff\xb7\xb8\xf3\x81\x18\x53\x3d\x1f\xda\x8f\xfc\xba\x5a\x4a\x9f\x97\xab\x3f\x96\xab\x4b\xc5\xf4\xc8\x50\x63\xd8\x30\xe2\xeb\xf5\x74\x94\x79\x4d\xd4\xa3\xa5\xa6\xd9\xa5\x4a\x3a\xb7\x9e\x54\xd0\xd9\x73\x33\xc4\x94\x10\x40\x94\xa2\x08\xf0\xc6\xde\x8e\x9e\xf2\xba\x80\x77\xd7\x15\xc8\xdc\xff\x7f\xf8\x7e\xdd\xd1\xc3\xba\x06\x2e\x07\x73\x29\x5a\xee\x88\xa5\x33\xf1\x14\x37\xa6\xa6\xa0\x67\xbf\x73\x3a\x39\x78\x43\xc8\x8d\x52\xf2\x89\x7c\x6a\xa2\x7d\x3f\xca\xe6\x5a\x8c\xc9\xe1\x6f\x98\x9e\x93\x7b\xf8\xcc\x58\xde\xc2\xcb\x3f\x1f\x96\xab\xfb\xfd\xf8\x1c\x95\x12\x3e\x07\x64\x07\x76\xcd\x08\x65\xd4\xcc\x9a\x5a\x17\x16\xea\xfb\xab\x52\x2c\x55\x95\x71\x55\xaa\x98\x81\xb9\x5c\xce\x9b\x77\xeb\xd4\x7e\x2e\x10\x59\x78\x18\x19\x20\x72\xaa\x02\x9f\x51\xb7\x81\x92\x99\x87\xf6\xe3\x7d\x74\xe4\x4a\xe2\x54\x6e\x98\x9e\x4c\xb7\x87\xa7\x07\x61\x04\xb9\x90\x5a\xdf\x96\x34\x85\x73\xdd\xd7\x02\xc7\xce\xcc\xe5\xf5\xb6\x5a\xfe\xbc\xbc\xfb\xf4\xb0\xfe\xb4\xba\xbb\x7f\x38\x6e\x85\x37\x99\x69\xee\x0a\x46\x38\x7b\x46\x90\xab\x4a\xde\x09\x36\xf3\xbf\x91\xe9\x87\x79\xa4\x6d\x3f\x00\x54\xca\x04\x60\xd4\xc4\xa5\x26\x6b\x51\x07\x43\x2e\x55\xd4\x25\x5c\x4e\x5c\x0f\x3c\x8c\x1a\x8d\xa0\x7d\xc7\xa8\xac\xc1\xde\x5a\xdb\x25\x02\xbd\xa4\x46\x63\x50\x8e\x07\x8c\xb5\x71\x25\xb2\x4f\x4f\xc3\x19\x20\x8f\xb9\xcb\x67\x85\x41\x20\x3d\xc6\xe4\xf3\x7b\xe2\x0a\x9c\xf1\x52\x1f\x86\xb8\xac\xfe\x06\x6f\xf4\x17\x2a\x92\x9b\xfb\xcc\x3e\x5f\x3f\x94\xa5\x54\x7a\x0f\xc9\x67\x2f\xda\x2e\x99\x32\xfa\x17\xcc\x04\xea\x6d\x37\xd5\xd2\x8f\x23\x63\x54\xbe\x0f\x75\x77\x12\x91\xe6\xe0\x0c\x34\x81\x07\x24\x18\x80\x11\x24\x9f\x5d\xb8\x43\x8f\x40\x53\x78\x40\x1a\xbd\x60\x02\x46\xa0\x09\xa6\x10\x58\x14\xf2\xf7\x90\x09\xd8\x03\x04\x29\xfb\x09\x92\xc3\xae\x4f\x41\x4c\x3f\xc3\x8e\x20\x6f\x7c\x01\x60\x30\x65\xd6\x5d\xdd\x20\x80\x7f\x81\x93\x06\xb0\x87\x64\xbd\x01\x04\xbd\x35\xd6\xa6\x37\x4f\x04\x98\xee\x1d\xe0\x40\x18\xc0\x6f\x93\xe3\x10\x41\x72\xe2\x50\x9a\xca\x04\xb0\x5d\x4c\xad\xf1\xc9\xfb\xc9\x05\xd8\x04\xcd\xa4\x89\xc5\xbd\xdc\x63\x72\xf8\x89\x2b\xe1\x2c\x1d\x22\x72\xb8\xbb\xe7\x25\x9f\xe4\x7b\xe3\x1c\xc6\x80\x75\x93\x4a\x78\xb2\xcd\xe1\xdb\xe2\xae\x86\xa6\x49\x0f\xee\x00\x90\xc3\xbc\x1f\x15\x92\xba\x1e\x00\xf2\x8e\xa6\x7a\xdb\x26\x47\xf9\xc5\x3a\xbf\x8b\x9e\xc0\x9a\x12\x04\x97\x1b\x17\x60\x79\x37\x6e\xc6\x85\x82\x4d\x59\x25\x5f\xd6\x46\x90\x1c\x76\x1f\x48\xc6\x3d\x00\xe4\xf5\xb1\xde\xa6\xb7\xf1\xc1\x36\x87\xef\x6b\x8b\x6d\xb2\xca\xde\x38\xbf\xbe\x1e\xc1\x51\x2b\x7c\xf1\x78\xc1\xe4\xf3\x6b\x8b\x20\xb8\x2f\x1b\x81\xb2\x76\x4b\xf0\x9b\x82\xfa\xbb\xfa\x94\x5f\x51\x06\x80\x29\x7f\x18\x6a\x90\x3d\x39\xb0\xf1\x75\xd2\x1b\x8e\x20\x1e\x75\xcb\x28\xba\x2a\x1f\x41\xfe\xa5\x0b\xf3\x6f\x25\xef\x9f\x00\x00\x00\xff\xff\x17\x75\xa6\x70\xfe\x1e\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
