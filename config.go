package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x7f\x6f\xdb\x36\x10\xfd\xbb\xfe\x14\x84\x3f\xc0\x8a\xed\x4f\x63\x08\xd0\x2d\xc6\x10\xac\xc8\x0a\x37\x1b\xf6\x9f\x71\xa2\x2e\x12\x2b\x8a\xa7\x1e\xa9\x2c\xde\xa7\x1f\xe4\x1f\x8a\x25\x39\x35\x2f\x14\xb6\x15\x28\x02\xd0\xf7\xf4\xee\x1d\xc9\xc7\x13\xe5\x8c\x0b\xe8\x82\x57\x3f\x2e\x94\xfa\x42\xd9\xfe\xaf\x52\x0e\x6a\x5c\xa9\x65\xd6\x1a\x9b\x7b\xe4\x27\xe4\xe5\x7e\xbc\xa0\x6d\x03\xa1\x5c\xa9\x65\x61\x42\xd9\x66\xdf\x69\xaa\xdf\x67\x4c\xa1\x44\xb6\x54\x18\xfd\x7e\x02\x69\x80\x83\x01\xbb\xcd\x88\x82\x0f\x0c\xcd\x4a\x05\x6e\x71\xff\x1b\xe3\xd7\xd6\x30\xd6\x7d\x06\xdd\x3f\x0d\x01\x0b\xe2\xdd\x4a\xdd\xde\x7d\xfe\xf5\x38\xd8\x30\x35\xc8\xc1\xa0\x5f\xa9\xa5\xd7\x0c\x41\x97\x87\xe7\xdf\x2c\x0e\xff\x19\xf3\xd6\xe5\xe0\xf4\x6e\xa5\x36\xeb\xdb\xdf\xef\x6f\x3f\xdc\x3f\x2c\x6e\x16\xaf\x28\xbc\xae\xe4\xd1\x58\xd4\xd4\x98\x93\x90\x63\x4d\xc6\xc3\xdf\xd2\x97\x31\x42\x45\x6d\xe8\x87\xc6\x89\xfe\xf2\xf1\xb7\x9f\x3e\x7c\x5c\x28\xe5\x68\x5b\x83\x0f\xc8\xc7\xd0\x57\xf3\x3e\x66\xf1\x84\xec\x0d\xb9\xc0\xa0\xab\xf8\xc9\xb9\x84\xfa\x6f\xf2\xaf\x70\xe7\x03\x31\xc6\x66\x3e\x8c\x9f\xe4\x75\x75\x29\x7d\x5e\x6f\xfe\x58\x6f\x2e\x2d\xa6\x47\x86\x1a\x43\xc9\x88\xaf\xaf\xa7\xa3\xcc\x6b\xa2\x1e\x2d\x35\xcd\x2e\x56\xd2\x79\xf4\xac\x82\xce\x9e\x9b\x20\x26\x87\x00\xa2\x29\x1a\x01\xde\xb8\xb7\x47\x4f\x79\x5d\xc0\xbb\xeb\x0a\x64\xe9\xff\x3f\x72\xbf\x9e\xe8\x61\x5c\x03\xe7\x03\x5f\x1a\x0d\x77\xc4\x52\x4f\x3c\xd5\x8d\xa9\xc9\xe8\xd9\xef\x9c\x8e\x2e\xde\x10\x72\xa3\x94\xdc\x91\x8f\xec\x25\x82\x0d\xa5\x2e\x51\x62\x6c\x13\x50\x4a\x06\x07\x47\x90\x39\xeb\x18\x93\xc2\xdf\x30\x3d\x47\xbb\xc8\x59\xb0\xdc\x44\xd6\x7f\x3e\xac\x37\xf7\x7b\x03\x9f\x2c\x66\x7c\x0e\xc8\x0e\xec\x96\x11\xf2\x91\x9d\x68\x6a\x5d\x58\xa9\xef\xaf\x4a\xb1\x54\x14\xc6\x15\xb1\x62\x06\xe1\x72\x39\x6f\xee\x17\x62\x1d\x25\x43\x64\x61\x3b\x34\x40\xa4\xac\x0a\x7c\x46\xdd\x06\x8a\x66\x1e\xc6\x4f\x4f\xf2\x49\x2a\x91\xe7\x42\xc3\xf4\x64\xba\x2e\x22\xbe\x08\x13\xc8\x85\xa9\xf5\x6d\x4e\x73\x24\xd7\xfd\x2c\x48\xec\x2c\x5c\xbe\xde\x36\xeb\x9f\xd7\x77\x9f\x1e\xb6\x9f\x36\x77\xf7\x0f\xc7\xc3\xf8\x26\x71\x9a\xbb\x05\x23\xf4\x9e\x09\xe4\xaa\x92\x77\x82\x76\xe2\x6f\x64\xfa\x61\x39\xd2\xb6\x37\x00\x15\xe3\x00\x8c\x9a\x38\xd7\x64\x2d\xea\x60\xc8\xc5\x8a\xba\x84\x4b\xa9\xeb\x81\x87\x51\xa3\x11\x6c\xdf\x29\x2a\xc9\xd8\x5b\x6b\xbb\x89\x40\x2f\x59\xa3\x63\x50\x4a\x06\x8c\xb5\x71\x39\xb2\x8f\x9f\x86\x33\x40\x1a\x73\x37\x9f\x05\x06\x81\xf4\x31\x26\x9d\xdf\x13\x17\xe0\x8c\x97\xe6\x30\xc4\x25\xed\x6f\xf0\x46\x7f\xa1\x2c\x7a\x73\x9f\xc5\xa7\xeb\x87\x3c\x97\x4a\xef\x21\xe9\xec\x59\xdb\x4d\xa6\x8c\xfe\x05\x33\x83\x7a\xdb\xb9\x5a\x7c\x3b\x32\x45\xa5\xe7\x50\x77\x9d\x88\x74\x0e\xce\x40\x33\x64\x40\x02\x03\x1c\x41\xd2\xd9\x85\x27\xf4\x04\x34\x47\x06\xa4\xd1\x0b\x1c\x70\x04\x9a\xc1\x85\xc0\xa2\x90\xbf\x87\xcc\xc0\x1e\x20\x48\xd9\x4f\x90\x14\x76\x7d\x2a\x62\x7c\x0f\x3b\x81\xbc\xf1\x05\x80\xc1\xe4\x49\xb7\x85\x83\x02\xfe\x05\x4e\x5a\xc0\x1e\x92\xf4\x06\x10\x74\x65\xac\x8d\xdf\x3c\x23\xc0\x7c\xef\x00\x07\xc2\x00\xbe\x8a\xae\xc3\x08\x92\x52\x87\xdc\x14\x26\x80\xed\x6a\x6a\x8d\x8f\x3e\x4f\x2e\xc0\x66\xd8\x4c\x9a\x58\xbc\x97\x7b\x4c\x0a\x3f\x71\x21\xf4\xd2\x21\x22\x85\xbb\x7b\x5e\x74\x27\xdf\x07\xa7\x30\x06\xac\x9b\x58\xc2\x53\x6c\x0a\x5f\x85\xbb\x1a\x9a\x26\xbe\xb8\x03\x40\x0a\xf3\xde\x2a\x24\xeb\x7a\x00\x48\x6b\x4d\x75\xd5\x46\x57\xf9\x25\x3a\x7d\x17\x3d\x81\x35\x39\x08\x2e\x37\x2e\xc0\xd2\x6e\xdc\x8c\x0b\x19\x9b\xbc\x88\xbe\x2e\x1e\x41\x52\xd8\x7d\x20\x19\xf7\x00\x90\xb6\x8f\x75\x15\xbf\x8d\x0f\xb1\x29\x7c\x5f\x5b\x6c\xa3\x55\xf6\xc1\xe9\xeb\xeb\x11\x1c\xb5\xc2\x17\x8f\x17\x4c\x3a\xbf\xb6\x08\x82\xfb\xb2\x09\x28\xe9\xb4\x04\x5f\x66\xd4\x7f\x2d\x88\xf9\x8e\x33\x00\xcc\xf9\x69\xaa\x41\xf6\xe4\xc0\x8e\xaf\x93\xde\xd0\x82\x78\xd4\x2d\xa3\xe8\xaa\x7c\x02\xf9\x97\x2e\xcc\xbf\x35\x79\xff\x04\x00\x00\xff\xff\x6f\x26\x35\xd6\x80\x1f\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
