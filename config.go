package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\x5e\x7f\x05\xe1\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xc4\x35\xc5\xd1\x0e\xa9\x34\xee\xd7\x17\xf2\x45\xab\x8b\x13\x73\x42\xb5\x5d\x60\x11\x80\x9e\xa3\x33\x67\x48\x1e\x8e\x28\x67\x5c\x40\x17\xbc\xfa\x71\xa1\xd4\x17\xca\x0e\x7f\x95\x72\x50\xe1\x4a\x2d\xb3\xc6\xd8\xdc\x23\x3f\x21\x2f\x0f\xe3\x05\x6d\x6b\x08\xe5\x4a\x2d\x0b\x13\xca\x26\xfb\x4e\x53\xf5\x3e\x63\x0a\x25\xb2\xa5\xc2\xe8\xf7\x13\x48\x0d\x1c\x0c\xd8\x6d\x46\x14\x7c\x60\xa8\x57\x2a\x70\x83\x87\xdf\x18\xbf\x36\x86\xb1\xea\x32\x68\xff\x69\x08\x58\x10\xef\x57\xea\xf6\xee\xf3\xaf\xa7\xc1\x9a\xa9\x46\x0e\x06\xfd\x4a\x2d\xbd\x66\x08\xba\x3c\x3e\xff\x66\x71\xfc\xcf\x98\x37\x2e\x07\xa7\xf7\x2b\xb5\x59\xdf\xfe\x7e\x7f\xfb\xe1\xfe\x61\x71\xb3\x78\x41\xe1\x75\x25\x8f\xc6\xa2\xa6\xda\x9c\x85\x9c\x6a\x32\x1e\x7e\x4d\x5f\xc6\x08\x3b\x6a\x42\x37\x34\x4e\xf4\x97\x8f\xbf\xfd\xf4\xe1\xe3\x42\x29\x47\xdb\x0a\x7c\x40\x3e\x85\xbe\x98\xf7\x29\x8b\x27\x64\x6f\xc8\x05\x06\xbd\x8b\x9f\x9c\x4b\xa8\xff\x27\xff\x1d\xee\x7d\x20\xc6\xd8\xcc\x87\xf1\x93\xbc\xae\x2e\xa5\xcf\xeb\xcd\x1f\xeb\xcd\xa5\xc5\xf4\xc8\x50\x61\x28\x19\xf1\xe5\xf5\x74\x92\x79\x4d\xd4\xa3\xa5\xba\xde\xc7\x4a\xea\x47\xcf\x2a\xa8\xf7\xdc\x04\x31\x39\x04\x10\x4d\xd1\x08\xf0\xc6\xbd\x3d\x7a\xca\xcb\x02\xde\x5d\x57\x20\x4b\xbf\x17\xfd\x2f\x78\xd6\x1c\xba\xae\x8b\x38\x8e\x6b\xe0\x7c\xe0\x59\xa3\xe1\x96\x58\xea\x97\xe7\x9a\x32\xd5\x19\x3d\xfb\xbd\xd3\xd1\x85\x1d\x42\x6e\x94\x92\xbb\xf5\x89\xbd\x44\xb0\xa1\xd4\x25\x4a\x4c\x6f\x02\x4a\xc9\xe0\xe8\x16\x32\xd7\x1d\x63\x52\xf8\x6b\xa6\xe7\x68\x87\xe9\x05\xcb\x0d\x66\xfd\xe7\xc3\x7a\x73\x7f\x30\xf7\xc9\x62\xc6\xe7\x80\xec\xc0\x6e\x19\x21\x1f\x59\x8d\xa6\xc6\x85\x95\xfa\xfe\xaa\x14\x4b\x45\x61\x5c\x11\x2b\x66\x10\x2e\x97\xf3\xe6\x5e\x22\xd6\x6d\x32\x44\x16\xb6\x4a\x03\x44\xca\xaa\xc0\x67\xd4\x4d\xa0\x68\xe6\x61\xfc\xf4\x94\x9f\xa4\x12\x79\x66\xd4\x4c\x4f\xa6\xed\x30\xe2\x8b\x30\x81\x5c\x98\x5a\xdf\xe4\x34\x47\x72\xed\xcf\x82\xc4\x7a\xe1\xf2\xf5\xb6\x59\xff\xbc\xbe\xfb\xf4\xb0\xfd\xb4\xb9\xbb\x7f\x38\x1d\xd4\x37\x89\xd3\xdc\x2e\x18\xa1\xf7\x4c\x20\x57\x95\xbc\x13\xb4\x1a\x7f\x23\xd3\x0f\xcb\x91\xb6\x83\x01\xa8\x18\x07\x60\xd4\xc4\xb9\x26\x6b\x51\x07\x43\x2e\x56\xd4\x25\x5c\x4a\x5d\x8f\x3c\x8c\x1a\x8d\x60\xfb\x4e\x51\x49\xc6\xde\x58\xdb\x4e\x04\x7a\xc9\x1a\x1d\x83\x52\x32\x60\xac\x8c\xcb\x91\x7d\xfc\x34\xf4\x00\x69\xcc\xed\x7c\x16\x18\x04\xd2\xc7\x98\x74\x7e\x4f\x5c\x80\x33\x5e\x9a\xc3\x10\x97\xb4\xbf\xc1\x1b\xfd\x85\xb2\xe8\xcd\xdd\x8b\x4f\xd7\x0f\x79\x2e\x95\xde\x41\xd2\xd9\xb3\xa6\x9d\x4c\x19\xfd\x37\xcc\x0c\xea\x6d\xeb\x6a\xf1\xed\xc8\x14\x95\x9e\x43\xd5\x76\x22\xd2\x39\xe8\x81\x66\xc8\x80\x04\x06\x38\x82\xa4\xb3\x0b\x4f\xe8\x09\x68\x8e\x0c\x48\xa3\x17\x38\xe0\x08\x34\x83\x0b\x81\x45\x21\x7f\x07\x99\x81\x3d\x40\x90\xb2\x9f\x21\x29\xec\xfa\x5c\xc4\xf8\x1e\x76\x02\x79\xe3\x0b\x00\x83\xc9\x93\x6e\x12\x07\x05\xfc\x0b\x9c\xb4\x80\x1d\x24\xe9\x0d\x20\xe8\x9d\xb1\x36\x7e\xf3\x8c\x00\xf3\xbd\x03\x1c\x09\x03\xf8\x5d\x74\x1d\x46\x90\x94\x3a\xe4\xa6\x30\x01\x6c\x5b\x53\x6b\x7c\xf4\x79\x72\x01\x36\xc3\x66\xd2\xc4\xe2\xbd\xdc\x61\x52\xf8\x89\x0b\xa1\x97\x0e\x11\x29\xdc\xed\xf3\xa2\x3b\xf9\x2e\x38\x85\x31\x60\x55\xc7\x12\x9e\x63\x53\xf8\x76\xb8\xaf\xa0\xae\xe3\x8b\x3b\x00\xa4\x30\x1f\xac\x42\xb2\xae\x07\x80\xb4\xd6\x54\xef\x9a\xe8\x2a\xf7\xa3\xe7\xb1\xe5\xe4\xcd\xf8\x04\xd6\xe4\x20\xb8\x23\xb9\x00\x4b\xbb\xb8\x33\x2e\x64\x6c\xf2\x22\xfa\x46\x7a\x04\x49\x61\xf7\x81\x64\xdc\x03\x40\x9a\x1d\xe8\x5d\xbc\x1b\x1c\x63\x53\xf8\xbe\x36\xd8\x44\xab\xec\x82\xd3\xd7\xd7\x23\x38\x6a\x84\xef\x2f\xdf\x30\xe9\xfc\xda\x22\x08\xae\xdd\x26\xa0\xa4\x43\x17\x7c\x99\x51\xf7\xd1\x21\xe6\x53\xd1\x00\x30\xe7\xd7\xaf\x1a\xd9\x93\x03\xfb\x9a\x77\x44\x76\x32\x1e\x75\xc3\x28\xba\x71\x9f\x40\xfe\xa3\x7b\xf7\xd7\x26\xef\x9f\x00\x00\x00\xff\xff\x42\xed\xed\x29\xe3\x1f\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
