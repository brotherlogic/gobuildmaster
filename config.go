// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6f\xe3\x36\x0c\xfe\xbc\xfc\x0a\x21\x3f\x60\xc5\xbe\x06\x43\x80\x0e\x0d\x86\x61\x45\x07\xa4\xdd\xb0\x6f\x01\x2d\xf3\x1c\x35\xb2\xe8\xa3\xe8\x5e\xf2\xef\x0f\xce\x8b\x2f\xb6\x93\x46\xaa\x7c\x77\x01\x82\x00\x32\x1f\x3f\x0f\x29\x92\x62\xe4\x8c\x13\x74\xe2\xd5\xef\x13\xa5\x5e\x29\xdb\xff\x2a\xe5\xa0\xc4\x99\x9a\x66\xb5\xb1\xb9\x47\x7e\x43\x9e\xee\xd7\x0b\x5a\x55\x20\xeb\x99\x9a\x16\x46\xd6\x75\xf6\xab\xa6\xf2\x2e\x63\x92\x35\xb2\xa5\xc2\xe8\xbb\x01\xa4\x02\x16\x03\x76\x95\x11\x89\x17\x86\x6a\xa6\x84\x6b\xdc\x3f\x63\xfc\x5c\x1b\xc6\xb2\x55\xd0\x7c\x34\x08\x16\xc4\xbb\x99\x7a\xf8\xeb\xf9\xef\xe3\x62\xc5\x54\x21\x8b\x41\x3f\x53\x53\xaf\x19\x44\xaf\x0f\xef\x9f\x4f\x0e\x5f\xc6\xbc\x76\x39\x38\xbd\x9b\xa9\xe5\xe2\xe1\xdf\xa7\x87\xfb\xa7\x97\xc9\x7c\x72\xc5\xc3\xdb\x9e\x7c\x32\x16\x35\x55\xe6\xe4\xc8\x31\x26\xfd\xe5\xf7\xfc\xcb\x18\x61\x43\xb5\xb4\x4b\x7d\xa1\x7f\x3e\xfe\xf3\xc7\xfd\xe3\x44\x29\x47\xab\x12\xbc\x20\x1f\x4d\xaf\xea\x3e\xaa\x78\x43\xf6\x86\x9c\x30\xe8\x4d\xf8\xe6\x5c\x42\xfd\x1c\xfd\x1b\xdc\x79\x21\xc6\x50\xe5\x5d\xfb\x81\xae\x9b\xa9\xf4\xbc\x58\xfe\xb7\x58\x5e\x4c\x26\x01\x31\xe4\xc8\xe1\xf5\x7c\x3a\xba\x79\xcb\xa9\x1c\x04\xa2\xbc\xea\x01\x3e\x58\x0e\xbd\xb7\x5c\x77\xe0\x97\x94\x72\x38\xac\x6b\xe0\xbc\x53\x0e\xbd\xe5\x86\x38\xb6\x14\x4f\xd1\x63\xaa\x32\xda\xfa\x9d\xd3\xc1\xf1\xeb\x42\xe6\x4a\xc5\x37\x82\x53\x59\x33\x94\x18\x59\x4e\x7d\x4c\x0a\x7f\xc5\xb4\xdd\x85\x12\x9f\x19\xc7\x97\xc2\xe2\xff\x97\xc5\xf2\x69\x5f\xb5\x83\x54\xc2\xad\x20\x3b\xb0\x2b\x46\xc8\x77\xdd\x7c\xd2\x54\x3b\x99\xa9\xdf\x6e\xba\x62\xa9\x28\x8c\x2b\x42\x9d\xe9\x98\x7f\xf7\x13\xe1\x9d\x1a\x38\x1d\x7a\x88\x1c\x79\xe6\x75\x10\x29\x59\x80\x5b\xd4\xb5\x50\x30\x73\xd7\x7e\xd8\xae\x07\x52\x02\x3b\x59\xc5\xf4\x66\x9a\xa3\x22\x3c\x08\x03\xc8\x85\xcc\xf4\x75\x4e\x63\x88\x6b\x1e\x47\x08\x3b\x33\xbf\x20\x2a\x61\x40\xb9\x7e\xaa\x74\x48\xe7\xad\xb7\xc1\x35\xd4\xa4\x54\x64\x37\x1a\x40\xc6\x4b\x07\x46\x4d\x9c\x6b\xb2\x16\x75\x73\x58\x86\x4a\xba\x84\x4b\x29\x8f\x03\x0f\xa3\x46\x13\x51\x9e\x43\x54\x52\xa3\xae\xad\x6d\xd2\x02\x7d\x4c\x0e\xf6\x41\x29\x0a\x18\x4b\xe3\x72\x64\x1f\xbe\x0d\x67\x80\x34\xe6\x66\x3f\x0b\x94\x08\xd7\xfb\x98\x74\x7e\x4f\x5c\x80\x33\x3e\x56\x43\x17\x97\xa2\x23\x03\x6f\xf4\x2b\x65\xc1\xa5\x79\x66\x9f\xee\x3f\xe4\x79\xac\xeb\x2d\x24\x9d\x3d\xab\x9b\xcd\x8c\xa3\xff\x86\x19\xc1\x7b\xdb\x34\xd9\xf0\xf1\x62\x88\x4a\xd7\x50\x36\xc3\x46\xec\x1e\x9c\x81\x46\x50\x40\x11\x0d\xb0\x07\x49\x67\x8f\x3c\x81\x07\xa0\x31\x14\x90\x46\x1f\xd1\x01\x7b\xa0\x11\xba\x10\x58\x8c\xe4\x6f\x21\x23\xb0\x0b\x48\x2c\xfb\x09\x92\xc2\xae\x4f\x41\x0c\x9f\x51\x07\x90\x0f\xce\xf8\x0c\x26\x4f\xba\xf2\xe9\x04\xf0\x0b\xb8\xd8\x00\xb6\x90\xa4\x09\x5f\xf4\xc6\x58\x1b\x5e\x3c\x3d\xc0\x78\x43\xdd\x81\x50\xc0\x6f\x82\xe3\xd0\x83\xa4\xc4\x21\x37\x85\x11\xb0\x4d\x4c\xad\xf1\xc1\xe7\xc9\x05\xd8\x08\xc5\xa4\x89\xa3\x6b\xb9\xc5\xa4\xf0\x13\x17\x91\xbd\xb4\x8b\x48\xe1\x6e\xde\x17\x3c\xc9\xb7\xc6\x29\x8c\x82\x65\x15\x4a\x78\xb2\x4d\xe1\xdb\xe0\xae\x84\xaa\x0a\x0f\x6e\x07\x90\x94\xdd\xe0\xd7\x19\xb5\x77\x65\x21\x37\x81\x1d\xc0\x98\x17\x9c\x15\xb2\x27\x07\xb6\xff\x5f\xf4\x03\x2d\xc3\xa3\xae\x19\xa3\xae\xaa\x06\x90\x1f\x74\x61\xf5\xde\xe6\x7d\x0d\x00\x00\xff\xff\xa7\xc0\xbc\x9f\xf5\x18\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6389, mode: os.FileMode(436), modTime: time.Unix(1603411757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
