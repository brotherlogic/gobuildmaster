// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdb\x6e\xdb\x3c\x0c\xbe\x6e\x9e\x42\xc8\x03\xfc\xc5\xbf\xcb\x60\x08\xd0\xa1\xc1\x30\xac\xe8\x80\xb4\x1b\x76\x17\xd0\x32\xeb\xa8\x91\x45\x8f\x92\xb3\x64\x4f\x3f\x38\x07\x37\x3e\xa4\x91\x2a\xef\x00\x0c\x05\x14\x7e\xfe\xf8\x51\x24\x25\xd1\x28\xe3\xd0\x38\x2b\xde\x8f\x84\x78\xa6\x64\xf7\x57\x08\x03\x39\x4e\xc4\x38\x29\x95\x4e\x2d\xf2\x1a\x79\xbc\x5b\xcf\x68\x51\x80\x5b\x4e\xc4\x38\x53\x6e\x59\x26\xff\x49\xca\xaf\x13\x26\xb7\x44\xd6\x94\x29\x79\xdd\x81\x14\xc0\x4e\x81\x5e\x24\x44\xce\x3a\x86\x62\x22\x1c\x97\xb8\xfb\x8d\xf1\x47\xa9\x18\xf3\xda\x83\xea\x9f\x04\x87\x19\xf1\x76\x22\x6e\x3f\x3d\x7c\x3e\x2c\x16\x4c\x05\xb2\x53\x68\x27\x62\x6c\x25\x83\x93\xcb\xfd\xf7\xa7\xa3\xfd\x7f\xc6\xb4\x34\x29\x18\xb9\x9d\x88\xf9\xec\xf6\xeb\xfd\xed\xcd\xfd\xe3\x68\x3a\x3a\xa3\xf0\xb2\x92\x27\xa5\x51\x52\xa1\x8e\x42\x0e\x31\x69\x2f\xbf\xa6\x2f\x61\x84\x15\x95\xae\x5e\x6a\x3b\xfa\xf1\xee\xcb\x87\x9b\xbb\x91\x10\x86\x16\x39\x58\x87\x7c\x30\x3d\xeb\xf7\xc1\x8b\x35\xb2\x55\x64\x1c\x83\x5c\xf9\x6f\x4e\x1f\xea\xdf\xf8\xbf\xc2\xad\x75\xc4\xe8\xeb\x79\xd3\xbe\xe3\xd7\xc5\x54\x7a\x98\xcd\xbf\xcd\xe6\x7d\xc9\xf4\xc4\x90\xa3\x5b\x32\xe2\xf9\x7c\x3a\xc8\xbc\x24\x2a\x05\x07\x41\xaa\x5a\x80\x37\x96\x43\xeb\x2b\xe7\x05\x5c\xc5\x94\xc3\x7e\x5d\x02\xa7\x8d\x72\x68\x2d\x57\xc4\xa1\xa5\x78\x8c\x1e\x53\x91\xd0\xc6\x6e\x8d\xf4\x8e\x5f\x13\x32\x15\x22\xbc\x11\x1c\xcb\x7a\x97\x06\x61\xe5\xd4\xc6\xc4\xf0\x17\x4c\x9b\xad\x2f\xf1\x89\x71\x78\x29\xcc\xbe\x3f\xce\xe6\xf7\xbb\xaa\xed\xa4\x12\x6e\x1c\xb2\x01\xbd\x60\x84\x74\xdb\xcc\x27\x49\xa5\x71\x13\xf1\xff\x45\x29\x9a\xb2\x4c\x99\xcc\x57\x4c\xc3\xfc\x8f\x9f\x08\xaf\xd4\xc0\xf1\xd0\x43\xe4\xc0\x33\xaf\x81\x88\xc9\x02\xdc\xa0\x2c\x1d\x79\x33\x37\xed\xbb\xed\xba\xe3\x8a\x67\x27\x2b\x98\xd6\xaa\x3a\x2a\xfc\x83\xd0\x81\xf4\x64\xa6\x2d\x53\x1a\xc2\xb9\xea\xe7\x00\xc7\x4e\xcc\x7b\x9c\x8a\xb8\xa0\x9c\x3f\x55\x1a\xa4\xd3\x5a\xad\x77\x0d\x55\x29\x15\xd8\x8d\x3a\x90\x8b\xad\xe1\x2a\x40\xd0\x2f\x64\x7a\xd7\x2b\x47\xf8\xe8\x61\x94\xc4\xa9\x24\xad\x51\x3a\x45\xc6\x57\x54\x1f\x2e\xa6\xc0\xf6\x3c\x8c\x12\x55\x40\x81\x77\x51\x51\xad\xbe\xd4\xba\xda\x08\xb4\x21\x59\xdc\x06\xc5\x78\xc0\x98\x2b\x93\x22\x5b\xff\x6d\x38\x01\xc4\x31\x57\xfb\x99\xa1\x0b\x90\xde\xc6\xc4\xf3\x5b\xe2\x0c\x8c\xb2\xa1\x3e\x34\x71\x31\x7e\x24\x60\x95\x7c\xa6\xc4\xbb\xb8\x4f\xec\xe3\xf5\x43\x9a\x86\x4a\xaf\x21\xf1\xec\x49\x59\x6d\x66\x18\xfd\x0b\x66\x00\xf5\xba\xea\x6a\xfe\x17\x94\x2e\x2a\xde\x87\xbc\xba\xae\x84\xee\xc1\x09\x68\x00\x0f\x28\xa0\x01\xb6\x20\xf1\xec\x81\x67\x78\x07\x34\x84\x07\x24\xd1\x06\x74\xc0\x16\x68\x80\x2e\x04\x1a\x03\xf9\x6b\xc8\x00\xec\x0e\x5c\x28\xfb\x11\x12\xc3\x2e\x8f\x41\xf4\xbf\xe5\x76\x20\x6f\x7c\x25\x30\xa8\x34\x6a\x68\xd4\x08\xe0\x4f\x30\xa1\x01\xac\x21\x51\x6f\x04\x27\x57\x4a\x6b\xff\xe2\x69\x01\x86\x7b\x25\xec\x09\x1d\xd8\x95\x77\x1c\x5a\x90\x98\x38\xa4\x2a\x53\x0e\x74\x15\x53\xad\xac\xf7\x79\xd2\x03\x1b\xa0\x98\x24\x71\x70\x2d\xd7\x98\x18\x7e\xe2\x2c\xb0\x97\x36\x11\x31\xdc\xd5\xf7\xbc\x6f\xf2\xb5\x71\x0c\xa3\xc3\xbc\xf0\x25\x3c\xda\xc6\xf0\xad\x70\x9b\x43\x51\xf8\x07\xb7\x01\x88\x61\xde\xb5\x8a\x90\xbc\x6e\x00\xe2\xae\xa6\x72\x55\x7a\x47\xf9\xc5\x3a\xbe\x8a\xd6\xa0\x55\x0a\x01\xe3\x8f\x1e\x58\xdc\x0c\x4e\x19\x97\xb0\x4a\x33\xef\x09\x6e\x0b\x12\xd5\xcf\xc0\x2e\x13\xaa\xe7\xab\x3e\xd3\xe3\x06\x60\xc8\xa1\x78\x81\x6c\xc9\x80\x6e\x3f\xf8\xdf\x70\x48\x58\x94\x25\x63\xd0\x78\xb3\x03\xf9\x4b\x43\xce\x88\xcd\x5b\x52\x69\xf1\x69\xf7\x46\xf6\x55\xd9\x82\xbc\x72\x1d\x11\xbf\x03\x00\x00\xff\xff\x52\xfb\x04\x09\xa6\x1b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 7078, mode: os.FileMode(436), modTime: time.Unix(1619743110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
