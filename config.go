// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdb\x6e\xe3\x36\x10\x7d\xde\x7c\x05\xe1\x0f\xe8\xa2\xc5\xa2\x0f\x46\x11\x60\xdb\x18\x6d\xd0\x45\x36\x70\xdc\xa2\x7d\x32\x46\xd4\x44\xe6\x9a\xe2\x68\x87\xa4\x1b\xf7\xeb\x0b\xf9\x16\x5d\xec\x88\x0c\x95\x6e\x80\x20\x00\x35\x87\x67\x66\x38\x3c\x1c\x51\x31\xca\x38\x34\xce\x8a\x9f\xae\x84\xf8\x42\xd9\xee\xaf\x10\x06\x4a\x9c\x8a\x49\xe6\x95\xce\x2d\xf2\x06\x79\xb2\x1b\x2f\x68\x59\x81\x5b\x4d\xc5\xa4\x50\x6e\xe5\xb3\xef\x24\x95\xef\x33\x26\xb7\x42\xd6\x54\x28\xf9\xbe\x07\xa9\x80\x9d\x02\xbd\xcc\x88\x9c\x75\x0c\xd5\x54\x38\xf6\xb8\x7b\x96\x31\xc2\x9a\xbc\x6b\x0c\x31\x7e\xf5\x8a\xb1\x3c\x39\x55\xff\x48\x70\x58\x10\x6f\xa7\xe2\xe6\xf6\xe1\xf7\xc3\x60\xc5\x54\x21\x3b\x85\x76\x2a\x26\x56\x32\x38\xb9\xda\x53\x5e\x87\xcc\xf4\xdb\xe7\x87\xc5\x72\xf1\xf7\xfd\xec\xdc\x74\xf7\x4a\x7c\x78\x9e\xab\xfe\x65\xcc\xbd\xc9\xc1\xc8\xed\x54\xcc\x67\x37\x7f\xdc\xdd\x7c\xbc\x5b\xb4\xc6\x7f\xfc\xd0\x7c\x72\x7d\x75\x21\xb5\xc3\x29\x7c\x54\x1a\x25\x55\xea\x98\xc1\xc3\x62\x74\x87\xa3\x12\xdb\x0d\xe1\xd7\x4f\x9f\x7f\xfe\xf8\xe9\x4a\x08\x43\xcb\x12\xac\x43\x3e\x98\x5e\xf4\xfb\xe0\xc5\x06\xd9\x2a\x32\x8e\x41\xae\xc3\xab\xe2\x1c\xea\xdb\xf8\xbf\xc6\xad\x75\xc4\x18\xea\x79\xdb\x3e\xbe\x60\x1f\x66\xf3\x3f\x67\xf3\x73\x35\x26\xb5\xb7\xee\x87\xcb\x55\x76\x08\x71\x28\xa0\x47\x4d\x55\xb5\x0d\x0d\xa7\x69\xfd\x6a\xcf\x9b\x93\x24\x78\x9e\x83\x83\xa8\xb5\xe8\x00\x5e\x29\x15\x9d\x59\x2e\x07\xf0\x6e\x38\x82\x38\xf7\x1b\xd6\xff\x8f\x2a\x8e\x11\xea\x70\x5c\xfb\x71\x09\x9c\xb7\xf4\xaa\x33\xbc\x13\xe5\xf3\x2a\x3a\x98\x66\xa6\x2a\xa3\x27\xbb\x35\x32\x38\xd7\x6d\xc8\xb5\x10\x17\x35\x7c\x88\x7d\x85\xa0\xdd\x4a\xae\x30\x46\xf0\x7a\xa0\x14\x0f\x20\xdf\xd4\x0f\xa3\xce\xe1\x2e\x26\x85\xff\x91\xa1\xc4\x48\xc5\xef\x62\x52\xf8\x2b\xa6\xa7\x60\x85\x6b\x18\x0f\xec\x9a\xd9\x5f\x8b\xd9\xfc\x6e\x77\x8a\xf4\x76\x0e\x3e\x39\x64\x03\x7a\xc9\x08\x79\x47\xea\x24\x79\xe3\xa6\xe2\xfb\x41\xbf\x35\x15\x85\x32\x45\xa8\xe7\x2d\xf3\x37\x6c\x8d\x5e\x38\x4b\xdd\x92\xcc\x72\x5f\x34\x53\x31\xe1\x5c\xd9\x4a\xc3\x76\x32\xac\x84\xf8\x84\xd2\x3b\x0a\x2e\x8f\xb6\x7d\xff\xb8\xef\x55\x4b\xe0\x99\x52\x31\x6d\x54\xdd\x6a\x84\x57\x6a\x0f\x72\x26\xf5\x2f\xc9\xb5\xf5\x39\x8d\xe1\x78\xfd\x38\xc2\xe9\x86\xf9\x40\x61\xcc\x67\xbf\xcc\x6e\xef\x17\xcb\xfb\xf9\xed\xdd\xe2\x70\xa2\x5f\x27\x6e\xc9\x63\x65\x84\xca\xf1\xb3\x79\x0a\x6b\x86\xc8\x91\x3a\xd4\x83\xb4\x93\xf5\x2e\xa2\xed\xf9\x17\x99\x9a\xfd\xda\x2e\x90\x9d\x18\x88\x10\x35\x60\x94\xc4\xb9\x24\xad\x51\x3a\x45\x26\x34\x82\x73\xb8\x94\x24\xee\x79\x18\x25\xaa\x88\xf3\xa4\x8f\x4a\x52\x74\xaf\x75\xbd\x10\x68\x63\x6a\xbe\x0b\x4a\xf1\x80\xb1\x54\x26\x47\xb6\xe1\xcb\xd0\x00\xa4\x31\xd7\xeb\x59\xa0\x8b\x08\xbd\x8b\x49\xe7\xb7\xc4\x05\x18\x65\x63\x7d\x68\xe3\x92\x36\x33\x58\x25\xbf\x50\x16\xbc\x93\x1b\xf6\xe9\xf1\x43\x9e\xc7\x86\x7e\x82\xa4\xb3\x67\xbe\x5e\xcc\x38\xfa\x67\xcc\x08\xd1\xeb\x5a\xd5\xc2\x5b\x93\x3e\x2a\xdd\x87\xb2\xee\x4a\x62\xd7\xa0\x01\x1a\xc1\x03\x8a\x10\xc0\x0e\x24\x9d\x3d\xf2\xc4\xef\x81\xc6\xf0\x80\x24\xda\x08\x05\xec\x80\x46\x50\x21\xd0\x18\xc9\x7f\x82\x8c\xc0\xee\xc0\xc5\xb2\x1f\x21\x29\xec\xf2\x98\xc4\xf0\x7e\xb9\x07\x79\xe5\xcb\x00\x83\xca\x43\x2e\x36\xc3\x12\xf8\x0f\x98\xd8\x04\x9e\x20\xe9\x2d\x8c\x03\xbb\x0e\x66\xef\x40\xd2\x7a\xdf\x42\x39\xd0\x75\x24\x5a\xd9\x60\x15\x3f\x03\x1b\xa1\x84\x25\x71\xf4\x0e\x3a\x61\x52\xf8\x89\x8b\x48\x05\x6b\x23\x52\xb8\xeb\xf9\x82\xfb\xe7\x93\x71\x0a\xa3\xc3\xb2\x0a\x25\x3c\xda\xa6\xf0\xad\x71\x5b\x42\x55\x85\x27\xb7\x05\x48\x61\xde\x6d\xd0\x98\xba\x6e\x01\xd2\x1a\x42\xb9\xf6\xc1\x59\x6e\x5a\x8f\x23\x86\xc9\x9b\x71\x03\x5a\xe5\x10\x71\x0b\x72\x06\x96\x76\x4f\xa6\x8c\xcb\x58\xe5\x45\xf0\x9d\x74\x07\x92\xc2\x6e\x1d\xc5\x71\xb7\x00\x69\x72\x20\xd7\xe1\x6a\xb0\xb7\x4d\xe1\xfb\xea\xd1\x07\x47\x79\x32\x4e\xaf\xaf\x47\x30\xe4\x23\xdf\x1a\x9e\x31\xe9\xfc\x52\x23\x44\x5c\xac\xf5\x40\x29\x1e\xa0\xd7\xe1\xcc\x27\xe3\x71\xde\x93\xe3\xdf\x90\x93\x5b\x0c\xb0\xab\x8c\x4e\x5f\x54\x42\x3e\x8d\xb5\x00\xaf\xfe\xb4\x57\x21\x5b\x32\xa0\x5f\x92\xc5\xc0\x1b\x4d\x8b\xd2\x33\x46\xdd\xdd\xf7\x20\x6f\x71\x83\x9f\x74\x42\x99\x5c\x42\x59\x45\xfe\x4b\x44\x0f\x95\xe4\x83\x57\x3a\xe2\xea\xa2\x61\xfe\x22\xeb\x7f\x01\x00\x00\xff\xff\x04\xb9\xb5\x9a\x09\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8713, mode: os.FileMode(436), modTime: time.Unix(1659714104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
