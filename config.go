// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xd1\x6a\xf2\x40\x10\x85\xaf\xff\x3c\xc5\x90\x07\xf8\xbd\x0f\x45\xb0\x28\xa5\x54\x2c\x68\xdb\x5b\x99\x6c\xa6\xc9\xd6\x64\x67\x3b\x3b\x2b\xf8\xf6\x45\x8d\x82\xa9\xa9\xb6\xbd\x68\x20\x04\x4e\x66\x76\xbf\x33\x7b\xd6\x59\xa7\xe4\x34\xc0\x4d\x02\xf0\xc6\xf9\xee\x0b\xe0\xb0\xa1\x0c\xd2\x3c\xda\xba\x08\x24\x6b\x92\x74\xa7\x97\xbc\xf4\xa8\x55\x06\x69\x69\xb5\x8a\xf9\x7f\xc3\xcd\x20\x17\xd6\x8a\xa4\xe6\xd2\x9a\xc1\xa7\x16\x8f\xa2\x16\xeb\x65\xce\xac\x41\x05\x7d\x06\x2a\x91\x76\xff\x84\xde\xa3\x15\x6a\x8e\x04\xdb\xc7\xa0\x52\xc9\xb2\xc9\x60\x7c\xbf\x78\x68\x45\x2f\xec\x49\xd4\x52\xc8\x20\x0d\x46\x50\x4d\xb5\x5f\x7f\x98\xec\x5f\xa1\x22\xba\x02\x9d\xd9\x64\x30\x9f\x8c\x9f\x67\xe3\xd1\xec\x29\x19\x26\x3d\x0e\x2f\x3b\x79\xb5\x35\x19\xf6\xf6\x60\xa4\x9d\x49\x57\xfe\xca\x5f\x2e\x84\x2b\x8e\x7a\x94\xba\xa0\x77\xd3\xc7\xdb\xd1\x34\x01\x70\xbc\x6c\x30\x28\x49\x5b\xda\xcb\xdd\x52\xac\x49\x82\x65\xa7\x82\x66\x75\xfd\xe1\x9c\xeb\xfa\x1b\xfe\x15\x6d\x82\xb2\xd0\xb5\xe4\xa7\xf5\x17\x72\xb3\x98\xcc\x5f\x26\xf3\x73\xc9\x91\xe8\xdc\xc1\xf8\xb9\xe0\xb4\x7e\x2e\xd1\x17\xa8\xf8\x2d\xfc\x4e\xc3\x0f\x73\x7f\x3a\x84\x7e\xfe\x7f\xbf\x89\xfd\x5e\x37\x28\xc5\x49\xec\x3b\xf2\x76\xe3\xbe\x2b\xf7\x11\x00\x00\xff\xff\x2c\xad\xe5\x42\x54\x04\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1108, mode: os.FileMode(420), modTime: time.Unix(1593380699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
