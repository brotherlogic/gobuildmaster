// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x46\x7e\xc0\x0e\x1b\x0e\xfb\x10\x0c\x05\x6e\x68\xb0\x0d\x3b\xb4\x87\xb6\x1b\xb6\x7d\x09\x68\x99\x75\x74\x91\x45\x1f\x25\x75\xcd\x7e\xfd\xe0\x34\x71\xfd\xd6\x5a\xac\xd2\xad\x40\x51\x40\xe6\xa3\x87\x14\xa9\x47\xb4\x55\xab\xad\x47\xeb\x5d\xf6\xc3\x59\x96\x7d\xa1\x7c\xff\x37\xcb\x2c\x54\xb8\xcc\x16\x79\xd0\xa6\x70\xc8\xf7\xc8\x8b\xfd\x78\x49\xeb\x1a\xfc\x66\x99\x2d\x4a\xed\x37\x21\xff\x46\x51\xf5\x3e\x67\xf2\x1b\x64\x43\xa5\x56\xef\x47\x90\x1a\xd8\x6b\x30\xeb\x9c\xc8\x3b\xcf\x50\x2f\x33\xcf\x01\xf7\xcf\x72\x46\xd8\x52\xf0\x9d\x21\xc6\xaf\x41\x33\x56\xad\x53\xcd\x8f\x02\x8f\x25\xf1\x6e\x99\x5d\xfc\x72\xf3\xeb\x61\xb0\x66\xaa\x91\xbd\x46\xb7\xcc\x16\x4e\x31\x78\xb5\x79\xa4\x3c\x8f\x99\xe9\xe7\xab\x9b\xdb\xf5\xed\x9f\x9f\x57\x53\xd3\x7d\xd6\xd9\x07\xc1\x5c\x7f\x5d\x5d\x4e\x4e\x63\xc9\x2a\x13\x9c\x3f\xae\x45\x33\x59\xf3\xcb\x58\x04\x5b\x80\x55\xbb\x65\x76\xbd\xba\xf8\xed\xf2\xe2\xe3\xe5\x6d\x6f\xfc\xfb\x0f\xdd\x27\xe7\x67\xcf\xe4\x69\x3e\x1f\x77\xda\xa0\xa2\x5a\x1f\x5d\x38\x64\x76\x38\x2c\xca\xd2\x30\x84\x9f\x3e\x5d\xfd\xf8\xf1\xd3\x59\x96\x59\x5a\x57\xd0\x84\x7b\x30\x7d\xd6\xef\x83\x17\xf7\xc8\x4e\x93\xf5\x0c\x6a\x1b\x5f\x62\x53\xa8\xff\xc7\xff\x2d\xee\x9c\x27\xc6\x58\xcf\xfb\xf6\xf2\xea\xbf\x59\x5d\xff\xbe\xba\x9e\xaa\x34\xe0\x92\xec\xf3\x45\x76\x88\x70\x2e\x9e\x3b\x43\x75\xbd\x8b\x8d\xa6\x6b\xfd\x6a\xc7\xbb\x93\x24\x78\x5e\x80\x07\x51\x2a\x06\x80\x57\xca\xce\x60\x96\xe7\x03\x78\x37\x1f\x81\xcc\xfd\x8e\xf5\x7f\xa3\xb0\x13\xa1\xbe\xa9\x2e\xce\xae\xdb\xfc\x22\x3d\x8e\x2b\xe0\xa2\xa7\x7d\x83\xe1\x7d\x24\xd3\x8a\x3c\x9b\x33\xa6\x3a\xa7\x07\xb7\xb3\x2a\x3a\x71\x7d\xc8\x79\x96\x3d\x7b\x1e\xcc\xb1\x6f\x10\x8c\xdf\xa8\x0d\x4a\xc4\x73\x04\x4a\xf1\x00\x8a\xfb\xe6\xa1\xa8\x41\x18\x62\x52\xf8\xef\x18\x2a\x14\x9e\x1e\x43\x4c\x0a\x7f\xcd\xf4\x10\x2d\x97\x1d\xe3\x99\x6d\xb3\xfa\xe3\x76\x75\x7d\xb9\x3f\x91\x46\x5b\x07\x1f\x3c\xb2\x05\xb3\x66\x84\x62\xa0\x9b\x8a\x82\xf5\xcb\xec\xdb\x59\xbf\x0d\x95\xa5\xb6\x65\xac\xe7\x3d\xf3\x37\xec\xd9\x5e\x38\x97\xfd\x9a\xec\xfa\xb1\x68\x96\xd9\x82\x0b\xed\x6a\x03\xbb\xc5\xbc\xac\xe2\x03\xaa\xe0\x29\xba\x3c\xfa\xf6\xe3\xd6\x61\x54\x2d\x91\x07\x54\xcd\x74\xaf\x9b\xb6\x25\xbe\x52\x47\x90\x89\xa5\x7f\x49\xfb\x5d\x28\xe8\x14\x8e\x37\x8f\x05\x4e\x77\xcc\x23\x96\x4f\x20\xb6\x87\x9c\xc7\x0a\xed\x93\x79\x0a\x6b\xc9\x50\xe5\xac\x8b\x32\xfa\x68\xee\x23\x52\xb8\x73\x44\x16\xaa\xdb\x08\xd2\xdf\x9b\xef\x04\x9d\xd9\x3f\xc8\xf4\x5d\x67\x73\xee\x03\xd9\x4b\x4c\x16\xa3\x31\x8c\x8a\xb8\x50\x64\x0c\x2a\xaf\x8f\xcd\xe9\x7c\x04\x53\xb8\xa4\x04\xee\x79\x18\x15\x6a\xc1\x29\x35\x46\x25\x9d\x13\xc1\x98\x26\x11\xe8\x24\x3b\x69\x08\x4a\xf1\x80\xb1\xd2\xb6\x40\x76\xf1\x69\xe8\x00\xd2\x98\x9b\x7c\x96\xe8\x05\xa1\x0f\x31\xe9\xfc\x8e\xb8\x04\xab\x9d\xd4\x87\x3e\x2e\x69\x33\x83\xd3\xea\x0b\xe5\xd1\x3b\xb9\x63\x9f\x1e\x3f\x14\x85\x34\xf4\x16\x92\xce\x9e\x87\x26\x99\x32\xfa\x27\xcc\x09\xa2\x37\x8d\xaa\xc5\x37\x3c\x63\x54\xba\x0f\x55\xd3\xeb\x48\x73\xd0\x01\x9d\xc0\x03\x12\x08\xe0\x00\x92\xce\x2e\xec\x23\x46\xa0\x53\x78\x40\x0a\x9d\x40\x01\x07\xa0\x13\xa8\x10\x18\x14\xf2\xb7\x90\x13\xb0\x7b\xf0\x52\xf6\x23\x24\x85\x5d\x1d\x17\x31\xbe\x0b\x1f\x41\x5e\xf9\x8a\xc1\xa0\x8b\x98\x4f\xaf\x71\x0b\xf8\x37\x58\xe9\x02\xb6\x90\xf4\x16\xc6\x83\xdb\x46\xb3\x0f\x20\x69\x7d\x77\xa9\x3d\x98\x26\x12\xa3\x5d\xb4\x8a\x4f\xc0\x4e\x50\xc2\x8a\x58\xbc\x83\x5a\x4c\x0a\x3f\x71\x29\x54\xb0\x3e\x22\x85\xbb\x99\x2f\xba\x7f\x6e\x8d\x53\x18\x3d\x56\x75\x2c\xe1\xd1\x36\x85\x6f\x8b\xbb\x0a\xea\x3a\x7e\x71\x7b\x80\x14\xe6\xfd\x06\x95\xd4\x75\x0f\x90\xd6\x10\xaa\x6d\x88\x5e\xe5\xae\xf5\x69\xc4\x30\x79\x33\xde\x83\xd1\x05\x08\xbe\xad\x4c\xc0\xd2\xbe\xbe\x69\xeb\x65\xef\xe6\x03\x48\x0a\xbb\xf3\x24\xe3\xee\x01\xd2\xe4\x40\x6d\xe3\xd5\xe0\xd1\x36\x85\xef\x6b\xc0\x10\x1d\x65\x6b\x9c\x5e\x5f\x77\x60\x29\x08\xdf\x1a\x9e\x30\xe9\xfc\xca\x20\x08\x3e\xd7\x8d\x40\x29\x1e\x60\x30\xf1\xcc\xad\xf1\x69\xde\x93\xe5\x6f\xc8\xc9\x2d\x06\xb8\x4d\x4e\xed\x3d\x4d\xcc\xed\x5d\x0f\xf0\xea\xdb\xc7\x1a\xd9\x91\x05\xf3\x92\x2c\x46\x7e\x27\x75\xa8\x02\xa3\xe8\x46\x60\x04\x79\x8b\x7b\x81\xa4\x13\xca\x16\x0a\xaa\x5a\xf8\x1f\x20\x23\x54\x92\x0f\x41\x1b\xc1\xa7\x8b\x8e\x79\x92\xb8\x93\x25\x27\x94\xf7\x3e\x24\xa9\xfb\x02\xb7\x95\xb4\x24\x5d\xfb\x97\x79\xe7\xee\xd3\x48\x85\xe8\xee\xba\x35\x7e\x91\xf2\xdf\x00\x00\x00\xff\xff\xa4\x4e\x1e\x07\x61\x24\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9313, mode: os.FileMode(436), modTime: time.Unix(1692046871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
