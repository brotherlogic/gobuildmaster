// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xed\x6a\xdb\x3c\x14\xfe\xfd\xe6\x2a\x44\x2e\xe0\x2d\xfd\x1b\x46\xa0\xa3\x61\x8c\x95\x0e\xd2\x6e\xec\x5f\x90\xe5\x53\x47\x8d\xac\xe3\x1d\x49\x5d\x72\xf7\xc3\x49\xe3\xf8\xab\x89\x24\xd7\x74\x85\x12\x90\xce\x23\x3f\xe7\xfb\x48\x5a\x6a\x0b\xda\x1a\xf6\x69\xc2\xd8\x33\x26\xfb\x5f\xc6\x34\xcf\x61\xc6\xa6\xa9\x34\x02\x5f\x80\x76\xd3\xfd\x6a\x86\xab\x82\xdb\xf5\x8c\x4d\x33\x69\xd7\x2e\xf9\x5f\x60\x7e\x95\x10\xda\x35\x90\xc2\x4c\x8a\xab\x16\x20\x21\xe0\x1b\x74\x76\xc6\x2c\x39\x98\x30\x36\x67\x6c\xc2\x18\x41\xea\x74\xca\xb5\xd8\xcd\xd8\x97\xbb\xef\x9f\x6f\xee\x26\xf3\xc9\x79\x26\x89\x93\x2a\x35\x40\x2f\x40\xbe\x5c\x3a\x90\x82\x93\x95\x5c\xad\x12\x44\x6b\x2c\xf1\xa2\xa2\x55\x52\xfa\xed\x24\x41\x5e\x31\x28\xff\x04\xb7\x90\x21\xed\x66\xec\xf6\xeb\xc3\xb7\xd7\xc5\x82\xb0\x00\xb2\x12\xcc\x8c\x4d\x8d\x20\x6e\xc5\xfa\x70\xfe\x7c\x72\xf8\xaf\xab\xb7\x5c\xdc\xfe\xb8\xbf\xbd\xb9\x7f\x7c\x5b\xc3\xcb\x9a\x3c\x49\x05\x02\x0b\x79\x54\xe4\xd5\x26\xed\xe5\x73\xfa\x75\x3d\xd1\xef\x07\xc6\x34\xae\x72\x6e\x2c\xd0\xab\xe8\x25\xcf\xbc\x00\x19\x89\xda\x12\x17\x1b\x7f\xe7\xf4\xa1\x3e\x86\x3f\x57\x40\xd6\x9f\x78\x4d\xbc\x1b\xcc\x1e\xde\x6e\x5a\x2d\x2c\xa2\x7b\x40\x17\xe2\xf6\x61\xb1\xfc\xb9\x58\xf6\x45\x2e\x39\xad\x8f\x87\x1c\x03\x57\xa0\xd3\x76\xc6\xae\x2f\xb2\xdf\xc0\xce\x58\x24\xf0\x25\xde\x94\x7f\x57\xce\x11\xb5\x24\x25\x2c\x12\xdc\x9a\x9d\x16\xde\x75\xad\x09\x19\xe2\xf9\x82\x70\xeb\x5d\x4f\x6b\xc2\x17\xac\xb6\xf8\xf5\xb8\x58\xde\xef\x33\xa0\x63\x37\xd8\x5a\x20\xcd\xd5\x8a\x80\xa7\xbb\x48\x9f\x1f\x28\x12\x08\x90\x01\x21\xdb\x45\x0d\xb2\x9d\x53\xaa\xb4\x03\x98\x80\x8c\xed\x80\xa2\x18\xf8\xaa\x2a\x38\xa5\xd3\xae\xdd\xaa\xe5\xd2\xe6\x91\xda\xe7\xa8\xa5\x45\x6f\xbd\x1b\xe2\xa3\xf7\xb7\xff\x2e\xd2\x57\x98\x65\x52\x67\xbe\xf4\x1b\xe2\xff\x00\x7d\xd8\x82\x70\x01\xe6\x6f\xca\xbf\xdf\x24\x54\xb6\x4c\xff\xe0\x3f\x49\x47\x4c\x26\x55\xc5\x2a\xb7\xfd\xf3\xad\x2e\x1e\x5d\xeb\x1b\xa7\xcc\x2b\x83\x79\x97\xab\x27\xe2\x39\x04\x0e\x25\x6d\xcc\x48\x85\x22\x01\xa0\x7a\x0f\x3f\x8e\xb8\x8d\xe5\xf9\x24\xd2\x5b\xc7\x5e\x9b\x70\xb1\x71\x45\x68\x87\xae\xa3\x22\x93\x8e\xb8\x4c\xaf\xa3\xfd\x46\x20\x90\x52\x81\x4a\x81\xb0\x12\xb5\xaf\x02\x7d\xb8\xf8\x90\x3f\x9c\xc6\xd3\xd4\x3f\x78\x5a\x90\x21\x6d\xee\x70\x54\x06\x36\x20\xeb\xda\x98\x51\x2e\x22\x87\x8f\xfc\xe1\xda\x9a\x69\x97\x70\xb5\x1e\x6f\xf7\xfd\x11\x4a\x1a\xeb\xab\x76\x03\x30\x52\xbe\x12\xe4\x52\xa7\x40\x6d\x9d\xeb\xab\x31\x6d\xdd\xd7\xde\x06\x29\xe3\x5a\x9a\x56\xbd\xe8\xdd\x1c\x93\x47\x41\x28\xc0\xf4\x79\xbe\xbe\x33\x3f\xd4\x84\x91\x38\xe4\xd8\x2e\x9b\xed\xf5\xb7\x2d\x70\xa6\xc7\x7b\x7f\xbe\x1c\x27\xfa\x09\xd4\x76\x46\xa5\xb0\xbf\x80\x56\x83\x51\xb3\x5e\xd5\xb6\x46\xcc\xff\x46\x6b\x6e\xc5\x41\xb5\x33\xb4\xf6\x1a\xae\xc0\x84\x15\xbf\x0a\x32\xa4\xf6\x8a\x63\x30\xfb\x4f\x7a\x1d\x48\x64\xe3\xcc\x9d\x91\x62\xd0\x53\x52\xe3\xca\x61\xb9\xd9\x78\x5b\xb0\x05\x19\xde\xbd\x12\x57\x36\xa3\x30\x07\x9e\x30\x43\xbe\x1f\x36\xf8\x7c\xf8\xc0\x13\xf4\x90\xe2\xff\x8a\x12\x7d\x25\xf2\xbc\x86\x94\x7c\xbc\x87\xb3\x4a\x38\x3e\xa6\xc1\x29\xff\x61\xa8\x12\x8e\xff\x9e\x01\xe1\x08\x82\x1e\x6b\x3a\x90\x31\x9e\x6c\x06\x24\x46\x2a\x29\xe8\xcd\xeb\x24\x1e\x19\x23\xe5\x8d\x26\xf0\x0a\xd6\x82\xc4\x7e\x98\x1b\x29\x9e\x31\xf1\x2f\x02\x27\xf9\x33\x21\xf3\x37\x00\x00\xff\xff\x68\xe5\x39\x07\x2d\x19\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6445, mode: os.FileMode(436), modTime: time.Unix(1589773506, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
