// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdb\x6a\xdb\x40\x10\x7d\xae\xbe\x62\xd1\x07\x34\xe4\x55\x14\x43\x4a\x4c\x29\x0d\x2e\x38\x69\xe9\x9b\x59\xad\x26\xf6\xd6\xab\x1d\x75\x76\x36\xb5\xfe\xbe\xd8\xb2\x55\x5d\x9c\x68\x25\xd7\x34\x10\x02\xa3\x39\xa3\x73\xe6\x92\x23\xab\x2d\x83\x65\x27\x3e\x44\x42\xfc\xc4\xf4\xf0\x57\x08\x2b\x73\x48\x44\x9c\x7a\x6d\x32\x07\xf4\x02\x14\x1f\xe2\x6b\x5c\x15\x92\x37\x89\x88\xd7\x9a\x37\x3e\x7d\xaf\x30\xbf\x49\x09\x79\x03\x64\x70\xad\xd5\x4d\x0f\x52\x48\x62\x2d\xcd\x2a\x45\x64\xc7\x24\x8b\x44\x30\x79\x38\x3c\x23\xf8\xe5\x35\x41\x5e\x33\xd8\xff\x28\xc9\xb0\x46\x2a\x13\x71\xff\xf9\xf1\xcb\x31\x58\x10\x16\x40\xac\xc1\x25\x22\x76\x8a\x24\xab\x4d\x55\x7f\x16\x55\xbf\x04\x99\xb7\x99\xb4\xaa\x4c\xc4\x72\x7e\xff\x6d\x71\x7f\xb7\x78\x8a\x66\xd1\x2b\x0a\x87\x95\x3c\x6b\x03\x0a\x0b\x7d\x12\x72\xec\x49\x37\xfc\x96\xbe\x94\x40\x6e\xd1\x73\x1d\xea\x12\xfd\xf4\xf0\xf5\xe3\xdd\x43\x24\x84\xc5\x55\x2e\x1d\x03\x1d\x53\x5f\xe5\x7d\x64\xf1\x02\xe4\x34\x5a\x26\xa9\xb6\xe1\xc3\x39\x87\xfa\x3f\xfc\xa5\x01\xe2\x70\xe2\x8d\xf4\x99\x10\xe3\xa7\xdd\xee\xda\xb8\x8d\x3e\x03\x1a\xd8\xdb\xc7\xf9\xf2\xfb\x7c\x79\x6e\x73\xc9\x5b\x7b\x2a\x72\x5a\x5c\x85\xde\x72\x22\x6e\x07\xd9\x6f\xa1\x74\x8c\x04\xa1\xc4\xdb\xf9\xff\x94\xf3\x99\x1d\x18\x62\x9f\x11\x16\x29\xee\x5c\x69\x55\xa8\x80\x0e\xe4\x92\xc9\x17\x84\xbb\x32\xf4\xbd\x8d\xe4\x81\xae\xcd\x7f\x3c\xcd\x97\x8b\xc3\x05\xf4\xfa\x06\x3b\x06\xb2\xd2\xac\x08\x64\x56\x4e\x9c\x79\x45\x91\x40\x81\x1e\xb1\xb2\x7d\xd4\x45\xbd\xf3\xc6\xec\xfb\x00\x6e\xc4\xc5\xf6\x40\x93\x18\x84\x4a\x55\x92\xb2\xb8\xdf\xb7\x3a\xbc\xef\xf9\x44\xf5\x39\x5a\xcd\x18\xac\xbb\x95\x7e\x75\x7f\x7b\x37\x48\x1f\x76\xa0\xfc\x08\xfe\xed\xfc\xbe\x01\xf4\xa6\x18\x78\xfe\x7b\xcf\x09\xdf\x9e\xbf\xd9\x13\xac\xbd\x3e\xf9\xfd\xe3\xf0\x85\x6d\xa6\x4f\xfe\x67\xd9\xaa\x32\xab\x1b\x16\x7c\xef\xcf\x24\x73\x18\xe9\xea\x5d\xcc\x95\x2e\x2d\x05\xa0\xa6\x09\x9e\xbe\x11\x5b\xe1\x59\x34\x71\x5a\x27\xb3\x4a\xa5\xda\xfa\x62\xac\xc5\x35\x51\x13\x8f\x8e\xa4\xce\x6e\x27\xcf\x8d\x40\x21\x65\x0a\x8d\x01\xc5\x1a\x6d\xa8\x80\x73\xb8\xe9\x2b\x5f\x55\x93\x59\x16\xbe\x3c\x1d\xc8\x25\x3e\x51\x95\x5a\x03\x8f\xb8\xba\x2e\xe6\x2a\x5f\xf2\xd5\x4b\x7e\x4b\xcb\x2e\xee\x13\xae\xe3\xd3\xfb\x7e\x28\x61\xb4\xe3\x50\xd9\x2d\xc0\x95\xee\x95\x20\xd7\x36\x03\xea\x6a\x6e\x46\xdf\xf2\xc5\x3f\x01\x00\x00\xff\xff\xca\x12\x53\x00\x1b\x0e\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3611, mode: os.FileMode(436), modTime: time.Unix(1577695499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
