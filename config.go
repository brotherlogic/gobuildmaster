// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x6a\xdb\x40\x0c\xc7\x3f\xcf\x4f\x21\xf2\x00\x2b\xfb\x6a\x46\xa0\x23\x66\x8c\x95\x0c\xd2\x6e\xec\x5b\x90\xcf\x9a\x73\x8b\x7d\xf2\x74\xba\x12\xbf\xfd\x68\x62\x97\xd9\x4e\x62\x7b\x61\x2c\x10\x0c\xb2\x64\xfd\xa4\xfb\x4b\xe7\xac\x53\x72\xea\xe1\x7d\x04\xf0\x93\xd3\xe3\x13\xc0\x61\x49\x31\x2c\xd2\x60\x8b\xcc\x93\x3c\x93\x2c\x8e\xf6\x9c\xb7\x15\xea\x2e\x86\x45\x6e\x75\x17\xd2\xb7\x86\xcb\xbb\x54\x58\x77\x24\x05\xe7\xd6\xdc\x0d\x42\x2a\x14\xb5\x58\x6c\x53\x66\xf5\x2a\x58\xc5\xa0\x12\xe8\xf8\x4e\xe8\x57\xb0\x42\xe5\x2b\xc1\xcb\xcf\xa0\x52\xce\x52\xc7\xb0\xfa\xf4\xf8\xb9\x31\x56\xc2\x15\x89\x5a\xf2\x31\x2c\xbc\x11\x54\xb3\x3b\x7d\x7f\x19\x9d\xfe\x42\x59\x70\x19\x3a\x53\xc7\xb0\x49\x56\x5f\xd7\xab\xfb\xf5\x53\xb4\x8c\x2e\x54\x38\x5e\xc9\x0f\x5b\x90\xe1\xca\xb6\x85\x34\x3d\xe9\x9b\xaf\xd5\x97\x0a\xe1\x9e\x83\xbe\x9a\xfa\xa0\x1f\x1f\xbe\x7c\xb8\x7f\x88\x00\x1c\x6f\x4b\xf4\x4a\xd2\xb8\x5e\xe4\x6e\x28\x9e\x49\xbc\x65\xa7\x82\x66\x3f\xfd\x70\xce\x45\xfd\x1f\xfe\x3d\xd5\x5e\x59\x68\x2a\x79\xd7\x7f\x44\x37\x8f\xc9\xe6\x5b\xb2\x39\xa7\x1c\x09\xce\xb5\x85\x9f\x13\x4e\x53\xcf\x18\x7d\x86\x8a\xb3\xf0\x7b\x01\x7f\xa9\xfb\x6e\x13\x2e\xf3\xbf\xb9\x45\xf6\x27\xbb\x41\xc9\x3a\xb2\xef\x99\x5f\x12\xcf\x1d\xb9\xb6\x79\xc2\x55\xca\x07\x5f\x3b\x33\xb9\x7d\xdd\x90\x25\xc0\xfc\x81\x6f\xc7\x57\xb0\xa4\x99\x63\xd3\x8f\xb9\x25\x7f\x25\x7c\xa8\xa7\x26\xfe\xc3\x79\x44\x32\xc9\xf7\xa7\x64\xb3\x3e\x8e\xe2\x40\x36\x74\x50\x12\x87\xc5\x56\x08\xb3\xba\x2b\x1e\xc3\xc1\x69\x0c\xef\x46\xb9\x0b\xce\x73\xeb\xf2\xa9\xe4\x1d\xf7\x7f\xbe\xe6\xaf\x08\xbe\xbd\xc9\x88\x64\xe6\x45\xd6\x89\xb8\xe5\xc8\xe9\x40\x26\x28\x4f\xce\xdc\xf5\x1f\xee\xe0\x01\x4a\xbb\xb5\x7e\x07\x00\x00\xff\xff\x5c\x88\x78\x96\xcd\x07\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1997, mode: os.FileMode(420), modTime: time.Unix(1593786536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
