// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x6d\x6b\xdb\x40\x0c\xc7\x5f\x2f\x9f\x42\xf8\x03\xac\xec\xad\x19\x81\x8e\x98\x31\x56\x32\x48\xbb\xb1\x77\x41\x3e\x6b\xc9\x2d\xe7\x93\xa7\xd3\x95\xf8\xdb\x8f\xb8\x49\xd6\xc4\xc9\xfc\xd0\x42\x03\xc1\x20\x4b\xf2\x4f\x7f\x49\xc8\x5b\xaf\xe4\x35\xc0\xc7\x09\xc0\x6f\xce\x9b\x27\x80\xc7\x92\x52\x48\xf2\x68\x5d\x11\x48\x1e\x49\x92\xc6\xbe\xe2\x65\x85\xba\x4e\x21\x59\x59\x5d\xc7\xfc\xbd\xe1\xf2\x26\x17\xd6\x35\x89\xe3\x95\x35\x37\xad\x90\x0a\x45\x2d\xba\x65\xce\xac\x41\x05\xab\x14\x54\x22\x35\xef\x84\xfe\x44\x2b\x54\x1e\x09\x76\x3f\x83\x4a\x2b\x96\x3a\x85\xd9\x97\xfb\xaf\x7b\x63\x25\x5c\x91\xa8\xa5\x90\x42\x12\x8c\xa0\x9a\xf5\x53\xfe\x69\x9f\x4c\xf7\xd9\xe2\x47\xb6\xb8\x94\x4b\x31\x6c\x9c\x0d\xfa\x2f\xd9\xee\x2f\x54\x44\x5f\xa0\x37\x75\x0a\x8b\x6c\xf6\x7d\x3e\xbb\x9d\x3f\x4c\xa6\x93\x2b\x72\x75\xcb\xf2\xcb\x3a\x32\x5c\xd9\x83\x2a\x7b\x81\xcf\xcd\xff\x13\x2b\x17\xc2\x0d\x47\x3d\x9a\xce\x41\x3f\xdf\x7d\xfb\x74\x7b\x37\x01\xf0\xbc\x2c\x31\x28\xc9\xde\xf5\x2a\xf7\x9e\xe2\x91\x24\x58\xf6\x2a\x68\x36\xfd\x3b\x7d\x29\xea\x6d\xf8\xd1\x91\x68\x7f\xf0\x67\xee\x53\x80\xe1\xdd\x3e\x55\x6d\xd8\x7a\x5c\x08\x1a\x3d\xba\x12\xbd\x3f\x24\x39\x0c\xae\xe1\xe8\x35\x85\x0f\x9d\xf4\x1b\xaa\x83\xb2\x50\x5f\xf0\x53\xff\x57\x65\xbe\x30\x03\x5d\xf4\x85\x70\x95\xf3\x36\xd4\xde\xf4\x2d\xe0\x2c\xe4\x25\x9d\xaf\x84\xb7\x75\xdf\xef\x3e\x73\xee\x50\x2d\xfb\xf9\x90\x2d\xe6\xcd\x06\xb4\x74\xa3\xad\x92\x78\x74\x4b\x21\x2c\xea\x91\x3d\x7f\x42\x14\x32\x64\x07\x8c\x6c\x3b\xea\x45\xda\x45\xe7\x76\x3a\x50\x18\xb0\xb1\xad\xa0\x51\x04\x7d\x4b\x35\x28\x45\xd2\xd6\xed\x68\x6e\x2e\xce\xb8\xea\x4b\xf6\x56\xb9\x77\xdd\x27\xee\xaf\x75\x2c\xaf\xde\xb7\x77\x9d\xf8\xb4\x25\x13\x07\xf0\x9f\xfa\xb7\x0f\x40\xab\x8b\x87\xf5\xff\x1b\x00\x00\xff\xff\x1f\x94\xbb\xa0\x97\x08\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2199, mode: os.FileMode(436), modTime: time.Unix(1574883591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
