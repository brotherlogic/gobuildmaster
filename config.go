// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6d\x6f\x9b\x40\x0c\xfe\x3c\x7e\xc5\x89\x1f\xb0\xaa\x5f\xd1\x84\xd4\xa9\xd1\x34\xad\xea\xa4\xb4\x9b\xf6\x2d\x3a\x0e\x97\xdc\x02\x67\xe6\x33\x5d\xf8\xf7\x13\x21\x61\xbc\xb5\x1c\x74\x68\x91\xa2\x48\x3e\x3f\xe6\xf1\x63\xfb\x4c\x8c\x36\x0c\x86\xad\xf8\xe0\x09\xf1\x13\xa3\xd3\xaf\x10\x46\x66\x10\x08\x3f\x2a\x74\x1a\x5b\xa0\x67\x20\xff\x64\x4f\x70\x97\x4b\xde\x07\xc2\x4f\x34\xef\x8b\xe8\xbd\xc2\xec\x2a\x22\xe4\x3d\x50\x8a\x89\x56\x57\x03\x48\x2e\x89\xb5\x4c\x77\x11\x22\x5b\x26\x99\x07\x82\xa9\x80\xd3\x19\xc1\xaf\x42\x13\x64\x0d\x83\xea\xa3\x24\x43\x82\x54\x06\xe2\xf6\xf3\xc3\x97\xb3\x31\x27\xcc\x81\x58\x83\x0d\x84\x6f\x15\x49\x56\xfb\x3a\x7e\xe8\xd5\x5f\x82\xb8\x30\xb1\x34\xaa\x0c\xc4\x76\x73\xfb\xed\xfe\xf6\xe6\xfe\xd1\x0b\xbd\x17\x32\x9c\xce\xe4\x49\xa7\xa0\x30\xd7\x97\x44\xce\x9a\xf4\xcd\xaf\xe5\x17\x11\xc8\x03\x16\xdc\x98\xfa\x44\x3f\xdd\x7d\xfd\x78\x73\xe7\x09\x61\x70\x97\x49\xcb\x40\x67\xd7\x17\x79\x9f\x59\x3c\x03\x59\x8d\x86\x49\xaa\x83\x7b\x71\xc6\x50\xff\x87\xbf\x4c\x81\xd8\x9d\x78\xcb\x3d\x14\x62\x7e\xb5\xbb\xaa\xcd\xeb\xe8\x11\xd0\x44\xdf\x3e\x6c\xb6\xdf\x37\xdb\xb1\xce\xa5\xc2\x98\x4b\x90\x4b\xe3\x2a\x2c\x0c\x07\xe2\x7a\x92\xfd\x01\x4a\xcb\x48\xe0\x4a\xbc\xeb\xff\x4f\x39\x8f\xf4\xc0\x14\xfb\x98\x30\x8f\xf0\x68\x4b\xa3\x5c\x13\xe8\x41\xde\x52\xf9\x9c\xf0\x58\xba\x3e\xb7\xe5\x3c\xa1\xda\xe6\xc7\xe3\x66\x7b\x7f\x9a\x80\x81\x6e\x70\x64\x20\x23\xd3\x1d\x81\x8c\xcb\x85\x35\xaf\x29\x12\x28\xd0\x33\x5a\x76\x88\x7a\x93\x76\x45\x9a\x56\x3a\x80\x9d\x31\xb1\x03\xd0\x22\x06\xae\xa9\x2a\x49\xb1\x3f\xd4\xad\x31\x57\x9a\x2f\xcc\x3e\x43\xa3\x19\x9d\xf3\xee\xb8\xaf\xbe\xdf\xde\x4d\xd2\x87\x23\xa8\x62\x06\xff\xae\xff\x70\x01\x0c\xaa\xe8\x38\xfe\xd5\xce\x71\xef\x9e\xbf\xde\x0b\x56\x7b\x33\xf2\xd5\xb1\x7b\xc3\xb6\xdd\x17\x5f\x96\x9d\x28\x61\x23\x98\xf3\xbc\x3f\x91\xcc\x60\xe6\x56\xef\x63\x56\x9a\xb4\x08\x80\xda\x4b\xf0\xf2\x8e\xd8\x31\x87\xde\xc2\x6a\x5d\x96\x55\x24\xd5\xa1\xc8\xe7\xae\xb8\x36\x6a\xe1\xd0\x91\xd4\xf1\xf5\xe2\xba\x11\x28\xa4\x58\x61\x9a\x82\x62\x8d\xc6\x35\x81\x31\xdc\xf2\x96\xaf\xa3\xc9\x38\x76\x6f\x9e\x1e\xe4\x2d\x7b\xa2\x0e\x95\x00\xcf\x98\xba\x3e\x66\x95\x37\xf9\xfa\x21\xbf\xa5\x61\xeb\x0f\x09\x37\xf6\xe5\xba\x9f\x42\xa4\xda\xb2\x6b\xda\x1d\xc0\x4a\xf3\x4a\x90\x69\x13\x03\xf5\x73\x6e\x5b\x97\xec\x45\x57\xbd\x2d\x52\x22\x8d\xb6\xbd\xfb\x62\xf4\x70\x4d\x1e\x39\xa1\x02\x3b\x56\xf9\xf6\x49\x58\xdf\x09\x2b\x71\xc8\xb0\x7f\x6d\xf6\xed\x2f\x2b\xf0\xca\x8e\x77\x1e\xef\xea\xef\x93\x36\xc9\x08\x83\xf6\xd1\x2b\x03\xf0\x27\x00\x00\xff\xff\x04\x50\x20\x26\x28\x10\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4136, mode: os.FileMode(436), modTime: time.Unix(1578026816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
