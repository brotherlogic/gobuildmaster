// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xd1\x4a\xf3\x40\x10\x85\xef\xf3\x14\x43\x1e\xe0\x2f\xff\x6d\x90\x42\xa5\x45\xc4\x52\xa1\x55\x6f\xcb\x66\x33\x26\x6b\x92\x9d\x75\x76\xb6\x98\xb7\x97\xd6\xb4\xda\x9a\xb6\xa9\x08\x06\x42\x60\x32\xe7\xf0\xed\x99\x59\x6b\xac\xa0\x15\x0f\x57\x11\xc0\x0b\xa5\x9b\x2f\x80\x55\x35\x26\x10\xa7\xc1\x54\x99\x47\x5e\x21\xc7\x9b\x7a\x4e\x4b\xa7\xa4\x48\x20\xce\x8d\x14\x21\xfd\xa7\xa9\x1e\xa4\x4c\x52\x20\x57\x94\x1b\x3d\xf8\x26\x71\x8a\xc5\xa8\x6a\x99\x12\x89\x17\x56\x2e\x01\xe1\x80\x9b\x7f\x8c\xaf\xc1\x30\xd6\x3b\x82\xf5\xa3\x95\x60\x4e\xdc\x24\x30\xbe\x5d\xdc\xb5\x45\xc7\xe4\x90\xc5\xa0\x4f\x20\xf6\x9a\x95\xe8\xe2\xc3\x7f\xd8\xc7\x69\x31\x99\x3f\x4d\xe6\x5d\x5e\xa2\x7c\x59\x19\x2f\x9f\x66\xeb\x97\x31\x0b\x36\x53\x56\x37\x09\xcc\x27\xe3\xc7\xd9\x78\x34\x7b\x88\x86\xd1\x91\xb8\xce\xc7\xf2\x6c\x2a\xd4\xe4\xcc\x36\x95\x36\xe0\xc3\xf2\xa9\xb0\x52\x46\x55\x52\x90\x5d\xe9\x10\xf4\x66\x7a\x7f\x3d\x9a\x46\x00\x96\x96\xb5\xf2\x82\xdc\xb6\x1e\xe5\x6e\x29\x56\xc8\xde\x90\x15\x56\xba\xec\x3f\xe9\x2e\xd5\xdf\xf0\xab\x0a\x59\xfa\x83\x7f\x69\x1f\x02\x5c\x3e\xed\xfd\xd4\x2e\xbb\x1e\x1d\xa2\x1f\xaf\x2e\x07\x6b\xb7\x26\xdb\xc5\xd5\x14\xac\x24\xf0\xff\x2c\x7d\x89\x8d\x17\x62\xec\x0b\xbe\xdf\xff\xab\xcc\x1d\x3b\x70\x8e\x3e\x63\x72\x29\xbd\xf9\xc6\xea\xbe\x07\x38\x90\x9c\x9c\xfc\x7b\x00\x00\x00\xff\xff\x4e\x94\x85\x3e\x16\x05\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1302, mode: os.FileMode(436), modTime: time.Unix(1574733172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
