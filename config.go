// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x8a\xdb\x3c\x10\xbd\xfe\xf2\x14\x22\x0f\xf0\x2d\xbd\x35\x25\xb0\x65\x43\x29\x5d\xb6\x90\xdd\x96\xde\x05\x59\x9e\x3a\xda\xd8\x1a\x77\x34\xda\x26\x6f\x5f\x9c\xc4\x69\x2c\xe7\x47\x8a\x52\x1a\x08\x01\x79\x8e\xcf\x99\xd1\x99\x91\x88\xd1\x86\xc1\xb0\x15\xef\x47\x42\xbc\x62\xbe\xf9\x15\xc2\xc8\x1a\x32\x31\xce\x9d\xae\x0a\x0b\xf4\x06\x34\xde\xac\x97\x38\x6f\x24\x2f\x32\x31\x2e\x35\x2f\x5c\xfe\xbf\xc2\xfa\x2e\x27\xe4\x05\x50\x85\xa5\x56\x77\x03\x48\x23\x89\xb5\xac\xe6\x39\x22\x5b\x26\xd9\x64\x82\xc9\xc1\xe6\x19\xc1\x4f\xa7\x09\xea\xbd\x82\xf6\xa3\x24\x43\x89\xb4\xce\xc4\xc3\xa7\xe7\xcf\xbb\xc5\x86\xb0\x01\x62\x0d\x36\x13\x63\xab\x48\xb2\x5a\x6c\xdf\x3f\x19\x6d\xbf\x04\x85\x33\x85\x34\x6a\x9d\x89\xd9\xf4\xe1\xeb\xd3\xc3\xfd\xd3\xcb\x68\x32\x3a\x91\xe1\xe5\x4c\x7e\xe8\x0a\x14\x36\xba\x4b\x64\x57\x13\x7f\xf9\x5c\x7e\x39\x81\x5c\xa2\xe3\xfd\x92\x2f\xf4\xe3\xe3\x97\x0f\xf7\x8f\x23\x21\x0c\xce\x6b\x69\x19\x68\x17\x7a\x52\xf7\x4e\xc5\x1b\x90\xd5\x68\x98\xa4\x5a\x86\x6f\xce\x31\xd4\xbf\xd1\xbf\x84\xb5\x65\x24\x08\x55\xde\x8f\xbf\xe0\x9b\xe7\xe9\xec\xdb\x74\x76\xcc\x39\xe4\x8c\xe9\x12\x3f\x66\x9c\x5d\x3e\x97\xd4\x17\x92\x65\x94\x7c\x0f\x70\xa5\xef\xbd\xb7\x9c\x4e\xe0\xbf\x14\xdf\x6f\xd7\x95\xa4\xa2\xe7\x7b\x6f\xb9\x25\x8e\xed\xb9\xae\x7a\x84\x4d\x8e\x2b\xbb\x36\x2a\xb8\x7e\x7d\xc8\x44\x88\xf8\x8e\xef\xfa\x97\x64\x0d\x91\x7d\xe3\x63\x52\xf8\x1b\xc2\xd5\x3a\x94\xf8\x20\x78\xd0\x8b\x17\x6d\x34\xfd\xfe\x32\x9d\x3d\x6d\xda\x73\x60\x25\x58\x31\x90\x91\xd5\x9c\x40\x16\xeb\xbe\x9f\x14\x3a\xc3\x99\x78\x77\x31\x95\x0a\xcb\x52\x9b\x32\x34\x99\x5e\xf8\x5f\x1f\xfd\x67\x7a\xa0\x3b\xdd\x00\x28\xf2\x70\xeb\x21\x52\x5c\x00\x2b\x50\x8e\x31\x98\xb9\x1f\x3f\x9c\xcb\x03\x29\x81\x93\xac\x21\x7c\xd3\xed\x99\x10\x5e\x84\x01\xe4\x88\x33\xad\x2b\xf0\x16\xe2\xda\xc7\x11\xc2\x0e\xc2\x13\xae\x1d\xa7\x8f\x8f\x1e\xc3\x64\x9f\x5a\x70\xc3\xb4\xfe\x89\x1c\x3d\x1e\xe4\xea\x5a\x12\x28\xa4\x42\x61\x55\x81\x62\x8d\x26\x94\xff\x18\x2e\xc5\xf8\x5b\x1e\x02\x05\x3a\xa2\xf1\x86\xa8\xa4\x11\xec\xaa\xaa\xf5\x00\xd8\x18\x77\xf9\xa0\x14\x05\x04\xb5\x36\x05\x90\x0d\xdf\x86\x03\x40\x1a\x73\xbb\x9f\x25\x70\x44\xea\x3e\x26\x9d\xdf\x22\x95\xd2\x68\x1b\xab\xa1\x8f\x4b\xd1\x91\x4b\xab\xd5\x2b\xe6\xc1\x7d\x78\x10\x9f\x9e\xbf\x2c\x8a\xd8\xd4\xf7\x90\x74\xf6\xdc\xb5\x9b\x19\x47\xff\x07\x73\x83\xec\xab\x76\xa2\x86\x5f\x1c\x86\xa8\x74\x0d\x75\x7b\x8d\x88\xdd\x83\x03\xd0\x0d\x14\x60\xc4\x00\xf4\x20\xe9\xec\x91\x67\xeb\x00\x74\x0b\x05\xa8\xc0\x46\x4c\x40\x0f\x74\x83\x29\x24\x2b\x88\xe4\xdf\x43\x6e\xc0\xce\x92\x63\xd9\x3b\x48\x0a\xbb\xea\x8a\x18\x7e\xfb\x1c\x40\xae\xbc\xbd\xd7\xce\x6a\x95\xf4\xb7\x4d\xaf\x82\xbf\xa4\x89\xad\xe0\x1e\x72\xbe\x82\x41\x97\x18\x96\x76\x19\x4c\xef\x41\xce\xd3\xff\x0e\x00\x00\xff\xff\xb3\xb0\xe5\x15\x96\x13\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5014, mode: os.FileMode(436), modTime: time.Unix(1597960901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
