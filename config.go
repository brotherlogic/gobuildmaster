// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xd1\x6a\xdb\x4a\x10\x7d\xbe\xfa\x8a\xc5\x1f\x70\x43\x5e\x45\x31\xa4\x58\x94\xd2\xe0\x82\x93\x96\xbe\x99\xd5\x6a\x62\x6f\xbd\xda\x51\x67\x67\x83\xf5\xf7\x45\xb6\xa5\x4a\x96\x12\xad\x94\x86\x1a\x8c\x61\x76\x66\x7d\xce\x99\x33\x1a\x59\x6d\x19\x2c\x3b\xf1\x21\x12\xe2\x27\xa6\xa7\x5f\x21\xac\xcc\x21\x16\x8b\xd4\x6b\x93\x39\xa0\x67\xa0\xc5\x29\xbe\xc3\x6d\x21\x79\x1f\x8b\xc5\x4e\xf3\xde\xa7\xff\x2b\xcc\x6f\x52\x42\xde\x03\x19\xdc\x69\x75\xd3\x2b\x29\x24\xb1\x96\x66\x9b\x22\xb2\x63\x92\x45\x2c\x98\x3c\x9c\xce\x08\x7e\x79\x4d\x90\x37\x08\xaa\x8f\x92\x0c\x3b\xa4\x32\x16\xab\xcf\x0f\x5f\x2e\xc1\x82\xb0\x00\x62\x0d\x2e\x16\x0b\xa7\x48\xb2\xda\x9f\xef\x5f\x46\xe7\x2f\x41\xe6\x6d\x26\xad\x2a\x63\xb1\x49\x56\xdf\xd6\xab\xbb\xf5\x63\xb4\x8c\x5e\x60\x38\xce\xe4\x49\x1b\x50\x58\xe8\x9a\xc8\x45\x93\xeb\xf0\x6b\xfc\x52\x02\x79\x40\xcf\x4d\xe8\x1a\xe8\xa7\xfb\xaf\x1f\xef\xee\x23\x21\x2c\x6e\x73\xe9\x18\xe8\x92\xfa\x22\xee\x0b\x8a\x67\x20\xa7\xd1\x32\x49\x75\x08\x6f\xce\x50\xd5\xbf\xc1\x2f\x0d\x10\x87\x03\x6f\xa5\x2f\x85\x98\xde\xed\xae\x6a\xd3\x1c\x3d\x50\x34\xe2\xdb\x87\x64\xf3\x3d\xd9\x0c\x39\x97\xbc\xb5\xf5\x25\xb5\x71\x15\x7a\xcb\xb1\xb8\x1d\x45\x7f\x80\xd2\x31\x12\x84\x02\xef\xe6\xff\x55\xcc\x03\x1e\x18\x43\x9f\x11\x16\x29\x1e\x5d\x69\x55\x28\x81\xab\x92\xb7\x74\xbe\x20\x3c\x96\xa1\xff\xdb\x4a\x1e\x51\x2d\xf9\xf1\x98\x6c\xd6\xa7\x09\xe8\xe9\x06\x47\x06\xb2\xd2\x6c\x09\x64\x56\xce\xec\xf9\x19\x22\x81\x02\x3d\xc1\xb2\xfd\xaa\x37\x69\xe7\x8d\xa9\x74\x00\x37\x61\x62\x7b\x45\xb3\x10\x84\x52\x55\x92\xb2\x45\x5f\xb7\x26\x5c\x69\x3e\x93\x7d\x8e\x56\x33\x06\xf3\xee\xa4\xbf\xfb\x7e\xfb\x6f\x14\x3e\x1c\x41\xf9\x09\xf8\xbb\xf9\xfd\x05\xd0\xeb\x62\xe0\xf8\x57\x3b\x27\xdc\x3d\x7f\xb2\x67\xac\xf6\x66\xe4\xab\xe3\x70\xc3\xb6\xd3\x67\x3f\x2c\x3b\xb7\x2c\x1b\xc1\x82\xe7\xfd\x89\x64\x0e\x13\xb7\xfa\x75\xcd\x3b\x4d\x5a\x0a\x40\xed\x25\x58\xbf\x23\x76\xc2\xcb\x68\x66\xb7\xea\x65\x95\x4a\x75\xf0\xc5\xd4\x15\xd7\xae\x9a\x39\x74\x24\x75\x76\x3b\xbb\x6f\x04\x0a\x29\x53\x68\x0c\x28\xd6\x68\x43\x09\x0c\xd5\xbd\x62\xf9\xdf\x01\x00\x00\xff\xff\x7c\x12\x08\x74\xaf\x0b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2991, mode: os.FileMode(436), modTime: time.Unix(1576785174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
