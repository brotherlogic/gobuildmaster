package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x6d\x6f\xe3\x36\x0c\xc7\x5f\x37\x9f\x42\xc8\x07\x58\xb1\xbd\x0c\x86\x00\xdd\x1a\x0c\xc5\x8a\xac\x48\xb3\xc3\xbd\x0b\x64\x99\x75\xd4\xc8\xa2\x8f\xa2\x73\xc9\x7d\xfa\x83\xf3\xe0\xc6\x76\xd2\x48\x95\xef\x01\x38\x14\x50\xf4\xf3\x9f\xa4\x48\x4a\xa0\xd5\x96\xc1\xb2\x13\x7f\x0e\x84\x78\xc5\x64\xf7\x57\x08\x2b\x73\x18\x89\x61\x52\x6a\x93\x3a\xa0\x35\xd0\x70\xb7\x9e\xe1\xa2\x90\xbc\x1c\x89\x61\xa6\x79\x59\x26\xbf\x29\xcc\x6f\x13\x42\x5e\x02\x19\xcc\xb4\xba\xed\x20\x85\x24\xd6\xd2\x2c\x12\x44\x76\x4c\xb2\x18\x09\xa6\x12\x76\xbf\x11\x7c\x29\x35\x41\x5e\x5b\x50\xfd\x53\x92\x21\x43\xda\x8e\xc4\xfd\xc3\xf3\xbf\x87\xc5\x82\xb0\x00\x62\x0d\x6e\x24\x86\x4e\x91\x64\xb5\xdc\x7f\x7f\x3c\xd8\xff\x27\x48\x4b\x9b\x4a\xab\xb6\x23\x31\x9b\xdc\xff\x3f\xbd\xbf\x9b\xce\x07\xe3\xc1\x05\x0f\xaf\x7b\xf2\xa2\x0d\x28\x2c\xf4\xd1\x91\x43\x4c\xda\xcb\xef\xf9\x97\x10\xc8\x15\x96\x5c\x2f\xb5\x0d\xfd\xe7\xf1\xbf\xbf\xee\x1e\x07\x42\x58\x5c\xe4\xd2\x31\xd0\x61\xeb\x45\xbb\x0f\x56\xac\x81\x9c\x46\xcb\x24\xd5\xca\xff\x70\xce\x51\xbf\xc6\xfe\x15\x6c\x1d\x23\x81\xaf\xe5\xcd\xfd\x1d\xbb\xae\xa6\xd2\xf3\x64\xf6\x69\x32\x3b\x97\x4c\x2f\x24\x73\xe0\x25\x01\x5c\xce\xa7\x83\x9b\xd7\x9c\x4a\x25\xcb\x20\xaf\x5a\xc0\x07\xcb\xa1\xf5\x95\xcb\x0e\xdc\xc4\x94\xc3\x7e\x5d\x49\x4a\x1b\xe5\xd0\x5a\xae\x84\x43\x4b\xf1\x18\x3d\xc2\x22\xc1\x8d\xdb\x5a\xe5\x1d\xbf\x26\x32\x16\x22\xbc\x11\x1c\xcb\x7a\x97\x06\x61\xe5\xd4\x66\x62\xf4\x0b\xc2\xcd\xd6\x57\xf8\x64\x73\x78\x29\x4c\x3e\xcf\x27\xb3\xe9\xae\x6a\x3b\xa9\x04\x1b\x06\xb2\xd2\x2c\x08\x64\xba\x6d\xe6\x93\xc2\xd2\xf2\x48\xfc\x7e\xd5\x15\x83\x59\xa6\x6d\xe6\xeb\x4c\x63\xfb\x8f\xba\x11\xae\x16\xc0\xf1\xc6\x03\xa0\xc0\x0b\xaf\x41\xc4\xa4\x00\x6c\x40\x95\x8c\xde\xca\xcd\xfd\xdd\x5e\xdd\x31\xc5\xb3\x8d\x15\x84\x6b\x5d\xdd\x13\xfe\x41\xe8\x20\x67\xd2\xd2\x95\x29\xf6\x61\x5c\xf5\x73\x80\x61\x27\xdb\xc3\x6b\x65\x36\xf9\x7b\xf2\xf0\x34\x5f\x3c\xcd\x1e\xa6\xf3\xc3\xfd\x31\xae\xcd\xf7\xae\x88\x2a\x47\x02\x7b\x4b\x07\xb9\x6a\xfc\x4d\xc0\xa5\xf7\x0d\x08\xff\x18\x9e\x73\x47\xf8\xf8\x43\xa0\x90\x52\x85\xc6\x80\x62\x8d\xd6\xd7\xa9\x73\x5c\x4c\xc5\xec\x75\x08\x14\xe8\x80\x8a\xed\x52\x51\x8d\xbb\x34\xa6\x3a\x08\x70\x21\x69\xd9\x86\x62\x2c\x20\xc8\xb5\x4d\x81\x9c\xff\x31\x9c\x00\x71\xca\xd5\x79\x66\xc0\x01\xae\xb7\x99\x78\x7d\x87\x94\x49\xab\x5d\xa8\x0d\x4d\x2e\xc6\x8e\x44\x3a\xad\x5e\x31\xf1\x2e\xee\x93\xfd\xf1\xfe\xcb\x34\x0d\x75\xbd\x46\xe2\xd5\x93\xb2\x3a\xcc\x30\xf9\x37\xa6\x07\xef\x4d\xd5\xd5\xfc\x9f\x1b\x5d\x2a\xde\x86\xbc\x7a\x7c\x84\x9e\xc1\x09\xd4\x83\x05\x18\xd0\x00\x5b\x48\xbc\x7a\xe0\xa5\xdc\x81\xfa\xb0\x00\x15\xb8\x80\x0e\xd8\x82\x7a\xe8\x42\xd2\x40\xa0\x7e\x8d\xf4\xa0\xce\x92\x43\xd5\x8f\x48\x8c\xba\x3a\x06\xd1\xff\xd9\xda\x41\x3e\xf8\xe6\x27\xa9\xd3\xa8\x11\x50\x23\x80\x5f\xa5\x0d\x0d\x60\x8d\x44\x3d\xfa\x59\xad\xb4\x31\xfe\xc5\xd3\x02\xfa\x7b\xf6\xef\x05\x59\xba\x95\x77\x1c\x5a\x48\x4c\x1c\x52\x9d\x69\x96\xa6\x8a\xa9\xd1\xce\xfb\x3e\x39\x83\xf5\x50\x4c\x0a\x29\xb8\x96\x6b\x26\x46\x1f\x29\x0b\xec\xa5\x4d\x22\x46\xbb\xfa\x9e\xf7\x4b\xbe\xde\x1c\xa3\xc8\x90\x17\xbe\x82\xc7\xbd\x31\x7a\x2b\xd8\xe6\xb2\x28\xfc\x83\xdb\x00\x62\x94\x77\xad\x22\x24\xaf\x1b\x40\xdc\xd3\x54\xad\x4a\xef\x28\xbf\xed\x8e\xaf\xa2\xb5\x34\x3a\x95\x01\xf3\x8c\x33\x58\xdc\x44\x4d\x5b\x4e\x48\xa7\x99\xf7\x3c\xb6\x85\xc4\xa8\x3b\xc6\x30\xed\x06\x10\xd5\x49\xa5\x5b\x26\x58\xcf\x69\x7d\xa6\xd0\x0d\xa0\xcf\xe1\x7a\x01\xe4\xd0\x4a\xd3\x1e\x35\x7c\xe0\x7a\x72\xa0\x4a\x82\xa0\x31\x69\x07\xf9\x49\xc3\xd2\xf7\x0e\xef\x7b\x00\x00\x00\xff\xff\x12\x04\xa2\xac\x71\x1b\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
