// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x8a\xdb\x3c\x10\xbd\xfe\xf2\x14\x22\x0f\xf0\x2d\xbd\x0d\x25\xb0\x65\x43\x29\x5d\xb6\x90\xdd\x96\xde\x85\xb1\x3c\x75\xb4\x51\x34\xee\x68\xbc\x4d\xde\xbe\x38\x3f\x6e\x6c\x27\x1b\x69\xe5\xd2\x40\x08\xc8\x3a\x3e\x67\x46\x73\x66\x44\x9c\x71\x82\x4e\xbc\x7a\x3f\x52\xea\x99\xb2\xdd\xaf\x52\x0e\xd6\x38\x51\xe3\xac\x32\x36\xf7\xc8\x2f\xc8\xe3\xdd\x7a\x41\x8b\x12\x64\x39\x51\xe3\xc2\xc8\xb2\xca\xfe\xd7\xb4\xbe\xc9\x98\x64\x89\x6c\xa9\x30\xfa\xa6\x07\x29\x81\xc5\x80\x5d\x64\x44\xe2\x85\xa1\x9c\x28\xe1\x0a\x77\xcf\x18\x7f\x56\x86\x71\xdd\x28\xa8\x3f\x1a\x04\x0b\xe2\xed\x44\xdd\x7d\x7a\xfc\x7c\x58\x2c\x99\x4a\x64\x31\xe8\x27\x6a\xec\x35\x83\xe8\xe5\xfe\xfd\xd3\xd1\xfe\xcb\x98\x57\x2e\x07\xa7\xb7\x13\x35\x9f\xdd\x7d\x7d\xb8\xbb\x7d\x78\x1a\x4d\x47\x17\x22\xbc\x1e\xc9\x0f\x63\x51\x53\x69\x8e\x81\x1c\x72\xd2\x5d\x7e\x2d\xbe\x8c\x11\x56\x54\x49\xb3\xd4\x15\xfa\xf1\xfe\xcb\x87\xdb\xfb\x91\x52\x8e\x16\x6b\xf0\x82\x7c\xd8\x7a\x51\xf7\x41\xc5\x0b\xb2\x37\xe4\x84\x41\xaf\xc2\x0f\xe7\x1c\xea\xdf\xe8\x5f\xe1\xd6\x0b\x31\x86\x2a\x6f\xef\xef\xe9\xba\x5a\x4a\x8f\xb3\xf9\xb7\xd9\xfc\x6c\x31\x09\x88\x21\x47\x0e\x2f\xd7\xd3\x21\xcc\x6b\x41\xe5\x20\x10\x15\x55\x07\xf0\x46\x3b\x74\xde\x72\x39\x80\xff\x52\xec\xb0\x5f\xd7\xc0\x79\xcb\x0e\x9d\xe5\x9a\x38\xd6\x8a\xc7\xec\x31\x95\x19\x6d\xfc\xd6\xe9\xe0\xfc\xb5\x21\x53\xa5\xe2\x1b\xc1\xd1\xd6\x0c\x6b\x8c\xb4\x53\x17\x93\xc2\x5f\x32\x6d\xb6\xa1\xc4\x27\x9b\xe3\xad\x30\xfb\xfe\x34\x9b\x3f\xec\x5c\xdb\x2b\x25\xdc\x08\xb2\x03\xbb\x60\x84\x7c\xdb\xae\x27\x4d\x95\x93\x89\x7a\x77\x35\x14\x4b\x45\x61\x5c\x11\x1a\x4c\x6b\xfb\x5f\x9f\x08\xaf\x78\xe0\x38\xf4\x10\x39\x72\xe6\xb5\x10\x29\x55\x80\x1b\xd4\x95\x50\x30\x73\x7b\x7f\xbf\x5d\xf7\xa4\x04\x76\xb2\x92\xe9\xc5\xd4\xa3\x22\x3c\x09\x3d\xc8\x99\xca\xf4\x55\x4e\x43\x88\xab\x1f\x47\x08\x3b\xd9\x7e\x46\x54\xc2\x05\xe5\xf2\x54\x69\x91\x4e\x9b\x68\x83\x3d\x54\x97\x54\x64\x37\xea\x40\xde\x9c\x5e\x46\x4d\x9c\x6b\xb2\x16\x75\x3d\x19\x43\xf9\xcf\xe1\x52\xbc\xb0\xe7\x61\xd4\x68\x22\xbc\xd8\x47\x25\x75\xe5\xca\xda\xba\x06\xd0\xc7\x14\x5c\x17\x94\xa2\x80\x71\x6d\x5c\x8e\xec\xc3\x8f\xe1\x04\x90\xc6\x5c\x9f\x67\x81\x12\x11\x7a\x17\x93\xce\xef\x89\x0b\x70\xc6\xc7\x6a\x68\xe3\x52\x74\x64\xe0\x8d\x7e\xa6\x2c\xd8\x87\x27\xfb\xd3\xe3\x87\x3c\x8f\x0d\xbd\x81\xa4\xb3\x67\x55\x7d\x98\x71\xf4\x7f\x30\x03\x44\x6f\xeb\x8e\x1a\x7e\x97\xe8\xa3\xd2\x35\xac\xeb\x9b\x45\xec\x19\x9c\x80\x06\x50\x40\x11\x0d\xb0\x03\x49\x67\x8f\x1c\xb7\x3d\xd0\x10\x0a\x48\xa3\x8f\xe8\x80\x1d\xd0\x00\x5d\x08\x2c\x46\xf2\x37\x90\x01\xd8\x05\x24\x96\xfd\x08\x49\x61\xd7\xc7\x24\x86\x5f\x48\x7b\x90\x37\x5e\xe8\x19\x4c\x9e\xf4\xff\x4e\x2b\x81\xbf\xc0\xc5\x26\xb0\x81\x24\x5d\xe7\x45\xaf\x8c\xb5\xe1\xe6\xe9\x00\x86\xbb\xd0\xef\x09\x05\xfc\x2a\x38\x0f\x1d\x48\x4a\x1e\x72\x53\x18\x01\x5b\xe7\xd4\x1a\x1f\x3c\x4f\xce\xc0\x06\x30\x93\x26\x8e\xf6\x72\x83\x79\x9d\xff\x77\x00\x00\x00\xff\xff\xcc\x8e\xfc\xf1\x4e\x15\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5454, mode: os.FileMode(436), modTime: time.Unix(1600287387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
