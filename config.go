package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\x5e\x7f\x05\xe1\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xc4\x35\xc5\xd1\x0e\xa9\x34\xee\xd7\x17\xf2\x45\xd1\xc5\x59\x73\x42\xb5\x5d\x60\x11\x80\x9e\xa3\x33\x67\x48\x1e\x8e\x28\x67\x5c\x40\x17\xbc\xfa\x71\xa1\xd4\x17\xca\x0e\x7f\x95\x72\x50\xe1\x4a\x2d\xb3\xc6\xd8\xdc\x23\x3f\x21\x2f\x0f\xe3\x05\x6d\x6b\x08\xe5\x4a\x2d\x0b\x13\xca\x26\xfb\x4e\x53\xf5\x3e\x63\x0a\x25\xb2\xa5\xc2\xe8\xf7\x13\x48\x0d\x1c\x0c\xd8\x6d\x46\x14\x7c\x60\xa8\x57\x2a\x70\x83\x87\xdf\x18\xbf\x36\x86\xb1\xea\x32\x68\xff\x69\x08\x58\x10\xef\x57\xea\xf6\xee\xf3\xaf\xa7\xc1\x9a\xa9\x46\x0e\x06\xfd\x4a\x2d\xbd\x66\x08\xba\x3c\x3e\xff\x66\x71\xfc\xcf\x98\x37\x2e\x07\xa7\xf7\x2b\xb5\x59\xdf\xfe\x7e\x7f\xfb\xe1\xfe\x61\x71\xb3\x78\x45\xe1\x75\x25\x8f\xc6\xa2\xa6\xda\x9c\x85\x9c\x6a\x32\x1e\xfe\x96\xbe\x8c\x11\x76\xd4\x84\x6e\x68\x9c\xe8\x2f\x1f\x7f\xfb\xe9\xc3\xc7\x85\x52\x8e\xb6\x15\xf8\x80\x7c\x0a\x7d\x35\xef\x53\x16\x4f\xc8\xde\x90\x0b\x0c\x7a\x17\x3f\x39\x97\x50\xff\x4f\xfe\x3b\xdc\xfb\x40\x8c\xb1\x99\x0f\xe3\x27\x79\x5d\x5d\x4a\x9f\xd7\x9b\x3f\xd6\x9b\x4b\x8b\xe9\x91\xa1\xc2\x50\x32\xe2\xeb\xeb\xe9\x24\xf3\x9a\xa8\x47\x4b\x75\xbd\x8f\x95\xd4\x8f\x9e\x55\x50\xef\xb9\x09\x62\x72\x08\x20\x9a\xa2\x11\xe0\x8d\x7b\x7b\xf4\x94\xd7\x05\xbc\xbb\xae\x40\x96\x7e\x2f\xfa\x5f\xf0\xac\x39\x74\x5d\x17\x71\x1c\xd7\xc0\xf9\xc0\xb3\x46\xc3\x2d\xb1\xd4\x2f\xcf\x35\x65\xaa\x33\x7a\xf6\x7b\xa7\xa3\x0b\x3b\x84\xdc\x28\x25\x77\xeb\x13\x7b\x89\x60\x43\xa9\x4b\x94\x98\xde\x04\x94\x92\xc1\xd1\x2d\x64\xae\x3b\xc6\xa4\xf0\xd7\x4c\xcf\xd1\x0e\xd3\x0b\x96\x1b\xcc\xfa\xcf\x87\xf5\xe6\xfe\x60\xee\x93\xc5\x8c\xcf\x01\xd9\x81\xdd\x32\x42\x3e\xb2\x1a\x4d\x8d\x0b\x2b\xf5\xfd\x55\x29\x96\x8a\xc2\xb8\x22\x56\xcc\x20\x5c\x2e\xe7\xcd\xbd\x44\xac\xdb\x64\x88\x2c\x6c\x95\x06\x88\x94\x55\x81\xcf\xa8\x9b\x40\xd1\xcc\xc3\xf8\xe9\x29\x3f\x49\x25\xf2\xcc\xa8\x99\x9e\x4c\xdb\x61\xc4\x17\x61\x02\xb9\x30\xb5\xbe\xc9\x69\x8e\xe4\xda\x9f\x05\x89\xf5\xc2\xe5\xeb\x6d\xb3\xfe\x79\x7d\xf7\xe9\x61\xfb\x69\x73\x77\xff\x70\x3a\xa8\x6f\x12\xa7\xb9\x5d\x30\x42\xef\x99\x40\xae\x2a\x79\x27\x68\x35\xfe\x46\xa6\x1f\x96\x23\x6d\x07\x03\x50\x31\x0e\xc0\xa8\x89\x73\x4d\xd6\xa2\x0e\x86\x5c\xac\xa8\x4b\xb8\x94\xba\x1e\x79\x18\x35\x1a\xc1\xf6\x9d\xa2\x92\x8c\xbd\xb1\xb6\x9d\x08\xf4\x92\x35\x3a\x06\xa5\x64\xc0\x58\x19\x97\x23\xfb\xf8\x69\xe8\x01\xd2\x98\xdb\xf9\x2c\x30\x08\xa4\x8f\x31\xe9\xfc\x9e\xb8\x00\x67\xbc\x34\x87\x21\x2e\x69\x7f\x83\x37\xfa\x0b\x65\xd1\x9b\xbb\x17\x9f\xae\x1f\xf2\x5c\x2a\xbd\x83\xa4\xb3\x67\x4d\x3b\x99\x32\xfa\x17\xcc\x0c\xea\x6d\xeb\x6a\xf1\xed\xc8\x14\x95\x9e\x43\xd5\x76\x22\xd2\x39\xe8\x81\x66\xc8\x80\x04\x06\x38\x82\xa4\xb3\x0b\x4f\xe8\x09\x68\x8e\x0c\x48\xa3\x17\x38\xe0\x08\x34\x83\x0b\x81\x45\x21\x7f\x07\x99\x81\x3d\x40\x90\xb2\x9f\x21\x29\xec\xfa\x5c\xc4\xf8\x1e\x76\x02\x79\xe3\x0b\x00\x83\xc9\x93\x6e\x12\x07\x05\xfc\x0b\x9c\xb4\x80\x1d\x24\xe9\x0d\x20\xe8\x9d\xb1\x36\x7e\xf3\x8c\x00\xf3\xbd\x03\x1c\x09\x03\xf8\x5d\x74\x1d\x46\x90\x94\x3a\xe4\xa6\x30\x01\x6c\x5b\x53\x6b\x7c\xf4\x79\x72\x01\x36\xc3\x66\xd2\xc4\xe2\xbd\xdc\x61\x52\xf8\x89\x0b\xa1\x97\x0e\x11\x29\xdc\xed\xf3\xa2\x3b\xf9\x2e\x38\x85\x31\x60\x55\xc7\x12\x9e\x63\x53\xf8\x76\xb8\xaf\xa0\xae\xe3\x8b\x3b\x00\xa4\x30\x1f\xac\x42\xb2\xae\x07\x80\xb4\xd6\x54\xef\x9a\xe8\x2a\xbf\x44\xa7\xef\xa2\x27\xb0\x26\x07\xc1\xe5\xc6\x05\x58\xda\x8d\x9b\x71\x21\x63\x93\x17\xd1\x57\xc9\x23\x48\x0a\xbb\x0f\x24\xe3\x1e\x00\xd2\xf6\xb1\xde\xc5\x6f\xe3\x63\x6c\x0a\xdf\xd7\x06\x9b\x68\x95\x5d\x70\xfa\xfa\x7a\x04\x47\x8d\xf0\xc5\xe3\x05\x93\xce\xaf\x2d\x82\xe0\xbe\x6c\x02\x4a\x3a\x2d\xc1\x97\x19\x75\x5f\x0b\x62\xbe\xf1\x0c\x00\x73\x7e\xb6\xaa\x91\x3d\x39\xb0\xe3\xeb\xa4\x37\xb4\x20\x1e\x75\xc3\x28\xba\x2a\x9f\x40\xfe\xa3\x0b\xf3\x6f\x4d\xde\x3f\x01\x00\x00\xff\xff\x74\xbc\xea\xdd\x9c\x1f\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
