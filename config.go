// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x61\x6b\xdb\x30\x10\xfd\xbc\xfc\x0a\x91\x1f\xb0\xb2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x39\x6a\x65\x9d\x77\x3a\x95\xe4\xdf\x0f\x27\x71\x16\xdb\x49\x23\x45\x1e\x0b\x84\x80\x7c\x2f\xef\xdd\xe9\xdd\x49\xd8\x6a\xcb\x60\xd9\x89\x8f\x13\x21\x9e\x31\xdf\xfe\x0a\x61\x65\x05\x99\x98\xe6\x5e\x9b\xc2\x01\xbd\x02\x4d\xb7\xeb\x25\x2e\x6b\xc9\xab\x4c\x4c\x4b\xcd\x2b\x9f\xbf\x57\x58\xdd\xe4\x84\xbc\x02\x32\x58\x6a\x75\x33\x80\xd4\x92\x58\x4b\xb3\xcc\x11\xd9\x31\xc9\x3a\x13\x4c\x1e\xb6\xcf\x08\x7e\x7b\x4d\x50\x1d\x14\x34\x1f\x25\x19\x4a\xa4\x4d\x26\xee\xbe\x3c\x7e\xdd\x2f\xd6\x84\x35\x10\x6b\x70\x99\x98\x3a\x45\x92\xd5\x6a\xf7\xff\xb3\xc9\xee\x4b\x50\x78\x5b\x48\xab\x36\x99\x58\xcc\xef\xbe\x3f\xdc\xdd\x3e\x3c\x4d\x66\x93\x33\x19\x5e\xce\xe4\x97\x36\xa0\xb0\xd6\x6d\x22\xfb\x9a\xf4\x97\xdf\xca\x2f\x27\x90\x2f\xe8\xf9\xb0\xd4\x17\xfa\xf9\xfe\xdb\xa7\xdb\xfb\x89\x10\x16\x97\x95\x74\x0c\xb4\x0f\x3d\xab\x7b\xaf\xe2\x15\xc8\x69\xb4\x4c\x52\xbd\x84\x6f\xce\x29\xd4\xff\xd1\xff\x02\x1b\xc7\x48\x10\xaa\xbc\x1b\x7f\xc1\x37\x8f\xf3\xc5\x8f\xf9\xe2\x94\x73\xc8\x5b\xdb\x26\x7e\xca\x38\xfb\x7c\x2e\xa9\x2f\x24\xcb\x28\xf9\x3d\xc0\x95\xbe\xef\x16\xe1\xbc\xfe\x77\x29\xb6\xdf\xad\x2b\x49\x45\xc7\xf6\xbd\xe5\x86\x38\xb6\xe5\xda\xe2\x11\xd6\x39\xae\xdd\xc6\xaa\xe0\xf2\x75\x21\x33\x21\xe2\x1b\xbe\x6d\x5f\x92\x15\x44\xb6\x4d\x1f\x93\xc2\x5f\x13\xae\x37\xa1\xc4\x47\xc1\x83\x56\xbc\xe8\xa2\xf9\xcf\xa7\xf9\xe2\x61\xdb\x9d\x03\x27\xc1\x9a\x81\xac\x34\x4b\x02\x59\x6c\xba\x7e\x52\xe8\x2d\x67\xe2\xc3\xc5\x54\x0c\x96\xa5\xb6\x65\x68\x32\x9d\xf0\x7f\x3e\xf9\xdf\xe8\x81\xf6\x70\x03\xa0\xc8\xb3\xad\x83\x48\x71\x01\xac\x41\x79\xc6\x60\xe6\x6e\xfc\x70\x2c\x0f\xa4\x04\x0e\xb2\x9a\xf0\x55\x37\x47\x42\x78\x11\x06\x90\x13\xce\x74\xbe\xc0\x31\xc4\x35\x8f\x23\x84\x1d\x85\x27\xdc\x3a\xce\x9f\x1e\x1d\x86\xd9\x21\xb5\xe0\x86\x69\xfc\x13\x39\x7a\x7a\x90\xab\x6b\x49\xa0\x90\x0a\x85\xc6\x80\x62\x8d\x36\x94\xff\x14\x2e\xc5\xf8\x3b\x1e\x02\x05\x3a\xa2\xf1\x86\xa8\xa4\x11\xec\x8d\x69\x3c\x00\x2e\xc6\x5d\x7d\x50\x8a\x02\x82\x4a\xdb\x02\xc8\x85\x6f\xc3\x11\x20\x8d\xb9\xd9\xcf\x12\x38\x22\xf5\x3e\x26\x9d\xdf\x21\x95\xd2\x6a\x17\xab\xa1\x8b\x4b\xd1\x91\x4b\xa7\xd5\x33\xe6\xc1\x7d\x78\x14\x9f\x9e\xbf\x2c\x8a\xd8\xd4\x0f\x90\x74\xf6\xdc\x37\x9b\x19\x47\xff\x17\x33\x42\xf6\xa6\x99\xa8\xe1\x17\x87\x21\x2a\x5d\x43\xd5\x5c\x23\x62\xf7\xe0\x08\x34\x82\x02\x8c\x18\x80\x3d\x48\x3a\x7b\xe4\xd9\x3a\x00\x8d\xa1\x00\x15\xb8\x88\x09\xd8\x03\x8d\x30\x85\xa4\x81\x48\xfe\x03\x64\x04\x76\x96\x1c\xcb\xde\x42\x52\xd8\x55\x5b\xc4\xf0\xdb\xe7\x00\x72\xe5\xed\xbd\xf2\x4e\xab\xa0\xb7\x36\x7f\x02\x00\x00\xff\xff\x29\x37\x2b\x0d\x97\x12\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4759, mode: os.FileMode(436), modTime: time.Unix(1596667555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
