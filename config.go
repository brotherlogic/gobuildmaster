// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xdb\x46\x10\x7d\x8e\xbf\x82\xd0\x07\x34\x68\x1f\x85\xc2\x40\x5a\x0b\x85\xd1\xc0\x0d\x14\xb7\xe8\x9b\x30\x5c\x8e\xa9\x8d\x56\x3b\xcc\xec\x52\xb5\xfa\xf5\x05\x75\x61\x78\x91\xad\x1d\x0f\xdb\x06\x08\x0c\xac\xe6\xf0\xcc\x99\xd9\x3d\x1c\xad\xbc\xf5\x11\x7d\x0c\xd9\x8f\x37\x59\xf6\x85\xf2\xc3\xdf\x2c\xf3\xb0\xc5\x79\x36\xcb\x6b\xeb\x8a\x80\xbc\x43\x9e\x1d\xd6\x4b\x5a\x55\x10\xd7\xf3\x6c\x56\xda\xb8\xae\xf3\xef\x0c\x6d\xdf\xe7\x4c\x71\x8d\xec\xa8\xb4\xe6\xfd\x08\x52\x01\x47\x0b\x6e\x95\x13\xc5\x10\x19\xaa\x79\x16\xb9\xc6\xc3\x67\x8c\x5f\x6b\xcb\xb8\x6d\x33\x68\xfe\x19\x88\x58\x12\xef\xe7\xd9\xdd\xfd\xe7\x5f\x4f\x8b\x15\x53\x85\x1c\x2d\x86\x79\x36\x0b\x86\x21\x9a\xf5\xf1\xf9\xb7\x37\xc7\xff\x8c\x45\xed\x0b\xf0\x66\x3f\xcf\x96\x8b\xbb\xdf\x1f\xee\x3e\x3c\x3c\xde\xdc\xde\xbc\xa0\xf0\xba\x92\x27\xeb\xd0\x50\x65\xcf\x42\x4e\x35\x19\x2e\xbf\xa6\x2f\x67\x84\x0d\xd5\xb1\x5d\x1a\x26\xfa\xcb\xc7\xdf\x7e\xfa\xf0\xf1\x26\xcb\x3c\xad\xb6\x10\x22\xf2\x29\xf4\xc5\xbc\x4f\x59\xec\x90\x83\x25\x1f\x19\xcc\x26\xbd\x39\x97\x50\xff\x4f\xfe\x1b\xdc\x87\x48\x8c\xa9\x99\xf7\xe3\x47\x79\x5d\xdd\x4a\x9f\x17\xcb\x3f\x16\xcb\x4b\x9b\xe9\x89\x61\x8b\x71\xcd\x88\x2f\xef\xa7\x93\xcc\x6b\xa2\x9e\x1c\x55\xd5\x3e\x55\x52\x37\x7a\x52\x41\x9d\xe7\x2a\xc4\x14\x10\x41\xd4\xa2\x01\xe0\x8d\x67\x7b\xf0\x94\x97\x05\xbc\xbb\xae\x40\x96\x7e\x27\xfa\x5f\xf0\xac\x29\x74\x5d\x17\x71\x5c\x37\xc0\x45\xcf\xb3\x06\xcb\x0d\xb1\xd4\x2f\xcf\x35\x65\xaa\x72\x7a\x0e\x7b\x6f\x92\x0b\xdb\x87\xdc\x66\x99\xdc\xad\x4f\xec\x6b\x04\x17\xd7\x66\x8d\x12\xd3\x1b\x81\x34\x19\x40\xb1\x6b\x3e\x14\xbd\x12\x87\x18\x0d\xff\xd1\xad\x64\xae\x3f\xc4\x68\xf8\x2b\xa6\xe7\x64\x87\xeb\x04\xcb\x0d\x6e\xf1\xe7\xe3\x62\xf9\x70\x78\xb9\x8c\x0e\x13\x3e\x47\x64\x0f\x6e\xc5\x08\xc5\xc0\xea\x0c\xd5\x3e\xce\xb3\xef\xaf\x4a\x71\x54\x96\xd6\x97\xa9\x62\x7a\xe1\x72\x39\x6f\x9e\x65\x52\xdd\x2e\x47\x64\xe1\xa8\xd6\x43\x68\x76\x05\x3e\xa3\xa9\x23\x25\x33\xf7\xe3\xc7\x53\xc6\x28\x95\xc4\x77\x56\xc5\xb4\xb3\xcd\x84\x93\x5e\x84\x11\xe4\x42\x6b\x43\x5d\xd0\x14\xc9\x35\x1f\x0b\x12\xeb\x84\xcb\xf7\xdb\x72\xf1\xf3\xe2\xfe\xd3\xe3\xea\xd3\xf2\xfe\xe1\xf1\x34\x28\xdc\x2a\xdb\x5c\xd8\x50\x39\x48\x3e\xfe\xbd\xf0\x84\x26\xa7\x27\xd2\xec\x5c\xa1\x09\x8e\x20\x57\x4b\xfa\x4e\x30\x73\xfd\x8d\x4c\x3f\xcc\x06\x45\x3e\x38\x51\x96\x62\x45\x8c\x86\xb8\x30\xe4\x1c\x9a\x68\xc9\xa7\x8a\xba\x84\xd3\xd4\xf5\xc8\xc3\x68\xd0\x0a\x7c\x64\x8c\x52\xbd\x61\x6a\xe7\x9a\x46\x60\x90\x1c\x96\x21\x48\x93\x01\xe3\xd6\xfa\x02\x39\xa4\xb7\xa1\x03\xd0\x31\x37\xfd\x2c\x31\x0a\xa4\x0f\x31\x7a\xfe\x40\x5c\x82\xb7\x41\x9a\x43\x1f\xa7\x3a\xdf\x10\xac\xf9\x42\x79\xf2\xe1\xee\xc4\xeb\xf5\x43\x51\x48\xa5\xb7\x10\x3d\x7b\x5e\x37\xcd\x94\xd1\x7f\xc3\x4c\xa0\xde\x35\xae\x96\x3e\x17\x8d\x51\xfa\x1c\xb6\xcd\x48\x24\xed\x41\x07\x34\x41\x06\x24\x30\xc0\x01\x44\xcf\x2e\x1c\x15\x46\xa0\x29\x32\x20\x83\x41\xe0\x80\x03\xd0\x04\x2e\x04\x0e\x85\xfc\x2d\x64\x02\xf6\x08\x51\xca\x7e\x86\x68\xd8\xcd\xb9\x88\xe9\xc3\xf4\x08\xf2\xc6\x6f\x22\x0c\xb6\x50\x5d\xa9\xf6\x0a\xf8\x17\x78\x69\x01\x5b\x88\x7e\x84\x89\x10\x36\xc9\xec\x03\x88\x6e\x42\x2e\x6d\x04\xd7\x28\x71\x36\x24\xbb\xf8\x05\xd8\x04\x5b\xd8\x10\x8b\x4f\x50\x8b\xd1\xf0\x13\x97\x42\x07\xeb\x23\x34\xdc\xcd\xf3\x92\xe7\xe7\x36\x58\xc3\x18\x71\x5b\xa5\x12\x9e\x63\x35\x7c\x1b\xdc\x6f\xa1\xaa\xd2\x8b\xdb\x03\x68\x98\x0f\x07\x54\xb2\xaf\x7b\x00\xdd\x40\x68\x36\x75\x72\x95\xbb\xd1\xd3\x98\xa1\xfa\x30\xee\xc0\xd9\x02\x04\x57\x24\x17\x60\xba\x7b\x3b\xeb\x63\xce\xb6\x28\x93\x2f\xc4\x07\x10\x0d\x7b\x88\x24\xe3\xee\x01\x74\x76\x60\x36\xe9\x6e\x70\x8c\xd5\xf0\x7d\xad\xb1\x4e\x56\xd9\x06\xeb\xf7\xd7\x13\x78\xaa\x85\xdf\x1a\xbe\x61\xf4\xfc\xc6\x21\x08\x6e\xdd\x46\x20\xd5\xed\x63\xed\xd2\x99\xdb\x60\xd5\x6b\x1e\xc2\x3a\xa7\xf6\x57\x96\x94\xdf\xc6\x7a\x80\x29\x7f\xee\xab\x90\x03\x79\x70\xaf\xb9\x55\xe2\x0d\x65\x40\x53\x33\x8a\xae\xf8\x47\x90\xff\xe8\xa2\xff\xb5\xe6\xfd\x13\x00\x00\xff\xff\x43\xc2\xdb\xef\xd4\x20\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8404, mode: os.FileMode(436), modTime: time.Unix(1642463527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
