// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x61\x8b\x9b\x40\x10\xfd\x5c\x7f\xc5\xe2\x0f\xe8\xd1\xaf\x52\x84\x2b\x91\x52\x7a\xa4\x90\xbb\x96\x7e\x0b\xeb\x3a\x17\xb7\xd1\x1d\x3b\x3b\x7b\xc4\x7f\x5f\x34\x89\x17\x63\x52\x57\x2f\xa5\x81\x10\x18\xdf\x8c\x6f\xdf\xcc\xe4\xad\xd1\x86\xc1\xb0\x15\x1f\x03\x21\x7e\x61\xda\xfe\x0a\x61\x64\x09\x91\x08\x53\xa7\x8b\xcc\x02\xbd\x00\x85\x6d\x7c\x83\xeb\x4a\x72\x1e\x89\x70\xa3\x39\x77\xe9\x7b\x85\xe5\x5d\x4a\xc8\x39\x50\x81\x1b\xad\xee\x06\x29\x95\x24\xd6\xb2\x58\xa7\x88\x6c\x99\x64\x15\x09\x26\x07\xed\x33\x82\xdf\x4e\x13\x94\x1d\x83\xe6\xa3\x24\xc3\x06\xa9\x8e\xc4\xe2\xcb\xe3\xd7\x43\xb0\x22\xac\x80\x58\x83\x8d\x44\x68\x15\x49\x56\xf9\xbe\x7e\xec\x53\xe9\x31\x59\xfd\x48\x56\x97\x6a\x3d\x93\x2c\x81\x73\x02\x78\x2d\xd7\x7c\x09\x32\x67\x32\x69\x54\x1d\x89\x55\xb2\xf8\xbe\x5c\xdc\x2f\x9f\x82\x38\xb8\x22\xd8\xb8\x30\xcf\xba\x00\x85\x95\x3e\xea\x72\x90\xf8\x3c\xfc\x37\xb9\x52\x02\xb9\x45\xc7\x5d\xe8\x9c\xe8\xe7\x87\x6f\x9f\xee\x1f\x02\x21\x0c\xae\x4b\x69\x19\xe8\x00\xbd\xca\xfb\xc0\xe2\x05\xc8\x6a\x34\x4c\x52\x6d\xfd\x7b\x7d\x29\xeb\xff\xf0\x97\x05\x10\xfb\x13\x3f\x81\xc7\x42\x4c\xef\x76\x5f\xb5\x69\x0b\x72\x21\x69\xf6\xf0\x92\x33\xe6\x58\xe4\x38\xb8\x0a\x9d\xe1\x48\x7c\x18\x65\xbf\x85\xda\x32\x12\xf8\x12\xef\xe3\x6f\xca\xf9\xc2\x0c\x8c\xb1\xcf\x08\xab\x14\x77\xb6\x36\xca\xf7\x00\x67\x29\x6f\xe9\x7c\x45\xb8\xab\x7d\xdf\x7b\x02\x1e\x51\x2d\xf9\xf9\x94\xac\x96\xed\x06\x0c\x74\x83\x1d\x03\x19\x59\xac\x09\x64\x56\xcf\xec\xf9\x9e\x22\x81\x02\x3d\x61\x64\x87\x59\x6f\xd2\xce\x15\x45\xa3\x03\xd8\x09\x1b\x3b\x48\x9a\xc5\xc0\xf7\xa8\x4a\x52\x16\x0e\x75\xeb\xc2\xad\xe7\xcc\x3b\x7d\x89\x46\x33\x7a\x9f\xbb\x07\xbf\x95\x5d\x5e\xf5\xb7\x77\xa3\xf4\x61\x07\xca\x4d\xe0\xdf\xc7\x0f\x0d\x60\xd0\x45\xcf\xf5\x6f\x3c\xc7\x7f\x7a\x5e\xd1\x33\xac\xbd\x5b\xf9\xe6\xb1\xff\xc0\x9e\xc2\x67\xff\x59\xf6\xaa\xc4\x9d\x60\xde\xfb\xbe\xbf\xdd\x4c\x73\xf5\xf3\x9c\x7f\xb4\x69\x29\x00\x9d\x9a\xe0\xf1\xca\xd9\x0b\xc7\xc1\xb5\x17\xff\x09\x00\x00\xff\xff\x99\x60\x56\x75\xb9\x0a\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2745, mode: os.FileMode(436), modTime: time.Unix(1575641381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
