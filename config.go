// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x3e\x10\x7f\xfd\xcf\xa7\x10\xf9\x00\xff\xd2\xb7\x61\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xde\x05\x59\xbe\x3a\x5a\x64\x9d\x77\x92\xba\xe4\xdb\x0f\xc7\x89\xeb\xa7\x36\x92\x3c\xd3\x15\x4a\xe0\x74\x3f\xf9\x77\x0f\xba\x3b\x49\x4b\x6d\x41\x5b\xc3\x3e\xcc\x18\xfb\x89\xc9\xf1\x97\x31\xcd\x73\x58\xb0\x79\xe2\xa4\x4a\x0d\xd0\x33\xd0\xfc\x28\xcf\x70\x53\x70\xbb\x5d\xb0\x79\x26\xed\xd6\x25\xff\x0b\xcc\xaf\x12\x42\xbb\x05\x52\x98\x49\x71\xd5\x83\x14\x9c\xac\xe4\x6a\x93\x20\x5a\x63\x89\x17\x0b\x66\xc9\xc1\x71\x8d\xe0\x97\x93\x04\x79\xcd\xa0\xfc\x13\xdc\x42\x86\x74\x58\xb0\xdb\xcf\x0f\x5f\x4e\xc2\x82\xb0\x00\xb2\x12\xcc\x82\xcd\x8d\x20\x6e\xc5\xb6\xda\x7f\x39\xab\xfe\x09\x52\xa7\x53\xae\xc5\x61\xc1\xd6\xab\xdb\x6f\xf7\xb7\x37\xf7\x8f\xb3\xe5\xec\x15\x0b\x2f\x5b\xf2\x24\x15\x08\x2c\xe4\xd9\x90\x93\x4f\xba\xe2\xb7\xec\x4b\x08\xf8\x0e\x9d\xad\x45\x5d\xa2\x9f\xee\xbe\x7e\xbc\xb9\x9b\x31\xa6\x71\x93\x73\x63\x81\x4e\xaa\xaf\xf2\x3e\xb1\x78\x06\x32\x12\xb5\x25\x2e\x76\xfe\xc1\x19\x42\xbd\x0f\x7f\xae\x80\xac\x3f\xf1\x86\xfa\x92\xb1\xf0\x68\xb7\xbd\x16\x96\xd1\x03\xa0\x0b\x79\xfb\xb0\x5a\x7f\x5f\xad\x87\x32\x97\x9c\xd6\xe7\x4d\xce\x89\x2b\xd0\x69\xbb\x60\xd7\x17\xd9\xef\xe0\x60\x2c\x12\xf8\x12\x6f\xeb\xff\x55\xce\x03\x39\x70\x89\x7d\x4a\x58\x24\xb8\x37\x07\x2d\x7c\x0d\xe8\x40\xc6\x44\xbe\x20\xdc\x1f\x7c\xbf\xdb\x50\xbe\xe0\xb5\xd5\x8f\xc7\xd5\xfa\xfe\x78\x02\x7a\x7e\x83\xbd\x05\xd2\x5c\x6d\x08\x78\x7a\x88\x8c\x79\x45\x91\x40\x80\x0c\x48\xd9\x3e\x6a\x94\xef\x9c\x52\xa5\x1f\xc0\x04\x9c\xd8\x1e\x28\x8a\x81\xaf\xa9\x82\x53\x3a\xef\xfb\xad\x16\x97\x3e\x8f\xb4\x3e\x47\x2d\x2d\x7a\xdb\xdd\x52\x9f\xbc\xbf\xfd\x77\x91\xbe\xc2\x2c\x93\x3a\xf3\xa5\xdf\x52\xff\x07\xe8\xc3\x1e\x84\x0b\x70\x7f\x5b\xbf\xdf\xbf\x7a\x49\xe8\x59\xbd\xca\x96\xe9\x9f\xfc\x2f\xda\x11\x93\x49\x5d\xb1\xca\x65\xff\xf3\xd6\x54\x8f\xae\xf5\xad\x5d\x96\xb5\xc3\xbc\xcb\xd5\x13\xf1\x1c\x02\x87\x92\x2e\x66\xa2\x42\x91\x00\x50\xb3\x87\x9f\x47\xdc\x96\x78\x39\x8b\x8c\xd6\xb9\xd7\x26\x5c\xec\x5c\x11\xda\xa1\x9b\xa8\xc8\x43\x47\x5c\xa6\xd7\xd1\x71\x23\x10\x48\xa9\x40\xa5\x40\x58\x89\xda\xd7\x80\x21\x5c\x7c\xca\x57\xbb\xf1\x34\xf5\x4f\x9e\x0e\x64\x4c\x9b\xab\xb6\xca\xc0\x06\x9c\xba\x2e\x66\x92\x8b\x48\xf5\x91\xdf\x5c\x5b\x33\xef\x13\xae\xe5\xf1\x7e\x3f\x6e\xa1\xa4\xb1\xbe\x66\xb7\x00\x13\x9d\x57\x82\x5c\xea\x14\xa8\x6b\x73\x53\x1a\xd3\xd6\x7d\xfd\x6d\x90\x32\xae\xa5\xe9\xd4\x8b\xc1\xc5\x29\x79\x14\x84\x02\xcc\x50\xe4\x9b\x2b\xcb\xaa\x26\x4c\xc4\x21\xc7\x6e\xd9\xec\xca\x5f\xf7\xc0\x1b\x3d\xde\xfb\x78\x97\xb7\xbf\x7a\x2a\x69\x17\x8b\xc6\xd2\x84\x87\xaf\xd5\x17\x3b\x41\xa8\x57\xc6\x16\x3e\xc3\x15\x98\xb0\xca\x53\x43\xc6\x14\x3e\x71\xce\x24\xff\x31\xab\x07\x89\xec\x5a\xb9\x33\x52\x8c\x7a\xc7\x69\xcd\xfb\x96\x9b\x9d\xb7\x07\x3b\x90\xf1\xad\x23\x71\x65\x27\x08\x0b\xe0\x0b\x66\xcc\xf7\xc3\xa6\x8e\x77\x9f\x36\x82\x5e\x31\xfc\x9f\x30\xa2\xef\x23\x9e\x77\x80\x92\x8f\xf7\x64\x54\x2b\xc7\xe7\xb4\x01\xe1\x08\x82\x5e\x2e\x7a\x90\x29\xde\x2f\xde\x4c\xd4\x3f\x01\x00\x00\xff\xff\xaf\xa7\xd6\xef\x51\x16\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5713, mode: os.FileMode(436), modTime: time.Unix(1583770548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
