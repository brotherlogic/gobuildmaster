// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x46\x7e\xc0\x0e\x1b\x0e\xfb\x10\x0c\x05\x6e\x6b\xb0\x15\x3b\xa4\x45\x9a\x0d\xdb\xbe\x04\xb4\xcc\x3a\xba\xc8\xa2\x4b\x49\x59\xb3\x5f\x3f\x38\x4d\x5c\xbf\x25\x96\xaa\x74\x2b\x50\x14\x90\xf9\xe8\x21\x45\xea\x11\x6d\x55\x4b\x6d\x51\x5b\x93\xfc\x70\x95\x24\x5f\x29\xdd\xff\x4d\x12\x0d\x05\x4e\x93\x49\xea\xa4\xca\x0c\xf2\x16\x79\xb2\x1f\xcf\x69\x55\x82\x5d\x4f\x93\x49\x2e\xed\xda\xa5\xdf\x08\x2a\x3e\xa6\x4c\x76\x8d\xac\x28\x97\xe2\x63\x0f\x52\x02\x5b\x09\x6a\x95\x12\x59\x63\x19\xca\x69\x62\xd9\xe1\xfe\x59\xca\x08\x1b\x72\xb6\x31\xc4\xf8\xe4\x24\x63\x51\x3b\x55\xfd\x08\xb0\x98\x13\xef\xa6\xc9\xcd\xed\xc3\xaf\x87\xc1\x92\xa9\x44\xb6\x12\xcd\x34\x99\x18\xc1\x60\xc5\xfa\x85\xf2\xda\x67\xa6\x5f\xee\x1e\x96\xab\xe5\x9f\xf7\xb3\xa1\xe9\xee\x65\xf2\x29\x60\xae\xbf\xee\xe6\x83\xd3\x68\xd2\x42\x39\x63\x8f\x6b\x51\x4d\x56\xfd\x32\x66\x4e\x67\xa0\xc5\x6e\x9a\x2c\x66\x37\xbf\xcd\x6f\x3e\xcf\x97\xad\xf1\xef\x3f\x35\x9f\x5c\x5f\x9d\xc8\xd3\x78\x3e\x1e\xa5\x42\x41\xa5\x3c\xba\x70\xc8\x6c\x77\x38\x28\x4b\xdd\x10\x7e\xfe\x72\xf7\xe3\xe7\x2f\x57\x49\xa2\x69\x55\x40\x15\xee\xc1\xf4\xa4\xdf\x07\x2f\xb6\xc8\x46\x92\xb6\x0c\x62\xe3\x5f\x62\x43\xa8\xff\xc7\xff\x0d\xee\x8c\x25\x46\x5f\xcf\xdb\xf6\xe1\xd5\xff\x30\x5b\xfc\x3e\x5b\x0c\x55\x1a\x70\x4e\xfa\x74\x91\x1d\x22\x1c\x8b\xe7\x51\x51\x59\xee\x7c\xa3\x69\x5a\xbf\xd9\xf1\xe6\x24\x11\x9e\x67\x60\x21\x28\x15\x1d\xc0\x1b\x65\xa7\x33\xcb\xe9\x00\x3e\x8c\x47\x10\xe6\x7e\xc3\xfa\xbf\x51\xd8\x81\x50\xdf\x55\x17\x47\xd7\x6d\x7c\x91\x5e\xc6\x05\x70\xd6\xd2\xbe\xce\xf0\x3e\x92\x61\x45\x1e\xcd\x19\x53\x99\xd2\xb3\xd9\x69\xe1\x9d\xb8\x36\xe4\x3a\x49\x4e\x9e\x07\x63\xec\x6b\x04\x65\xd7\x62\x8d\x21\xe2\xd9\x03\xc5\x78\x00\xd9\xb6\x7a\x18\xd4\x20\x74\x31\x31\xfc\x8f\x0c\x05\x06\x9e\x1e\x5d\x4c\x0c\x7f\xc9\xf4\xec\x2d\x97\x0d\xe3\x91\x6d\x33\xfb\x63\x39\x5b\xcc\xf7\x27\x52\x6f\xeb\xe0\xb3\x45\xd6\xa0\x56\x8c\x90\x75\x74\x53\x90\xd3\x76\x9a\x7c\x3b\xea\xb7\xa2\x3c\x97\x3a\xf7\xf5\xbc\x65\xfe\x8e\x3d\xdb\x99\x73\xd9\xae\x48\xaf\x5e\x8a\x66\x9a\x4c\x38\x93\xa6\x54\xb0\x9b\x8c\xcb\x2a\x3e\xa3\x70\x96\xbc\xcb\xa3\x6d\xdf\x6f\x1d\x7a\xd5\xe2\x79\x40\x95\x4c\x5b\x59\xb5\x2d\xfe\x95\xda\x83\x0c\x2c\xfd\x39\xed\x37\x2e\xa3\x4b\x38\x5e\x3d\x0e\x70\xba\x61\x1e\x5e\x2b\x8b\xd9\x4f\xb3\xdb\xfb\xe5\xea\x7e\x71\x3b\x5f\x1e\x3a\x86\xeb\xc8\x5d\x7a\x2c\x16\x5f\x85\x7e\x35\x8f\x61\xcd\x19\x8a\x94\x65\x96\x7b\x9f\xe9\x6d\x44\x0c\x77\x8a\xc8\x81\xb2\xd8\x83\xb4\x13\xf5\x21\xa0\xa5\xfb\x07\x99\xbe\x9b\x74\x52\xb7\xd7\xa6\xc4\x47\x9c\x18\x05\x71\x26\x48\x29\x14\x56\x1e\xbb\xda\xf1\x08\x86\x70\x51\x09\xdc\xf3\x30\x0a\x94\x01\xc7\x5b\x1f\x15\x75\xc0\x38\xa5\xaa\x44\xa0\x09\xd9\x82\x5d\x50\x8c\x07\x8c\x85\xd4\x19\xb2\xf1\x4f\x43\x03\x10\xc7\x5c\xe5\x33\x47\x1b\x10\x7a\x17\x13\xcf\x6f\x88\x73\xd0\xd2\x84\xfa\xd0\xc6\x45\x6d\x66\x30\x52\x7c\xa5\xd4\x7b\x27\x37\xec\xe3\xe3\x87\x2c\x0b\x0d\xbd\x86\xc4\xb3\xa7\xae\x4a\x66\x18\xfd\x2b\xe6\x02\xd1\xab\x4a\xd5\xfc\x3b\xa5\x3e\x2a\xde\x87\xa2\x6a\x92\x42\x73\xd0\x00\x5d\xc0\x03\x0a\x10\xc0\x0e\x24\x9e\x3d\xb0\x01\xe9\x81\x2e\xe1\x01\x09\x34\x01\x0a\xd8\x01\x5d\x40\x85\x40\x61\x20\x7f\x0d\xb9\x00\xbb\x05\x1b\xca\x7e\x84\xc4\xb0\x8b\xe3\x22\xfa\xb7\xef\x3d\xc8\x1b\xdf\x4d\x18\x64\xe6\xf3\xcd\xd6\x6f\x01\xff\x06\x1d\xba\x80\x35\x24\xbe\x85\xb1\x60\x36\xde\xec\x1d\x48\x5c\xdf\x9d\x4b\x0b\xaa\x8a\x44\x49\xe3\xad\xe2\x03\xb0\x0b\x94\xb0\x20\x0e\xde\x41\x35\x26\x86\x9f\x38\x0f\x54\xb0\x36\x22\x86\xbb\x9a\xcf\xbb\x7f\xae\x8d\x63\x18\x2d\x16\xa5\x2f\xe1\xd1\x36\x86\x6f\x83\xbb\x02\xca\xd2\x7f\x71\x5b\x80\x18\xe6\xfd\x06\x0d\xa9\xeb\x16\x20\xae\x21\x14\x1b\xe7\xbd\xca\x4d\xeb\xcb\x88\x61\xf4\x66\xdc\x82\x92\x19\x04\x7c\x94\x19\x80\xc5\x7d\xb6\x93\xda\x86\xbd\x9b\x77\x20\x31\xec\xc6\x52\x18\x77\x0b\x10\x27\x07\x62\xe3\xaf\x06\x2f\xb6\x31\x7c\x4f\x0e\x9d\x77\x94\xb5\x71\x7c\x7d\x3d\x82\x26\x17\xf8\xd6\xf0\x8a\x89\xe7\x17\x0a\x21\xe0\x3b\x5f\x0f\x14\xe3\x01\x3a\xe5\xcf\x5c\x1b\x5f\xe6\x3d\x39\xfc\x0d\x39\xba\xc5\x00\xb3\x4e\xa9\xbe\xe0\xf1\xb9\xf6\x6b\x01\xde\x7c\x6d\x59\x22\x1b\xd2\xa0\xce\xc9\xa2\xe7\x07\x56\x83\xc2\x31\x06\x5d\x25\xf4\x20\xef\x71\xa1\x10\x75\x42\xe9\x4c\x40\x51\x06\xfe\xeb\x48\x0f\x15\xe5\x83\x93\x2a\xe0\xd3\x45\xc3\x3c\x4a\xdc\x49\x93\x09\x94\xf7\x36\x24\xaa\xfb\x02\xb3\x09\x69\x49\x9a\xf6\xe7\x79\xc7\x2e\xe2\x48\x38\xef\xee\xba\x36\x3e\x4b\xf9\x6f\x00\x00\x00\xff\xff\x88\xb6\xa5\x1c\x9a\x24\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9370, mode: os.FileMode(436), modTime: time.Unix(1690007591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
