// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x46\x7e\xc0\x0e\x1b\x0e\xfb\x10\x0c\x05\x6e\x68\xb0\x0d\x3b\xb4\x87\xb6\x1b\xb6\x7d\x09\x68\x99\x75\x74\x91\x45\x1f\x25\x75\xcd\x7e\xfd\xe0\xb4\x71\xfd\xd6\x5a\x0a\xd3\xad\x40\x51\x40\xe6\xa3\x87\x14\xa9\x47\xb4\x55\xab\xad\x47\xeb\x5d\xf6\xc3\x59\x96\x7d\xa1\x7c\xff\x37\xcb\x2c\x54\xb8\xcc\x16\x79\xd0\xa6\x70\xc8\xf7\xc8\x8b\xfd\x78\x49\xeb\x1a\xfc\x66\x99\x2d\x4a\xed\x37\x21\xff\x46\x51\xf5\x3e\x67\xf2\x1b\x64\x43\xa5\x56\xef\x47\x90\x1a\xd8\x6b\x30\xeb\x9c\xc8\x3b\xcf\x50\x2f\x33\xcf\x01\xf7\xcf\x72\x46\xd8\x52\xf0\x9d\x21\xc6\xaf\x41\x33\x56\xad\x53\xcd\x8f\x02\x8f\x25\xf1\x6e\x99\x5d\xfc\x72\xf3\xeb\xd3\x60\xcd\x54\x23\x7b\x8d\x6e\x99\x2d\x9c\x62\xf0\x6a\xf3\x48\x79\x1e\x33\xd3\xcf\x57\x37\xb7\xeb\xdb\x3f\x3f\xaf\xa6\xa6\xfb\xac\xb3\x0f\x09\x73\xfd\x75\x75\x39\x39\x8d\x25\xab\x4c\x70\xfe\xb0\x16\xcd\x64\xcd\x2f\x63\x11\x6c\x01\x56\xed\x96\xd9\xf5\xea\xe2\xb7\xcb\x8b\x8f\x97\xb7\xbd\xf1\xef\x3f\x74\x9f\x9c\x9f\xbd\x90\xa7\xf9\x7c\xdc\x69\x83\x8a\x6a\x7d\x70\xe1\x29\xb3\xc3\xe1\xa4\x2c\x0d\x43\xf8\xe9\xd3\xd5\x8f\x1f\x3f\x9d\x65\x99\xa5\x75\x05\x4d\xb8\x4f\xa6\x2f\xfa\xfd\xe4\xc5\x3d\xb2\xd3\x64\x3d\x83\xda\xc6\x97\xd8\x14\xea\xff\xf1\x7f\x8b\x3b\xe7\x89\x31\xd6\xf3\xbe\x7d\x7a\xf5\xdf\xac\xae\x7f\x5f\x5d\x4f\x55\x1a\x70\x49\xf6\xe5\x22\x7b\x8a\x70\x2e\x9e\x3b\x43\x75\xbd\x8b\x8d\xa6\x6b\x7d\xb4\xe3\xdd\x49\x04\x9e\x17\xe0\x21\x29\x15\x03\xc0\x91\xb2\x33\x98\xe5\xe5\x00\xde\xcd\x47\x90\xe6\x7e\xc7\xfa\xbf\x51\xd8\x89\x50\xdf\x54\x17\x67\xd7\x6d\x7e\x91\x1e\xc7\x15\x70\xd1\xd3\xbe\xc1\xf0\x3e\x92\x69\x45\x9e\xcd\x19\x53\x9d\xd3\x83\xdb\x59\x15\x9d\xb8\x3e\xe4\x3c\xcb\x5e\x3c\x0f\xe6\xd8\x37\x08\xc6\x6f\xd4\x06\x53\xc4\x73\x04\x92\x78\x00\xc5\x7d\xf3\x30\xa9\x41\x18\x62\x24\xfc\x77\x0c\x15\x26\x9e\x1e\x43\x8c\x84\xbf\x66\x7a\x88\x96\xcb\x8e\xf1\xcc\xb6\x59\xfd\x71\xbb\xba\xbe\xdc\x9f\x48\xa3\xad\x83\x0f\x1e\xd9\x82\x59\x33\x42\x31\xd0\x4d\x45\xc1\xfa\x65\xf6\xed\xac\xdf\x86\xca\x52\xdb\x32\xd6\xf3\x9e\xf9\x1b\xf6\x6c\xaf\x9c\xcb\x7e\x4d\x76\xfd\x58\x34\xcb\x6c\xc1\x85\x76\xb5\x81\xdd\x62\x5e\x56\xf1\x01\x55\xf0\x14\x5d\x1e\x7d\xfb\x71\xeb\x30\xaa\x96\xc8\x03\xaa\x66\xba\xd7\x4d\xdb\x12\x5f\xa9\x23\xc8\xc4\xd2\xbf\xa6\xfd\x2e\x14\x74\x0a\xc7\x9b\xc7\x09\x4e\x77\xcc\x67\x6b\xe5\x5d\x42\xa7\xa0\x8a\x4e\xa5\x08\x36\xed\xa1\x76\x62\x05\xfb\xd9\x5c\xc2\x5a\x32\x54\x39\xeb\xa2\x8c\x3e\xe2\xfb\x08\x09\x77\x8e\xc8\x89\x2a\x39\x82\x1c\x9f\xb7\x7f\x90\xe9\xbb\x61\xea\xf6\x52\x95\xc5\x68\x15\xa3\x22\x2e\x14\x19\x83\xca\xeb\x43\x93\x3b\x1f\xc1\x14\x4e\x94\xc0\x3d\x0f\xa3\x42\x9d\x70\xda\x8d\x51\xa2\xf3\x26\x18\xd3\x24\x02\x5d\xca\x8e\x1c\x82\x24\x1e\x30\x56\xda\x16\xc8\x2e\x3e\x0d\x1d\x80\x8c\xb9\xc9\x67\x89\x3e\x21\xf4\x21\x46\xce\xef\x88\x4b\xb0\xda\xa5\xfa\xd0\xc7\x89\x36\x33\x38\xad\xbe\x50\x1e\xbd\x93\x3b\xf6\xf2\xf8\xa1\x28\x52\x43\x6f\x21\x72\xf6\x3c\x34\xc9\x4c\xa3\x7f\xc6\x9c\x20\x7a\xd3\xa8\x5a\x7c\xe3\x34\x46\xc9\x7d\xa8\x9a\x9e\x29\x35\x07\x1d\xd0\x09\x3c\xa0\x04\x01\x1c\x40\xe4\xec\x89\xfd\xc8\x08\x74\x0a\x0f\x48\xa1\x4b\x50\xc0\x01\xe8\x04\x2a\x04\x06\x13\xf9\x5b\xc8\x09\xd8\x3d\xf8\x54\xf6\x03\x44\xc2\xae\x0e\x8b\x18\xdf\xcd\x8f\x20\x47\xbe\xaa\x30\xe8\x22\xe6\x13\x6e\xdc\x02\xfe\x0d\x36\x75\x01\x5b\x88\xbc\x85\xf1\xe0\xb6\xd1\xec\x03\x88\xac\xef\x2e\xb5\x07\xd3\x44\x62\xb4\x8b\x56\xf1\x09\xd8\x09\x4a\x58\x11\x27\xef\xa0\x16\x23\xe1\x27\x2e\x13\x15\xac\x8f\x90\x70\x37\xf3\x45\xf7\xcf\xad\xb1\x84\xd1\x63\x55\xc7\x12\x1e\x6c\x25\x7c\x5b\xdc\x55\x50\xd7\xf1\x8b\xdb\x03\x48\x98\xf7\x1b\x34\xa5\xae\x7b\x00\x59\x43\xa8\xb6\x21\x7a\x95\xbb\xd6\xa7\x11\x43\xf1\x66\xbc\x07\xa3\x0b\x48\xf8\x46\x33\x01\x93\x7d\xc5\xd3\xd6\xa7\xbd\x9b\x0f\x20\x12\x76\xe7\x29\x8d\xbb\x07\x90\xc9\x81\xda\xc6\xab\xc1\xa3\xad\x84\xef\x6b\xc0\x10\x1d\x65\x6b\x2c\xaf\xaf\x3b\xb0\x14\x12\xdf\x1a\x9e\x31\x72\x7e\x65\x10\x12\x3e\xfb\x8d\x40\x12\x0f\x30\x98\x78\xe6\xd6\xf8\x34\xef\xc9\xe9\x6f\xc8\xe2\x16\x03\xdc\x26\xa7\xf6\xbe\x27\xe6\x16\xb0\x07\x38\xfa\x16\xb3\x46\x76\x64\xc1\xbc\x26\x8b\x91\xdf\x5b\x1d\xaa\xc0\x98\x74\xb3\x30\x82\xbc\xc5\xfd\x82\xe8\x84\xb2\x85\x82\xaa\x4e\xfc\x4f\x92\x11\x4a\xe4\x43\xd0\x26\xe1\xd3\x45\xc7\x5c\x24\xee\x64\xc9\x25\xca\x7b\x1f\x22\xea\xbe\xc0\x6d\x53\x5a\x92\xae\xfd\xeb\xbc\x73\xf7\x72\xa4\x42\x74\x77\xdd\x1a\xbf\x4a\xf9\x6f\x00\x00\x00\xff\xff\xc1\x6a\x4d\x53\xa9\x24\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9385, mode: os.FileMode(436), modTime: time.Unix(1694024190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
