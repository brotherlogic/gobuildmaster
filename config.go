package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x99\x6d\x6f\xe3\x36\x0c\xc7\x5f\x5f\x3e\x85\x90\x0f\xb0\xc3\xf6\x32\x18\x0a\xdc\xd6\x60\x28\x76\xe8\x0e\xb9\x6e\xd8\xbb\x80\x96\x59\x47\x67\x59\xf4\x51\x72\xd7\xec\xd3\x0f\xce\x83\x1b\xdb\x69\x23\x85\xde\x76\x05\x8a\x00\x0a\x7f\xfe\x93\x94\x48\xc9\x8a\x33\x2e\xa0\x0b\x5e\xfd\x38\x53\xea\x0b\x65\xbb\x4f\xa5\x1c\x54\xb8\x50\xf3\xac\x31\x36\xf7\xc8\x4f\xc8\xf3\xdd\x78\x41\xeb\x1a\xc2\x66\xa1\xe6\x85\x09\x9b\x26\xfb\x4e\x53\xf5\x3e\x63\x0a\x1b\x64\x4b\x85\xd1\xef\x47\x48\x0d\x1c\x0c\xd8\x75\x46\x14\x7c\x60\xa8\x17\x2a\x70\x83\xbb\xef\x18\xbf\x36\x86\xb1\xea\x3c\x68\xff\x34\x04\x2c\x88\xb7\x0b\x75\x7b\xf7\xf9\xd7\xc3\x60\xcd\x54\x23\x07\x83\x7e\xa1\xe6\x5e\x33\x04\xbd\xd9\x3f\xff\x66\xb6\xff\x67\xcc\x1b\x97\x83\xd3\xdb\x85\x5a\x2d\x6f\x7f\xbf\xbf\xfd\x70\xff\x30\xbb\x99\xbd\x12\xe1\xe5\x48\x1e\x8d\x45\x4d\xb5\x39\x06\x72\xc8\xc9\x70\xf8\xad\xf8\x32\x46\x28\xa9\x09\xdd\xd0\xd0\xd1\x5f\x3e\xfe\xf6\xd3\x87\x8f\x33\xa5\x1c\xad\x2b\xf0\x01\xf9\x60\xfa\xaa\xdf\x07\x2f\x9e\x90\xbd\x21\x17\x18\x74\x19\x3f\x39\xe7\xa8\xff\xc7\xff\x12\xb7\x3e\x10\x63\xac\xe7\x7d\xfb\x91\x5f\x17\x97\xd2\xe7\xe5\xea\x8f\xe5\xea\xdc\x62\x7a\x64\xa8\x30\x6c\x18\xf1\xf5\xf5\x74\x08\xf3\x52\x50\x8f\x96\xea\x7a\x1b\x1b\xd2\xa9\xf5\xf5\xde\x9f\x3c\x44\xe0\x79\x0e\x01\x92\xe6\x63\x00\x5c\x59\xc8\x83\xa7\xbc\x1e\xc0\xbb\xcb\x11\xa4\xb9\xff\x6d\xf8\x7e\xd9\xd1\xfd\xb8\x06\xce\x7b\x4d\x68\x30\xdc\x0a\xa7\x36\xc0\x63\xde\x98\xea\x8c\x9e\xfd\xd6\xe9\xe8\xe4\xf5\x91\x1b\xa5\xd2\xdb\xef\xb1\x62\x76\xc5\x97\xd6\xc4\x86\x8c\x44\xbf\x66\x7a\x8e\x2e\xd8\x13\xe3\xf4\x06\xb4\xfc\xf3\x61\xb9\xba\xdf\xf5\xca\xd1\x52\xc2\xe7\x80\xec\xc0\xae\x19\x21\x1f\x14\xb3\xa6\xc6\x85\x85\xfa\xfe\x62\x28\x96\x8a\xc2\xb8\x22\x36\x98\x9e\xf9\xbf\xb5\x0f\xc7\x16\x6f\x86\xc8\x89\xc7\x8c\x1e\x21\x59\x02\xf8\x8c\xba\x09\x14\xad\xdc\xb7\x1f\xef\x90\x23\x57\x22\x5b\x70\xcd\xf4\x64\xda\xdd\x39\x3e\x09\x23\xe4\xcc\xb2\xf4\x4d\x4e\x53\x38\xd7\x7e\x9d\xe0\xd8\x89\x79\x7a\xad\xac\x96\x3f\x2f\xef\x3e\x3d\xac\x3f\xad\xee\xee\x1f\x0e\xfb\xde\x8d\x70\x9a\xdb\x05\x93\xd8\x68\x46\xc8\xc5\x48\xde\x25\xec\xdc\x7f\x23\xd3\x0f\xf3\x41\x6c\xbb\x6a\x57\x31\xe5\xce\xa8\x89\x73\x4d\xd6\xa2\x0e\x86\x5c\x6c\x50\xe7\x38\x49\x5e\xf7\x3a\x8c\x1a\x4d\x42\xf9\x8e\x29\x51\x17\x6f\xac\x6d\x27\x02\x7d\xca\x1a\x1d\x42\x12\x0f\x18\x2b\xe3\x72\x64\x1f\x3f\x0d\x27\x80\x4c\xb9\x9d\xcf\x02\x43\x42\xe8\x43\x46\xae\xef\x89\x0b\x70\xc6\xa7\xfa\xd0\xe7\x44\xf5\x0d\xde\xe8\x2f\x94\x45\x17\xf7\x89\xbd\x3c\x7e\xc8\xf3\xd4\xd0\x3b\x44\xae\x9e\x35\xed\x64\xa6\xc9\xbf\x30\x13\x44\x6f\xdb\xae\x16\x7f\xf6\x18\x53\x72\x1f\xaa\xf6\x24\x92\x3a\x07\x27\xd0\x04\x1e\x50\x42\x03\x1c\x20\x72\xf5\xc4\x1d\x7a\x04\x4d\xe1\x01\x69\xf4\x09\x1d\x70\x00\x4d\xd0\x85\xc0\x62\xa2\x7e\x87\x4c\xa0\x1e\x20\xa4\xaa\x1f\x11\x89\xba\x3e\x26\x31\xfe\x0c\x3b\x42\xae\x7c\x01\x60\x30\xb9\xe8\x16\xae\x97\xc0\xbf\xc0\xa5\x26\xb0\x43\x44\x6f\x00\x41\x97\xc6\xda\xf8\xe2\x19\x00\xd3\xbd\x03\xec\x05\x03\xf8\x32\x3a\x0f\x03\x44\x92\x87\xdc\x14\x26\x80\x6d\x73\x6a\x8d\x8f\xde\x4f\xce\x60\x13\x14\x93\x26\x4e\xae\xe5\x8e\x91\xe8\x13\x17\x89\xbd\xb4\x4f\x48\xb4\xdb\xe7\x45\x9f\xe4\x3b\x63\x89\x62\xc0\xaa\x8e\x15\x3c\xda\x4a\xf4\x4a\xdc\x56\x50\xd7\xf1\xc9\xed\x01\x12\xe5\x5d\xab\x48\x59\xd7\x3d\x40\x76\x34\xd5\x65\x13\x9d\xe5\x17\x6b\x79\x15\x3d\x81\x35\x39\x24\x5c\x6e\x9c\xc1\x64\xd7\x6b\xc6\x85\x8c\x4d\x5e\x44\xdf\xcc\x0e\x10\x89\xba\x0f\x94\xa6\xdd\x03\x64\x75\xac\xcb\xf8\x32\xde\xdb\x4a\xf4\xbe\x36\xd8\x44\x47\xd9\x19\xcb\xd7\xd7\x23\x38\x6a\x12\x5f\x3c\x5e\x18\xb9\xbe\xb6\x08\x09\xf7\x65\x23\x48\xb4\x5b\x82\xdf\x64\xd4\x5d\xcc\xc7\xfc\x64\xd2\x03\xa6\xfc\x0d\xab\x46\xf6\xe4\xc0\x0e\xaf\x93\xae\x38\x82\x78\xd4\x0d\x63\xd2\xbd\xf8\x08\xf9\x8f\x6e\xc7\xdf\x9a\xbc\x7f\x02\x00\x00\xff\xff\x16\xfa\x4f\xe4\xd8\x1e\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
