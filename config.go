// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6e\xdb\x3c\x0c\xbd\x6e\x9e\x42\xc8\x03\x7c\xc5\xb7\xcb\x60\x08\xd0\xa1\xc1\x30\xac\xe8\x80\xb4\x1b\x76\x17\xc8\x32\xeb\xa8\x91\x45\x8f\xa2\xb3\x64\x4f\x3f\x38\x3f\x6e\xfc\x93\x46\xaa\xbc\xad\x40\x11\x40\xe6\xf1\xe1\xa1\x48\x4a\xa6\xd5\x96\xc1\xb2\x13\xef\x47\x42\x3c\x63\xb2\xfb\x15\xc2\xca\x1c\x26\x62\x9c\x94\xda\xa4\x0e\x68\x0d\x34\xde\xad\x67\xb8\x28\x24\x2f\x27\x62\x9c\x69\x5e\x96\xc9\x7f\x0a\xf3\xeb\x84\x90\x97\x40\x06\x33\xad\xae\x3b\x90\x42\x12\x6b\x69\x16\x09\x22\x3b\x26\x59\x4c\x04\x53\x09\xbb\x67\x04\x3f\x4a\x4d\x90\xd7\x1e\x54\x7f\x4a\x32\x64\x48\xdb\x89\xb8\xfd\xf4\xf0\xf9\xb0\x58\x10\x16\x40\xac\xc1\x4d\xc4\xd8\x29\x92\xac\x96\xfb\xf7\x4f\x47\xfb\x7f\x82\xb4\xb4\xa9\xb4\x6a\x3b\x11\xf3\xd9\xed\xd7\xfb\xdb\x9b\xfb\xc7\xd1\x74\x74\x46\xe1\x65\x25\x4f\xda\x80\xc2\x42\x1f\x85\x1c\x62\xd2\x5e\x7e\x4d\x5f\x42\x20\x57\x58\x72\xbd\xd4\x76\xf4\xe3\xdd\x97\x0f\x37\x77\x23\x21\x2c\x2e\x72\xe9\x18\xe8\x60\x7a\xd6\xef\x83\x17\x6b\x20\xa7\xd1\x32\x49\xb5\xf2\xdf\x9c\x3e\xd4\xbf\xf1\x7f\x05\x5b\xc7\x48\xe0\xeb\x79\xd3\xbe\xe3\xd7\xc5\x54\x7a\x98\xcd\xbf\xcd\xe6\x7d\xc9\xf4\x44\x32\x07\x5e\x12\xc0\xf9\x7c\x3a\xc8\xbc\x24\x2a\x95\x2c\x83\x54\xb5\x00\x6f\x2c\x87\xd6\x5b\xce\x0b\xb8\x8a\x29\x87\xfd\xba\x92\x94\x36\xca\xa1\xb5\x5c\x11\x87\x96\xe2\x31\x7a\x84\x45\x82\x1b\xb7\xb5\xca\x3b\x7e\x4d\xc8\x54\x88\xf0\x46\x70\x2c\xeb\x5d\x1a\x84\x95\x53\x1b\x13\xc3\x5f\x10\x6e\xb6\xbe\xc4\x27\xc6\xe1\xa5\x30\xfb\xfe\x38\x9b\xdf\xef\xaa\xb6\x93\x4a\xb0\x61\x20\x2b\xcd\x82\x40\xa6\xdb\x66\x3e\x29\x2c\x2d\x4f\xc4\xff\x17\xa5\x18\xcc\x32\x6d\x33\x5f\x31\x0d\xf3\x3f\x7e\x22\xbc\x52\x03\xc7\x43\x0f\x80\x02\xcf\xbc\x06\x22\x26\x0b\x60\x03\xaa\x64\xf4\x66\x6e\xda\x77\xdb\x75\xc7\x15\xcf\x4e\x56\x10\xae\x75\x75\x54\xf8\x07\xa1\x03\xe9\xc9\x4c\x57\xa6\x38\x84\x73\xd5\xe3\x00\xc7\x4e\xcc\x7b\x9c\x8a\xb8\xa0\x9c\x3f\x55\x1a\xa4\xd3\x5a\xad\x77\x0d\x55\x29\x15\xd8\x8d\x3a\x90\x8b\xad\xe1\x2a\x40\xd0\x2f\x20\x7c\xd7\x2b\x47\xf8\xe8\x21\x50\x48\xa9\x42\x63\x40\xb1\x46\xeb\x2b\xaa\x0f\x17\x53\x60\x7b\x1e\x02\x05\x3a\xa0\xc0\xbb\xa8\xa8\x56\x5f\x1a\x53\x6d\x04\xb8\x90\x2c\x6e\x83\x62\x3c\x20\xc8\xb5\x4d\x81\x9c\xff\x36\x9c\x00\xe2\x98\xab\xfd\xcc\x80\x03\xa4\xb7\x31\xf1\xfc\x0e\x29\x93\x56\xbb\x50\x1f\x9a\xb8\x18\x3f\x12\xe9\xb4\x7a\xc6\xc4\xbb\xb8\x4f\xec\xe3\xf5\xcb\x34\x0d\x95\x5e\x43\xe2\xd9\x93\xb2\xda\xcc\x30\xfa\x17\xcc\x00\xea\x4d\xd5\xd5\xfc\x2f\x28\x5d\x54\xbc\x0f\x79\x75\x5d\x09\xdd\x83\x13\xd0\x00\x1e\x60\x40\x03\x6c\x41\xe2\xd9\x03\xcf\xf0\x0e\x68\x08\x0f\x50\x81\x0b\xe8\x80\x2d\xd0\x00\x5d\x48\x1a\x08\xe4\xaf\x21\x03\xb0\xb3\xe4\x50\xf6\x23\x24\x86\x5d\x1d\x83\xe8\x7f\xcb\xed\x40\xde\xf8\x95\x40\x52\xa7\x51\x43\xa3\x46\x00\x7f\x4a\x1b\x1a\xc0\x1a\x12\xf5\x8d\xc0\x6a\xa5\x8d\xf1\x2f\x9e\x16\x60\xb8\xaf\x84\x3d\x21\x4b\xb7\xf2\x8e\x43\x0b\x12\x13\x87\x54\x67\x9a\xa5\xa9\x62\x6a\xb4\xf3\x3e\x4f\x7a\x60\x03\x14\x93\x42\x0a\xae\xe5\x1a\x13\xc3\x8f\x94\x05\xf6\xd2\x26\x22\x86\xbb\x7a\x9f\xf7\x4d\xbe\x36\x8e\x61\x64\xc8\x0b\x5f\xc2\xa3\x6d\x0c\xdf\x0a\xb6\xb9\x2c\x0a\xff\xe0\x36\x00\x31\xcc\xbb\x56\x11\x92\xd7\x0d\x40\xdc\xd5\x54\xad\x4a\xef\x28\xbf\x58\xc7\x57\xd1\x5a\x1a\x9d\xca\x80\xf1\x47\x0f\x2c\x6e\x06\xa7\x2d\x27\xa4\xd3\xcc\x7b\x82\xdb\x82\xc4\xb0\x3b\xc6\x30\xee\x06\x20\xaa\x93\x4a\xb7\x4c\xb0\x9e\xec\xfa\xcc\xad\x1b\x80\x21\xc7\xf1\x05\x90\x43\x2b\x4d\x7b\xd4\xf0\x86\xe3\xc9\x81\x2a\x09\x82\x06\xab\x1d\xc8\x5f\x1a\xaf\xbe\xb6\x79\xbf\x03\x00\x00\xff\xff\xf2\x97\xb3\x4e\xa3\x1b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 7075, mode: os.FileMode(436), modTime: time.Unix(1622402874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
