// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6f\x6b\xdb\x3e\x10\x7e\xdd\x7c\x0a\x91\x0f\xf0\x2b\xbf\xbd\x0c\x23\xd0\xd1\x30\xc6\x4a\x07\x69\x37\xf6\x2e\x9c\xe5\x9b\xa3\x46\xd6\x79\x27\xb9\x4b\xf6\xe9\x87\xf3\xc7\x8b\xec\xa4\x91\x2a\x6f\x2b\x94\x80\xac\xc7\xcf\x3d\xa7\x7b\x4e\xb2\x8c\x32\x0e\x8d\xb3\xe2\xed\x48\x88\x27\xca\xb6\xbf\x42\x18\x28\x71\x22\xc6\x59\xad\x74\x6e\x91\x9f\x91\xc7\xdb\xf1\x82\x16\x15\xb8\xe5\x44\x8c\x0b\xe5\x96\x75\xf6\x9f\xa4\xf2\x3a\x63\x72\x4b\x64\x4d\x85\x92\xd7\x3d\x48\x05\xec\x14\xe8\x45\x46\xe4\xac\x63\xa8\x26\xc2\x71\x8d\xdb\x67\x8c\xdf\x6b\xc5\x58\xb6\x11\x34\x7f\x12\x1c\x16\xc4\x9b\x89\xb8\xfd\xf0\xf0\x71\x3f\x58\x31\x55\xc8\x4e\xa1\x9d\x88\xb1\x95\x0c\x4e\x2e\x77\xef\x9f\x8e\x76\xff\x8c\x79\x6d\x72\x30\x72\x33\x11\xf3\xd9\xed\xe7\xfb\xdb\x9b\xfb\xc7\xd1\x74\x74\x46\xe1\x65\x25\xdf\x94\x46\x49\x95\x3a\x08\xd9\xe7\xa4\x3b\xfc\x92\xbe\x8c\x11\x56\x54\xbb\x76\xa8\x1b\xe8\xfb\xbb\x4f\xef\x6e\xee\x46\x42\x18\x5a\x94\x60\x1d\xf2\x7e\xea\xd9\xb8\xf7\x51\x3c\x23\x5b\x45\xc6\x31\xc8\x55\xf8\xe2\x9c\x42\xfd\x9b\xf8\x57\xb8\xb1\x8e\x18\x43\x23\xf7\xe7\xf7\xe2\xba\x58\x4a\x0f\xb3\xf9\x97\xd9\xfc\x64\x31\x39\x70\x8a\x0c\x19\x3c\x5f\x4f\x7b\x99\x97\x44\xe5\xe0\x20\x4a\x55\x07\xf0\x4a\x3b\x74\xde\x72\x5e\xc0\x55\x8a\x1d\x76\xe3\x12\x38\xf7\xec\xd0\x19\x6e\x88\x63\xad\x78\xc8\x1e\x53\x95\xd1\xda\x6e\x8c\x0c\xce\x9f\x0f\x99\x0a\x11\xdf\x08\x0e\xb6\x66\x28\x31\xd2\x4e\x5d\x4c\x0a\x7f\xc5\xb4\xde\x84\x12\x1f\x4d\x8e\xb7\xc2\xec\xeb\xe3\x6c\x7e\xbf\x75\x6d\xaf\x94\x70\xed\x90\x0d\xe8\x05\x23\xe4\x1b\xbf\x9e\x24\xd5\xc6\x4d\xc4\xff\x17\xa5\x68\x2a\x0a\x65\x8a\x50\x31\xde\xf4\x3f\xbe\x23\xbc\xe0\x81\xc3\xa6\x87\xc8\x91\x7b\x9e\x87\x48\xa9\x02\x5c\xa3\xac\x1d\x05\x33\xfb\xf3\xfb\xed\xba\x17\x4a\x60\x27\xab\x98\x9e\x55\xb3\x55\x84\x27\xa1\x07\x39\x51\x99\xb6\xce\x69\x88\xe0\x9a\xc7\x11\x81\x1d\x4d\x3f\x11\x54\xc2\x01\xe5\xfc\xae\xe2\x91\x4e\x5b\xb5\xc1\x1e\x6a\x4a\x2a\xb2\x1b\xf5\x20\x17\x5b\xc3\x55\x84\xa0\x9f\xc8\xf4\xe6\xa4\x1c\x11\xa2\x87\x51\x12\xe7\x92\xb4\x46\xd9\x6c\xb7\xa1\xa2\x4e\xe1\x52\x0c\xb6\xe3\x61\x94\xa8\x22\x0c\xde\x47\x25\xb5\xfa\x5a\xeb\x66\x21\xd0\xc6\x54\x71\x17\x94\x12\x01\x63\xa9\x4c\x8e\x6c\xc3\x97\xe1\x08\x90\xc6\xdc\xac\x67\x81\x2e\x42\x7a\x17\x93\xce\x6f\x89\x0b\x30\xca\xc6\xc6\xe0\xe3\x52\xe2\xc8\xc0\x2a\xf9\x44\x59\xb0\xb9\x8f\xe6\xa7\xeb\x87\x3c\x8f\x95\xde\x42\xd2\xd9\xb3\xba\x59\xcc\x38\xfa\xdf\x98\x01\xd4\xeb\xa6\xab\x85\x1f\x50\xfa\xa8\xf4\x18\xca\xe6\xb8\x12\xbb\x06\x47\xa0\x01\x22\xa0\x88\x06\xd8\x81\xa4\xb3\x47\xee\xe1\x3d\xd0\x10\x11\x90\x44\x1b\xd1\x01\x3b\xa0\x01\xba\x10\x68\x8c\xe4\x6f\x21\x03\xb0\x3b\x70\xb1\xec\x07\x48\x0a\xbb\x3c\x24\x31\xfc\x94\xdb\x83\xbc\xf2\x2b\x81\x41\xe5\x49\x97\x46\x5e\x02\x7f\x80\x89\x4d\x60\x0b\x49\xfa\x46\x70\x72\xa5\xb4\x0e\x37\x4f\x07\x30\xdc\x57\xc2\x8e\xd0\x81\x5d\x05\xe7\xa1\x03\x49\xc9\x43\xae\x0a\xe5\x40\x37\x39\xd5\xca\x06\xef\x27\x27\x60\x03\x98\x49\x12\x47\x7b\xb9\xc5\xa4\xf0\x13\x17\x91\xbd\xd4\x47\xa4\x70\x37\xef\x0b\x3e\xc9\xb7\x93\x53\x18\x1d\x96\x55\x28\xe1\x61\x6e\x0a\xdf\x0a\x37\x25\x54\x55\x78\x72\x3d\x40\x0a\xf3\xb6\x55\xc4\xd4\xb5\x07\x48\xf2\x15\xd8\x65\x46\xed\x3d\x5f\xc8\x2d\xa6\x07\x18\xf2\x72\xb6\x42\xb6\x64\x40\x77\x3f\x3c\x5f\xd1\xac\x2c\xca\x9a\x31\xea\x9a\xad\x07\xf9\x4b\x97\x6d\x2f\x2d\xde\xaf\x00\x00\x00\xff\xff\x37\xd8\x63\x27\xb1\x19\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6577, mode: os.FileMode(436), modTime: time.Unix(1603841438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
