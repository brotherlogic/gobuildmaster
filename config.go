// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\xde\x7c\x05\xe1\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xc4\x35\xc5\xd1\x0e\x29\x37\xee\xd7\x17\xf2\x45\xab\x8b\x13\x73\x42\xb5\x5d\x60\x11\x80\x9e\xa3\x33\x67\x48\x1e\x8e\x28\x67\x5c\x40\x17\xbc\xfa\xf1\x46\xa9\x2f\x94\x1d\xfe\x2a\xe5\xa0\xc2\xa5\x5a\x64\x8d\xb1\xb9\x47\xde\x21\x2f\x0e\xe3\x05\x6d\x6a\x08\xe5\x52\x2d\x0a\x13\xca\x26\xfb\x4e\x53\xf5\x3e\x63\x0a\x25\xb2\xa5\xc2\xe8\xf7\x13\x48\x0d\x1c\x0c\xd8\x4d\x46\x14\x7c\x60\xa8\x97\x2a\x70\x83\x87\xdf\x18\xbf\x36\x86\xb1\xea\x32\x68\xff\x69\x08\x58\x10\xef\x97\xea\xee\xfe\xf3\xaf\xa7\xc1\x9a\xa9\x46\x0e\x06\xfd\x52\x2d\xbc\x66\x08\xba\x3c\x3e\xff\xf6\xe6\xf8\x9f\x31\x6f\x5c\x0e\x4e\xef\x97\x6a\xbd\xba\xfb\xfd\xe1\xee\xc3\xc3\xe3\xcd\xed\xcd\x0b\x0a\xaf\x2b\x79\x32\x16\x35\xd5\xe6\x2c\xe4\x54\x93\xf1\xf0\x6b\xfa\x32\x46\xd8\x52\x13\xba\xa1\x71\xa2\xbf\x7c\xfc\xed\xa7\x0f\x1f\x6f\x94\x72\xb4\xa9\xc0\x07\xe4\x53\xe8\x8b\x79\x9f\xb2\xd8\x21\x7b\x43\x2e\x30\xe8\x6d\xfc\xe4\x5c\x42\xfd\x3f\xf9\x6f\x71\xef\x03\x31\xc6\x66\x3e\x8c\x9f\xe4\x75\x75\x29\x7d\x5e\xad\xff\x58\xad\x2f\x2d\xa6\x27\x86\x0a\x43\xc9\x88\x2f\xaf\xa7\x93\xcc\x6b\xa2\x9e\x2c\xd5\xf5\x3e\x56\x52\x3f\x7a\x56\x41\xbd\xe7\x26\x88\xc9\x21\x80\x68\x8a\x46\x80\x37\xee\xed\xd1\x53\x5e\x16\xf0\xee\xba\x02\x59\xfa\xbd\xe8\x7f\xc1\xb3\xe6\xd0\x75\x5d\xc4\x71\x5c\x03\xe7\x03\xcf\x1a\x0d\xb7\xc4\x52\xbf\x3c\xd7\x94\xa9\xce\xe8\xd9\xef\x9d\x8e\x2e\xec\x10\x72\xab\x94\xdc\xad\x4f\xec\x25\x82\x0d\xa5\x2e\x51\x62\x7a\x13\x50\x4a\x06\x90\xef\xda\x1f\x45\x47\xe2\x18\x93\xc2\x7f\x74\x2b\x99\xeb\x8f\x31\x29\xfc\x35\xd3\x73\xb4\xc3\xf5\x82\xe5\x06\xb7\xfa\xf3\x71\xb5\x7e\x38\x1c\x2e\x93\xcd\x84\xcf\x01\xd9\x81\xdd\x30\x42\x3e\xb2\x3a\x4d\x8d\x0b\x4b\xf5\xfd\x55\x29\x96\x8a\xc2\xb8\x22\x56\xcc\x20\x5c\x2e\xe7\xcd\xbd\x4c\xef\x88\x0d\x1b\x72\x9b\xe3\x3a\x5a\xaa\x05\xe7\xc6\xd7\x16\xf6\x8b\xeb\x4e\x98\x21\xb2\xb0\x8d\x1b\x20\x52\x56\x0c\x3e\xa3\x6e\x02\x45\x33\x0f\xe3\xa7\x1d\xc8\x24\x95\xc8\xf3\xac\x66\xda\x99\xb6\xfb\x89\x2f\xc2\x04\x72\x61\xda\x7d\x93\xd3\x1c\xc9\xb5\x3f\x0b\x12\xeb\x85\xcb\xd7\xe2\x7a\xf5\xf3\xea\xfe\xd3\xe3\xe6\xd3\xfa\xfe\xe1\xf1\xd4\x44\xdc\x26\x4e\xf3\x79\x31\xc6\x1e\x0a\xfd\xf0\x88\x49\x8e\x4f\xa4\x5d\xb9\x42\x83\x9c\x40\xae\x96\xf4\x9d\xa0\x1f\xfb\x1b\x99\x7e\x58\x8c\x8a\x7c\x70\x29\x15\x63\x53\x8c\x9a\x38\xd7\x64\x2d\xea\x60\xc8\xc5\x8a\xba\x84\x4b\xa9\xeb\x91\x87\x51\xa3\x11\xf8\xc8\x14\x95\x74\xfa\x34\xd6\xb6\x13\x81\x5e\xb2\x59\xc6\xa0\x94\x0c\x18\x2b\xe3\x72\x64\x1f\x3f\x0d\x3d\x40\x1a\x73\x3b\x9f\x05\x06\x81\xf4\x31\x26\x9d\xdf\x13\x17\xe0\x8c\x97\xe6\x30\xc4\x25\xed\x6f\xf0\x46\x7f\xa1\x2c\x7a\x73\xf7\xe2\xd3\xf5\x43\x9e\x4b\xa5\x77\x90\x74\xf6\xac\x69\x27\x53\x46\xff\x0d\x33\x83\x7a\xdb\xba\x5a\x7c\xcf\x34\x45\xa5\xe7\x50\xb5\xed\x92\x74\x0e\x7a\xa0\x19\x32\x20\x81\x01\x8e\x20\xe9\xec\xc2\x56\x61\x02\x9a\x23\x03\xd2\xe8\x05\x0e\x38\x02\xcd\xe0\x42\x60\x51\xc8\xdf\x41\x66\x60\x0f\x10\xa4\xec\x67\x48\x0a\xbb\x3e\x17\x31\xbe\x99\x9e\x40\xde\xf8\x96\xc2\x60\xf2\xa4\xeb\xd6\x41\x01\xff\x02\x27\x2d\x60\x07\x49\x6f\x61\x02\xf8\x6d\x34\xfb\x08\x92\xd6\x21\x17\x26\x80\x6d\x95\x58\xe3\xa3\x5d\xfc\x02\x6c\x86\x25\xac\x89\xc5\x3b\xa8\xc3\xa4\xf0\x13\x17\x42\x07\x1b\x22\x52\xb8\xdb\xe7\x45\xf7\xcf\x5d\x70\x0a\x63\xc0\xaa\x8e\x25\x3c\xc7\xa6\xf0\x6d\x71\x5f\x41\x5d\xc7\x17\x77\x00\x48\x61\x3e\x6c\x50\xc9\xba\x1e\x00\xd2\x1a\x42\xbd\x6d\xa2\xab\xdc\x8f\x9e\xc7\x0c\x93\x37\xe3\x0e\xac\xc9\x41\x70\x45\x72\x01\x96\x76\xa7\x67\x5c\xc8\xd8\xe4\x45\xf4\x65\xf9\x08\x92\xc2\xee\x03\xc9\xb8\x07\x80\x34\x3b\xd0\xdb\x78\x37\x38\xc6\xa6\xf0\x7d\x6d\xb0\x89\x56\xd9\x05\xa7\xaf\xaf\x27\x70\xd4\x08\xdf\x1a\xbe\x61\xd2\xf9\xb5\x45\x10\xdc\xba\x4d\x40\x49\xb7\x8f\x8d\x8d\x67\xee\x82\xe7\x79\x4f\x96\xbf\x21\x27\xb7\x18\xe0\xcb\x8c\xba\xaf\x3f\x31\xdf\xec\x06\x80\x39\x3f\x43\xd6\xc8\x9e\x1c\xd8\xd7\x9c\x32\xf2\x76\xd4\xa3\x6e\x18\x45\x9f\x1e\x26\x90\xff\xe8\x03\xc4\x6b\x93\xf7\x4f\x00\x00\x00\xff\xff\x43\xcb\x33\x65\x6c\x21\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8556, mode: os.FileMode(436), modTime: time.Unix(1646960916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
