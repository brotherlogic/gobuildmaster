// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xdc\xfc\x0a\x91\x1f\xb0\xb2\x7d\x0c\x23\xd0\xd1\x30\xc6\x4a\x07\x69\x37\xf6\x2d\x9c\xe5\x9b\xa3\x46\xd6\x79\x27\x39\x4b\xf6\xeb\x87\xf3\xe2\xc6\x2f\x69\xa4\xca\xdb\x0a\x25\x20\xdf\xe3\xe7\x9e\xd3\xbd\xc8\x32\xca\x38\x34\xce\x8a\xf7\x23\x21\x9e\x28\xd9\xfd\x0a\x61\x20\xc7\x89\x18\x27\xa5\xd2\xa9\x45\x5e\x23\x8f\x77\xeb\x19\x2d\x0a\x70\xcb\x89\x18\x67\xca\x2d\xcb\xe4\x8d\xa4\xfc\x3a\x61\x72\x4b\x64\x4d\x99\x92\xd7\x1d\x48\x01\xec\x14\xe8\x45\x42\xe4\xac\x63\x28\x26\xc2\x71\x89\xbb\x67\x8c\x3f\x4b\xc5\x98\xd7\x1e\x54\x7f\x12\x1c\x66\xc4\xdb\x89\xb8\xfd\xf4\xf0\xf9\xb0\x58\x30\x15\xc8\x4e\xa1\x9d\x88\xb1\x95\x0c\x4e\x2e\xf7\xef\x9f\x8e\xf6\xff\x8c\x69\x69\x52\x30\x72\x3b\x11\xf3\xd9\xed\xd7\xfb\xdb\x9b\xfb\xc7\xd1\x74\x74\x46\xe1\x65\x25\x3f\x94\x46\x49\x85\x3a\x0a\x39\xc4\xa4\xbd\xfc\x92\xbe\x84\x11\x56\x54\xba\x7a\xa9\xed\xe8\xc7\xbb\x2f\x1f\x6e\xee\x46\x42\x18\x5a\xe4\x60\x1d\xf2\xc1\xf4\xac\xdf\x07\x2f\xd6\xc8\x56\x91\x71\x0c\x72\xe5\xbf\x39\x7d\xa8\xff\xe3\xff\x0a\xb7\xd6\x11\xa3\xaf\xe7\x4d\xfb\x8e\x5f\x17\x53\xe9\x61\x36\xff\x36\x9b\xf7\x26\x93\x03\xa7\xc8\x90\xc1\xf3\xf9\x74\x90\x79\x49\x54\x0a\x0e\x82\x54\xb5\x00\xaf\x2c\x87\xd6\x5b\xce\x0b\xb8\x8a\x29\x87\xfd\xba\x04\x4e\x1b\xe5\xd0\x5a\xae\x88\x43\x4b\xf1\x18\x3d\xa6\x22\xa1\x8d\xdd\x1a\xe9\x1d\xbf\x26\x64\x2a\x44\x78\x23\x38\x96\x35\x43\x8e\x81\xe5\xd4\xc6\xc4\xf0\x17\x4c\x9b\xad\x2f\xf1\x89\x71\x78\x29\xcc\xbe\x3f\xce\xe6\xf7\xbb\xaa\xed\xa4\x12\x6e\x1c\xb2\x01\xbd\x60\x84\x74\xdb\xcc\x27\x49\xa5\x71\x13\xf1\xf6\xa2\x14\x4d\x59\xa6\x4c\xe6\x2b\xa6\x61\xfe\xd7\x27\xc2\x0b\x35\x70\x1c\x7a\x88\x1c\x38\xf3\x1a\x88\x98\x2c\xc0\x0d\xca\xd2\x91\x37\x73\xd3\xbe\xdb\xae\x3b\xae\x78\x76\xb2\x82\x69\xad\xaa\x51\xe1\x1f\x84\x0e\xa4\x27\x33\x6d\x99\xd2\x10\xce\x55\x8f\x03\x1c\x3b\x31\xef\x71\x2a\xe2\x80\x72\x7e\xaa\x34\x48\xa7\xb5\x5a\xef\x1a\xaa\x52\x2a\xb0\x1b\x75\x20\x17\x5b\xc3\x55\x80\xa0\xdf\xc8\xf4\xae\x57\x8e\xf0\xd1\xc3\x28\x89\x53\x49\x5a\xa3\xac\xc6\xad\xaf\xa8\x3e\x5c\x4c\x81\xed\x79\x18\x25\xaa\x80\x02\xef\xa2\xa2\x5a\x7d\xa9\x75\xb5\x11\x68\x43\xb2\xb8\x0d\x8a\xf1\x80\x31\x57\x26\x45\xb6\xfe\xdb\x70\x02\x88\x63\xae\xf6\x33\x43\x17\x20\xbd\x8d\x89\xe7\xb7\xc4\x19\x18\x65\x43\x7d\x68\xe2\x62\xfc\x48\xc0\x2a\xf9\x44\x89\x77\x71\x9f\xd8\xc7\xeb\x87\x34\x0d\x95\x5e\x43\xe2\xd9\x93\xb2\xda\xcc\x30\xfa\x67\xcc\x00\xea\x75\xd5\xd5\xfc\x0f\x28\x5d\x54\xbc\x0f\x79\x75\x5c\x09\xdd\x83\x13\xd0\x00\x1e\x50\x40\x03\x6c\x41\xe2\xd9\x03\x67\x78\x07\x34\x84\x07\x24\xd1\x06\x74\xc0\x16\x68\x80\x2e\x04\x1a\x03\xf9\x6b\xc8\x00\xec\x0e\x5c\x28\xfb\x11\x12\xc3\x2e\x8f\x41\xf4\x3f\xe5\x76\x20\xaf\xfc\x4a\x60\x50\x69\xd4\xa5\x51\x23\x80\xbf\xc0\x84\x06\xb0\x86\x44\x7d\x23\x38\xb9\x52\x5a\xfb\x17\x4f\x0b\x30\xdc\x57\xc2\x9e\xd0\x81\x5d\x79\xc7\xa1\x05\x89\x89\x43\xaa\x32\xe5\x40\x57\x31\xd5\xca\x7a\xcf\x93\x1e\xd8\x00\xc5\x24\x89\x83\x6b\xb9\xc6\xc4\xf0\x13\x67\x81\xbd\xb4\x89\x88\xe1\xae\xde\xe7\x7d\x92\xaf\x8d\x63\x18\x1d\xe6\x85\x2f\xe1\xd1\x36\x86\x6f\x85\xdb\x1c\x8a\xc2\x3f\xb8\x0d\x40\x0c\xf3\xae\x55\x84\xe4\x75\x03\x10\x77\x34\x95\xab\xd2\x3b\xca\xcf\xd6\xf1\x55\xb4\x06\xad\x52\x08\xb8\xfe\xe8\x81\x45\x75\x14\xb0\xcb\x84\xea\x1b\x4e\x9f\xfb\xdb\x06\x60\xc8\x6b\xe9\x02\xd9\x92\x01\xdd\xfe\xe4\x7e\x45\x9b\xb6\x28\x4b\xc6\xa0\x0b\xc6\x0e\xe4\x1f\x5d\x33\xbe\xb4\x79\x7f\x02\x00\x00\xff\xff\xd9\x77\xc3\xf9\xab\x1a\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6827, mode: os.FileMode(436), modTime: time.Unix(1604094070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
