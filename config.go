// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x96\xe1\x8a\xdb\x30\x0c\xc7\x3f\x2f\x4f\x21\xfa\x00\x3b\xf6\x35\x8c\xc2\x8d\x86\x31\x76\x74\xd0\xbb\x8d\x7d\x2b\x8e\xa3\xa5\x5e\x13\x2b\x93\xe5\xd2\xbc\xfd\x68\x9b\x74\xe7\xa4\xbd\x24\xeb\xc6\x15\x4a\x41\x91\xaa\x9f\xe4\xbf\xe4\x58\x63\x05\xad\x38\x78\x1f\x01\xfc\xa4\xf4\xf8\x0b\x60\x55\x89\x31\xcc\x52\x6f\x8a\xcc\x21\xef\x90\x67\x47\x7b\x4e\xeb\x4a\xc9\x26\x86\x59\x6e\x64\xe3\xd3\xb7\x9a\xca\xbb\x94\x49\x36\xc8\x05\xe5\x46\xdf\xf5\x42\x2a\xc5\x62\x54\xb1\x4e\x89\xc4\x09\xab\x2a\x06\x61\x8f\xc7\x67\x8c\xbf\xbc\x61\x2c\xcf\x04\x87\x8f\x56\x82\x39\x71\x1d\xc3\xe2\xd3\xe3\xe7\xc6\x58\x31\x55\xc8\x62\xd0\xc5\x30\x73\x9a\x95\xe8\xcd\xe9\xff\xe7\xd1\xe9\xcb\x98\x79\x9b\x29\xab\xeb\x18\x56\xc9\xe2\xeb\x72\x71\xbf\x7c\x8a\xe6\xd1\x95\x0a\x87\x2b\xf9\x61\x0a\xd4\x54\x99\xb6\x90\xa6\x27\x5d\xf3\x4b\xf5\xa5\x8c\x6a\x4b\x5e\xce\xa6\x2e\xe8\xc7\x87\x2f\x1f\xee\x1f\x22\x00\x4b\xeb\x52\x39\x41\x6e\x5c\xaf\x72\x37\x14\x3b\x64\x67\xc8\x0a\x2b\xbd\x1d\x7f\x38\x97\xa2\x5e\x87\x7f\x8b\xb5\x13\x62\x1c\x4b\x1e\xfa\x0f\xe8\xe6\x31\x59\x7d\x4b\x56\x97\x94\xc3\xde\xda\xb6\xf0\x4b\xc2\x69\xea\x19\xa2\xcf\x94\xa8\x49\xf8\x9d\x80\xbf\xd4\x7d\xd8\x84\xeb\xfc\x6f\x6e\x91\xfd\xc9\xae\x15\x67\x81\xec\x3b\xe6\x43\xe2\xa9\x23\xd7\x36\x8f\xa9\x4a\x69\xef\x6a\xab\x47\xb7\x2f\x0c\x99\x03\x4c\x1f\xf8\x76\x7c\x59\x95\x38\x71\x6c\xba\x31\xb7\xe4\xaf\x98\xf6\xf5\xd8\xc4\xcf\x9c\x07\x24\x93\x7c\x7f\x4a\x56\xcb\xe3\x28\xf6\x64\x83\x7b\x41\xb6\xaa\x58\x33\xaa\xac\x0e\xc5\xa3\xc9\x5b\x89\xe1\xdd\x20\x77\x41\x79\x6e\x6c\x3e\x96\x3c\x70\xff\xef\x6b\xfe\x05\xc1\xb7\x37\x19\x22\x4f\xbc\xc8\x82\x88\x5b\x8e\x1c\xf7\xa8\xbd\xd0\xe8\xcc\xa1\x7f\x7f\x07\xf7\x50\x46\x6e\xad\x8a\x69\x67\x0e\xfb\x7f\x7c\x13\x7a\x21\x3d\x1a\x00\xe7\x33\xfa\x17\x70\x87\xc7\x13\xc0\x9e\xb9\xdf\xf0\x8a\x71\xfd\xaa\x08\x32\xcc\xcf\xa5\xfd\x19\x98\xdf\x01\x00\x00\xff\xff\x64\xb7\xe4\x2a\x3b\x09\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2363, mode: os.FileMode(420), modTime: time.Unix(1593895361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
