// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x6a\xdb\x40\x0c\xc7\x3f\x2f\x4f\x71\xf8\x01\x56\xf6\xd5\x8c\x40\x47\xcc\x18\x2b\x19\xa4\xdd\xd8\xb7\x20\x9f\xd5\xf8\x16\xfb\x74\xd3\xe9\x4a\xfc\xf6\x23\x6e\x92\x36\x71\x52\x9f\xdd\xc0\x02\xc1\x20\x4b\xf2\x4f\x7f\x49\xc8\x1a\x2b\x68\xc5\xab\xcf\x13\xa5\xfe\x50\xde\x3e\x95\xb2\x50\x63\xaa\x92\x3c\x98\xaa\xf0\xc8\x4f\xc8\x49\x6b\x5f\xd1\xd2\x81\x94\xa9\x4a\x56\x46\xca\x90\x7f\xd4\x54\xdf\xe4\x4c\x52\x22\x57\xb4\x32\xfa\xa6\x13\xe2\x80\xc5\x40\xb5\xcc\x89\xc4\x0b\x83\x4b\x95\x70\xc0\xf6\x1d\xe3\xdf\x60\x18\xeb\x03\xc1\xf6\xa7\x41\x70\x45\xdc\xa4\x6a\xf6\xed\xfe\xfb\xce\xe8\x98\x1c\xb2\x18\xf4\xa9\x4a\xbc\x66\x10\x5d\x3e\xe7\x9f\xc6\x64\xba\xcf\x16\xbf\xb2\xc5\xb9\x5c\x8f\x0c\x35\x4a\xc9\x88\x2f\xe9\xb6\x7f\xc6\x22\xd8\x02\xac\x6e\x52\xb5\xc8\x66\x3f\xe7\xb3\xdb\xf9\xc3\x64\x3a\xb9\x20\x58\xbf\x30\x8f\xa6\x42\x4d\xce\xec\x75\xd9\x49\x7c\x6a\x7e\x4b\xae\x9c\x11\xd6\x14\xe4\x60\x3a\x05\xfd\x7a\xf7\xe3\xcb\xed\xdd\x44\x29\x4b\xcb\x1a\xbc\x20\xef\x5c\x2f\x72\xef\x28\x9e\x90\xbd\x21\x2b\x0c\x7a\x1d\xdf\xeb\x73\x51\xff\x87\x1f\x2a\x64\x89\x07\x7f\xe5\x3e\x55\x6a\x78\xb7\x8f\x55\x1b\xb6\x20\x67\x82\x46\x0f\x2f\x07\x6b\xf7\x49\xf6\x83\xab\x29\x58\x49\xd5\xa7\x5e\xfa\x35\x36\x5e\x88\x31\x16\xfc\xd8\xff\xaa\xcc\x67\x66\xa0\x8f\xbe\x60\x72\x39\x6d\x7c\x63\x75\x6c\x01\x27\x21\xef\xe9\xbc\x63\xda\x34\xb1\xdf\x7d\xe5\xdc\xa3\x5a\xf6\xfb\x21\x5b\xcc\xdb\x0d\xe8\xe8\x86\x1b\x41\xb6\x50\x2d\x19\xa1\x68\x46\xf6\xfc\x19\x91\x51\xa3\x19\x30\xb2\xdd\xa8\x77\x69\x17\xaa\x6a\xab\x03\xfa\x01\x1b\xdb\x09\x1a\x45\x10\x5b\xaa\x06\x2e\x92\xae\x6e\x07\x73\x7b\x73\xc6\x55\x5f\x93\x35\x42\xd1\x75\x1f\xb9\x5f\xeb\x5c\x5e\xbc\x6f\x1f\x7a\xf1\x71\x83\x3a\x0c\xe0\x3f\xf6\xef\x1e\x80\x4e\x17\x23\xd7\x7f\x7b\x73\xe2\xa7\xe7\xc5\xfb\x8d\xd3\xfe\x2f\x00\x00\xff\xff\xe0\xb4\x5c\x1e\x0b\x09\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2315, mode: os.FileMode(436), modTime: time.Unix(1575415297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
