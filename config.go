// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x6f\xdb\x36\x10\xfe\xdc\xfc\x0a\xc1\x3f\x60\xc5\x86\x62\x1f\x8c\x21\x40\xb7\x18\x5b\xb0\x22\x0d\x1c\x6f\xd8\x3e\x19\x27\xea\x22\xb3\xa6\x78\xea\x91\xcc\xe2\xfd\xfa\x41\x7e\x8b\x5e\xec\x98\xec\x69\x6d\x80\xc0\x00\x75\x0f\x9f\xbb\xe3\xf1\xe1\x89\xb2\xda\x7a\xb4\xde\x65\x3f\x5d\x65\xd9\x27\xca\xb7\xbf\x59\x66\xa1\xc2\x69\x36\xc9\x83\x36\x85\x43\x7e\x42\x9e\x6c\xc7\x4b\x5a\xd6\xe0\x57\xd3\x6c\x52\x6a\xbf\x0a\xf9\x77\x8a\xaa\xb7\x39\x93\x5f\x21\x1b\x2a\xb5\x7a\x3b\x80\xd4\xc0\x5e\x83\x59\xe6\x44\xde\x79\x86\x7a\x9a\x79\x0e\xb8\x7d\x96\x33\xc2\x9a\x82\x6f\x0d\x31\x7e\x0e\x9a\xb1\x3a\x3a\xd5\xfc\x29\xf0\x58\x12\x6f\xa6\xd9\xcd\xed\xc3\xef\xfb\xc1\x9a\xa9\x46\xf6\x1a\xdd\x34\x9b\x38\xc5\xe0\xd5\x6a\x47\x79\x1d\x33\xd3\x6f\x1f\x1f\x16\xcb\xc5\xdf\xf7\xb3\x53\xd3\xdd\xeb\xec\xdd\xcb\x5c\xcd\x3f\x63\x11\x6c\x01\x56\x6d\xa6\xd9\x7c\x76\xf3\xc7\xdd\xcd\xfb\xbb\x45\x67\xfc\xc7\x77\xed\x27\xd7\x57\x67\x52\x7b\x39\x85\x8f\xda\xa0\xa2\x5a\x1f\x32\xb8\x5f\x8c\xfe\x70\x52\x62\xfb\x21\xfc\xfa\xe1\xe3\xcf\xef\x3f\x5c\x65\x99\xa5\x65\x05\xce\x23\xef\x4d\xcf\xfa\xbd\xf7\xe2\x09\xd9\x69\xb2\x9e\x41\xad\xe3\xab\xe2\x14\xea\xdb\xf8\xbf\xc6\x8d\xf3\xc4\x18\xeb\x79\xd7\x3e\xbd\x60\x1f\x66\xf3\x3f\x67\xf3\x53\x35\xa6\x4c\x70\xfe\x87\xf3\x55\xb6\x0f\xf1\x52\x40\x8f\x86\xea\x7a\x13\x1b\x4e\xdb\x7a\xcc\x60\xda\xf3\x0a\x82\x29\xc0\x43\xd2\xf2\xf4\x00\x5f\xa8\x1e\xbd\x59\xce\x07\xf0\xe6\x72\x04\x69\xee\xb7\xac\xbf\x8e\x50\x8e\x11\xea\xe5\xb8\x76\xe3\x0a\xb8\xe8\x48\x58\x6f\x78\xab\xd3\xa7\x85\xf5\x62\x9a\x99\xea\x9c\x9e\xdd\xc6\xaa\xe8\x5c\x77\x21\xd7\x59\x76\x56\xd6\x2f\xb1\xaf\x10\x8c\x5f\xa9\x15\xa6\x68\xe0\x00\x24\xf1\x00\x8a\xa7\xe6\x61\xd2\xd1\xdc\xc7\x48\xf8\x1f\x19\x2a\x4c\x3c\x04\xfa\x18\x09\x7f\xcd\xf4\x1c\x2d\x7a\x2d\xe3\xf4\x8d\x34\xfb\x6b\x31\x9b\xdf\x6d\xcf\x9a\xc1\x66\xc2\x67\x8f\x6c\xc1\x2c\x19\xa1\xe8\xa9\x9f\xa2\x60\xfd\x34\xfb\xfe\x62\x28\x86\xca\x52\xdb\x32\x36\x98\x8e\xf9\xff\xd8\x40\xbd\x72\xe2\xfa\x25\xd9\xe5\xae\x8e\xa6\xd9\x84\x0b\xed\x6a\x03\x9b\xc9\x65\x71\xcc\x11\x39\xb1\x9d\xec\x20\x24\x15\x83\xcf\xa8\x82\xa7\x68\xe6\xae\xfd\xb0\x21\x19\xb8\x12\x79\xc4\xd5\x4c\x4f\xba\x69\x86\xe2\x93\x30\x80\x9c\x58\xf6\xd7\x4e\x0f\x17\x0a\x1a\xc3\xf1\xe6\x71\x82\xd3\x2d\xf3\x0b\x45\x39\x9f\xfd\x32\xbb\xbd\x5f\x2c\xef\xe7\xb7\x77\x8b\x7d\x83\x71\x2d\x5c\xef\x43\x55\xc6\x9e\x0e\x2f\xe6\x12\xd6\xa6\x5e\x13\x65\x71\x00\xe9\x26\xeb\x4d\x42\x17\xf6\x2f\x32\xb5\x3b\xca\x6d\x20\x5b\x21\xca\x62\x94\x88\x51\x11\x17\x8a\x8c\x41\xe5\x35\xd9\xd8\x08\x4e\xe1\x24\x49\xdc\xf1\x30\x2a\xd4\x09\x52\x31\x44\x89\x0e\x98\x60\x4c\xb3\x10\xe8\x52\x6a\xbe\x0f\x92\x78\xc0\x58\x69\x5b\x20\xbb\xf8\x65\x68\x01\x64\xcc\xcd\x7a\x96\xe8\x13\x42\xef\x63\xe4\xfc\x8e\xb8\x04\xab\x5d\xaa\x0f\x5d\x9c\x68\x33\x83\xd3\xea\x13\xe5\xd1\x3b\xb9\x65\x2f\x8f\x1f\x8a\x22\x35\xf4\x23\x44\xce\x9e\x87\x66\x31\xd3\xe8\x5f\x30\x23\x44\x6f\x1a\x55\x8b\x6f\x8b\x86\x28\xb9\x0f\x55\xd3\x11\xa5\xae\x41\x0b\x34\x82\x07\x94\x20\x80\x3d\x88\x9c\x3d\xf1\xc4\x1f\x80\xc6\xf0\x80\x14\xba\x04\x05\xec\x81\x46\x50\x21\x30\x98\xc8\x7f\x84\x8c\xc0\xee\xc1\xa7\xb2\x1f\x20\x12\x76\x75\x48\x62\x7c\xbf\x3c\x80\x7c\xe1\x8b\x08\x83\x2e\x62\xae\x5e\xe3\x12\xf8\x0f\xd8\xd4\x04\x1e\x21\xf2\x16\xc6\x83\x5b\x47\xb3\xf7\x20\xb2\xde\xb7\xd4\x1e\x4c\x13\x89\xd1\x2e\x5a\xc5\x4f\xc0\x46\x28\x61\x45\x9c\xbc\x83\x8e\x18\x09\x3f\x71\x99\xa8\x60\x5d\x84\x84\xbb\x99\x2f\xba\x7f\x3e\x1a\x4b\x18\x3d\x56\x75\x2c\xe1\xc1\x56\xc2\xb7\xc6\x4d\x05\x75\x1d\x9f\xdc\x0e\x40\xc2\xbc\xdd\xa0\x29\x75\xdd\x01\xc8\x1a\x42\xb5\x0e\xd1\x59\x6e\x5b\x8f\x23\x86\xe2\xcd\xf8\x04\x46\x17\x90\x70\x0b\x72\x02\x26\xbb\xb6\xd3\xd6\xe7\xac\x8b\x32\xfa\x8a\xbc\x07\x91\xb0\x3b\x4f\x69\xdc\x1d\x80\x4c\x0e\xd4\x3a\x5e\x0d\x76\xb6\x12\xbe\xcf\x01\x43\x74\x94\x47\x63\x79\x7d\x3d\x82\xa5\x90\xf8\xd6\xf0\x82\x91\xf3\x2b\x83\x90\x70\xb1\x36\x00\x89\x2e\x18\x83\x89\x67\x3e\x1a\x8f\xf3\x9e\x9c\xfe\x86\x2c\x6e\x31\xc0\xad\x72\x3a\x7e\xe0\x89\xf9\x52\xd7\x01\x8c\xf9\xf1\xb1\x46\x76\x64\xc1\xbc\xa6\x94\x91\x97\x9c\x0e\x55\x60\x4c\xfa\xba\x30\x80\x7c\xa5\x6f\x0c\xa2\x73\xcc\x16\x0a\xaa\x3a\xf1\x2e\x7e\x80\x12\xf9\x10\xb4\x49\xb8\xe0\x68\x99\xbf\xca\xfa\x5f\x00\x00\x00\xff\xff\xbc\xff\xf8\x44\xd1\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8913, mode: os.FileMode(436), modTime: time.Unix(1659451352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
