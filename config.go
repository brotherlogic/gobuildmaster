// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xd1\x8a\x9c\x40\x10\x7c\x8e\x5f\xd1\xec\x07\xe4\xc8\xab\x84\x85\x0b\x2b\x21\xe4\xd8\xc0\xde\x25\xe4\x6d\x69\xc7\xce\x3a\x59\x9d\x9e\xf4\xf4\x1c\xeb\xdf\x87\x73\xf5\x88\xde\x6e\xd4\xdc\x43\x04\x11\xca\x29\xbb\xaa\xad\x72\xd6\x29\x39\x0d\xf0\x3e\x01\xf8\xc9\x79\xfb\x04\x70\x58\x53\x0a\xab\x3c\xda\xaa\x08\x24\x8f\x24\xab\x16\x3f\xf0\xde\xa3\x96\x29\xac\x0e\x56\xcb\x98\xbf\x35\x5c\xdf\xe4\xc2\x5a\x92\x54\x7c\xb0\xe6\xe6\x05\xc5\xa3\xa8\xc5\x6a\x9f\x33\x6b\x50\x41\x9f\x82\x4a\xa4\xf6\x9d\xd0\xaf\x68\x85\xea\x67\x05\x4f\x97\x41\xa5\x03\x4b\x93\xc2\xe6\xd3\xfd\xe7\x0e\xf4\xc2\x9e\x44\x2d\x85\x14\x56\xc1\x08\xaa\x29\xcf\xdf\x5f\x27\xe7\x5b\xa8\x88\xae\x40\x67\x9a\x14\x76\xd9\xe6\xeb\x76\x73\xbb\x7d\x48\xd6\xc9\x15\x87\xd3\x4e\x7e\xd8\x8a\x0c\x7b\xdb\x1b\xe9\x76\x32\x86\xff\xe6\x2f\x17\xc2\x23\x47\x7d\x86\xc6\x42\x3f\xde\x7d\xf9\x70\x7b\x97\x00\x38\xde\xd7\x18\x94\xa4\x3b\x7a\x55\x77\xa7\xe2\x91\x24\x58\x76\x2a\x68\x8e\xf3\x7f\xce\x25\xd6\xff\xd1\x7f\xa4\x26\x28\x0b\xcd\x55\x3e\x3c\x3f\x91\x9b\xfb\x6c\xf7\x2d\xdb\x5d\x4a\x8e\x44\xe7\x7a\xe3\x97\x82\xd3\xf9\x99\x52\x5f\xa0\xe2\x22\xf9\x23\xc2\x3f\xe6\x7e\xb8\x84\xeb\xfa\xdf\xbc\x26\xf6\x67\xdc\xa0\x14\x83\xd8\x8f\xe0\xa7\xc1\x4b\x2b\xd7\x2f\x4f\xd8\xe7\x7c\x0a\x8d\x33\xb3\xd7\x37\xa4\xac\x01\x96\x17\xbe\xaf\xaf\x60\x4d\x0b\x6b\x33\xe6\xbc\x66\xbe\x17\x3e\x35\x73\x07\xff\x71\x78\x22\x32\xd9\xf7\x87\x6c\xb7\x6d\xab\xf8\x22\x36\x74\x52\x12\x87\xd5\x5e\x08\x8b\x66\x18\x1e\xc3\xd1\x69\x0a\xef\x92\xf5\xef\x00\x00\x00\xff\xff\xac\x2e\xf1\x09\x0a\x06\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1546, mode: os.FileMode(420), modTime: time.Unix(1593565025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
