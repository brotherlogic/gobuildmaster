// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x61\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x3a\x75\xc9\xbf\x1f\x8e\x13\xd7\x6f\x6d\x64\x79\xa6\x85\x12\x38\xdd\x23\x3f\xf7\xa6\x47\xb6\xd1\x86\xc1\xb0\x15\x9f\x66\x42\xfc\xc6\xe8\xf8\x2b\x84\x91\x19\x2c\xc4\x3c\x72\x3a\x8d\x2d\xd0\x33\xd0\xfc\x68\x4f\x70\x93\x4b\xde\x2e\xc4\x3c\xd1\xbc\x75\xd1\x47\x85\xd9\x55\x44\xc8\x5b\xa0\x14\x13\xad\xae\x3a\x90\x5c\x12\x6b\x99\x6e\x22\x44\xb6\x4c\x32\x5f\x08\x26\x07\xc7\x35\x82\x3f\x4e\x13\x64\x15\x83\xe2\x4f\x49\x86\x04\xe9\xb0\x10\xb7\x5f\x1f\xbe\x9d\x8c\x39\x61\x0e\xc4\x1a\xec\x42\xcc\xad\x22\xc9\x6a\x5b\xee\xbf\x9c\x95\xff\x04\xb1\x33\xb1\x34\xea\xb0\x10\xeb\xd5\xed\x8f\xfb\xdb\x9b\xfb\xc7\xd9\x72\xf6\x4a\x84\x97\x23\x79\xd2\x29\x28\xcc\xf5\x39\x90\x53\x4e\xda\xe6\xb7\xe2\x8b\x08\xe4\x0e\x1d\x57\xa6\x36\xd1\x2f\x77\xdf\x3f\xdf\xdc\xcd\x84\x30\xb8\xc9\xa4\x65\xa0\x93\xeb\xab\xbc\x4f\x2c\x9e\x81\xac\x46\xc3\x24\xd5\xce\xbf\x38\x7d\xa8\xf7\xe1\x2f\x53\x20\xf6\x27\x5e\x73\x5f\x0a\x31\xbc\xda\xcd\xac\x0d\xeb\xe8\x1e\xd0\x85\xbe\x7d\x58\xad\x7f\xae\xd6\x7d\x9d\x4b\xce\x98\xf3\x26\xe7\xc6\x55\xe8\x0c\x2f\xc4\xf5\x45\xf6\x3b\x38\x58\x46\x02\x5f\xe2\x4d\xff\xff\xca\xb9\xa7\x07\x2e\xb1\x8f\x09\xf3\x08\xf7\xf6\x60\x94\x6f\x00\x2d\xc8\x98\xca\xe7\x84\xfb\x83\xef\x73\x6b\xce\x17\xb2\xb6\xfa\xf5\xb8\x5a\xdf\x1f\x27\xa0\x93\x37\xd8\x33\x90\x91\xe9\x86\x40\xc6\x87\xc0\x9a\x97\x14\x09\x14\xe8\x01\x2d\xdb\x45\x8d\xca\x9d\x4b\xd3\x22\x0f\x60\x07\x4c\x6c\x07\x14\xc4\xc0\x37\x54\x25\x29\x9e\x77\xf3\x56\x99\x8b\x9c\x07\x46\x9f\xa1\xd1\x8c\xde\x71\x37\xdc\x27\xd7\xb7\x0f\x17\xe9\xc3\x1e\x94\x1b\xc0\xbf\xe9\xdf\x15\x80\x4e\x15\x3d\xc7\xbf\xd0\x1c\xff\xee\x79\xf1\x0e\x90\xf6\x6a\xe4\x8b\x65\xff\x86\xad\xbb\x07\x1f\x96\x8d\x5d\x96\x55\xc2\xbc\xe7\xfd\x89\x64\x06\x03\x55\xbd\x8d\x99\x68\xd2\x22\x00\xaa\x8b\xe0\xf9\x8e\xd8\x30\x2f\x67\x81\xd5\x3a\x8b\x55\x24\xd5\xce\xe5\x43\x25\xae\x8e\x0a\x1c\x3a\x92\x3a\xbe\x0e\xae\x1b\x81\x42\x8a\x15\xa6\x29\x28\xd6\x68\x7c\x03\xe8\xc3\x85\xb7\x7c\xb9\x9b\x8c\x63\xff\xe6\x69\x41\xc6\xe8\x44\xb9\x55\x02\x3c\x60\xea\xda\x98\x49\x6e\xf2\xe5\x43\xfe\x4a\xc3\x76\xde\x25\x5c\xd9\xc3\xf3\x7e\xdc\x22\xd5\x96\x7d\xc3\x6e\x00\x26\x9a\x57\x82\x4c\x9b\x18\xa8\x1d\x73\xdd\x1a\xa2\x8b\xbe\xf9\xb6\x48\x89\x34\xda\xb6\xce\x8b\xde\xc5\x29\x79\xe4\x84\x0a\x6c\x5f\xe5\xeb\x2b\xcb\xf2\x4c\x98\x88\x43\x86\xed\x63\xb3\x6d\x7f\x3d\x03\x6f\x68\xbc\xf7\x78\x17\xaf\x4f\xda\x24\x3d\x0c\xea\x4b\x13\x0e\x5f\x43\x17\x5b\x45\xa8\x56\xc6\x1e\x7c\x56\xa6\x60\x87\x9d\x3c\x15\x64\xcc\xc1\xa7\xce\x9d\xe4\x7f\xcd\xea\x40\x02\x55\x2b\x73\x56\xab\x51\x1f\x42\x1a\x17\x66\x96\x76\xe7\x9d\xc1\x16\x64\xbc\x74\x44\xae\x50\x82\x61\x05\x7c\xc1\x8c\x79\xfe\xb0\x5b\xc7\xbb\xdf\x36\x06\x7d\x06\xf0\xff\x06\x10\xfc\x3e\xe2\xf9\x0e\x50\xf0\xf1\xbe\x19\xd5\x9c\xa7\x7f\x09\xff\x17\x00\x00\xff\xff\x5a\x5b\x9a\x5f\x07\x15\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5383, mode: os.FileMode(436), modTime: time.Unix(1581277785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
