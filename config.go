// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x6a\x1b\x3b\x10\xfd\x7d\xfd\x14\xc2\x0f\x70\xc3\xfd\x6b\x2e\x86\x94\x98\x52\x1a\x52\x70\xd2\xd2\x7f\x66\x56\x3b\x5d\x2b\x96\x35\xdb\xd1\x6c\x6a\xbf\x7d\x59\x7f\x6c\xbd\xbb\x76\x2c\x45\xdb\x0f\x28\x01\x59\x67\xcf\x99\xd1\x9c\xd1\x20\x67\x9c\xa0\x13\xaf\xfe\x1f\x29\xf5\x4c\xd9\xee\xaf\x52\x0e\xd6\x38\x51\xe3\xac\x32\x36\xf7\xc8\x2f\xc8\xe3\xdd\x7a\x41\x8b\x12\x64\x39\x51\xe3\xc2\xc8\xb2\xca\xfe\xd5\xb4\xbe\xc9\x98\x64\x89\x6c\xa9\x30\xfa\xa6\x07\x29\x81\xc5\x80\x5d\x64\x44\xe2\x85\xa1\x9c\x28\xe1\x0a\x77\xbf\x31\x7e\xaf\x0c\xe3\xba\x51\x50\xff\xd3\x20\x58\x10\x6f\x27\xea\xee\xc3\xe3\xc7\xc3\x62\xc9\x54\x22\x8b\x41\x3f\x51\x63\xaf\x19\x44\x2f\xf7\xdf\x9f\x8e\xf6\xff\x19\xf3\xca\xe5\xe0\xf4\x76\xa2\xe6\xb3\xbb\xcf\x0f\x77\xb7\x0f\x4f\xa3\xe9\xe8\x42\x84\xd7\x23\xf9\x66\x2c\x6a\x2a\xcd\x31\x90\x43\x4e\xba\xcb\xaf\xc5\x97\x31\xc2\x8a\x2a\x69\x96\xba\x42\xdf\xdf\x7f\x7a\x77\x7b\x3f\x52\xca\xd1\x62\x0d\x5e\x90\x0f\x5b\x2f\xea\x3e\xa8\x78\x41\xf6\x86\x9c\x30\xe8\x55\xf8\xe1\x9c\x43\xfd\x1d\xfd\x2b\xdc\x7a\x21\xc6\x50\xe5\xed\xfd\x3d\x5d\x57\x4b\xe9\x71\x36\xff\x32\x9b\x9f\x2d\x26\x01\x31\xe4\xc8\xe1\xe5\x7a\x3a\x84\x79\x2d\xa8\x1c\x04\xa2\xa2\xea\x00\xde\x68\x87\xce\x57\x2e\x07\xf0\x4f\x8a\x1d\xf6\xeb\x1a\x38\x6f\xd9\xa1\xb3\x5c\x13\xc7\x5a\xf1\x98\x3d\xa6\x32\xa3\x8d\xdf\x3a\x1d\x9c\xbf\x36\x64\xaa\x54\x7c\x23\x38\xda\x9a\x61\x8d\x91\x76\xea\x62\x52\xf8\x4b\xa6\xcd\x36\x94\xf8\x64\x73\xbc\x15\x66\x5f\x9f\x66\xf3\x87\x9d\x6b\x7b\xa5\x84\x1b\x41\x76\x60\x17\x8c\x90\x6f\xdb\xf5\xa4\xa9\x72\x32\x51\xff\x5d\x0d\xc5\x52\x51\x18\x57\x84\x06\xd3\xda\xfe\xdb\x6f\x84\x57\x3c\x70\xbc\xf4\x10\x39\xf2\xce\x6b\x21\x52\xaa\x00\x37\xa8\x2b\xa1\x60\xe6\xf6\xfe\x7e\xbb\xee\x49\x09\xec\x64\x25\xd3\x8b\xa9\xaf\x8a\xf0\x24\xf4\x20\x67\x2a\xd3\x57\x39\x0d\x21\xae\xfe\x39\x42\xd8\xc9\xf6\x33\xa2\x12\x06\x94\xcb\xb7\x4a\x8b\x74\xda\x44\x1b\xec\xa1\xba\xa4\x22\xbb\x51\x0f\x32\x5c\x39\x30\x6a\xe2\x5c\x93\xb5\xa8\xeb\xcb\x32\x54\xd2\x39\x5c\x8a\x3d\xf6\x3c\x8c\x1a\x4d\x84\x3d\xfb\xa8\xa4\x46\x5d\x59\x5b\x97\x05\xfa\x98\x1a\xec\x82\x52\x14\x30\xae\x8d\xcb\x91\x7d\xf8\x31\x9c\x00\xd2\x98\xeb\xf3\x2c\x50\x22\x42\xef\x62\xd2\xf9\x3d\x71\x01\xce\xf8\x58\x0d\x6d\x5c\x8a\x8e\x0c\xbc\xd1\xcf\x94\x05\x5b\xf3\x64\x7f\x7a\xfc\x90\xe7\xb1\xa1\x37\x90\x74\xf6\xac\xaa\x0f\x33\x8e\xfe\x17\x66\x80\xe8\x6d\xdd\x64\xc3\xc7\x8b\x3e\x2a\x5d\xc3\xba\x1e\x36\x62\xcf\xe0\x04\x34\x80\x02\x8a\x68\x80\x1d\x48\x3a\x7b\xe4\x0d\xdc\x03\x0d\xa1\x80\x34\xfa\x88\x0e\xd8\x01\x0d\xd0\x85\xc0\x62\x24\x7f\x03\x19\x80\x5d\x40\x62\xd9\x8f\x90\x14\x76\x7d\x4c\x62\xf8\x8c\xda\x83\xbc\x71\xc6\x67\x30\x79\xd2\x93\x4f\x2b\x81\x3f\xc0\xc5\x26\xb0\x81\x24\x4d\xf8\xa2\x57\xc6\xda\x70\xf3\x74\x00\xc3\x0d\x75\x7b\x42\x01\xbf\x0a\xce\x43\x07\x92\x92\x87\xdc\x14\x46\xc0\xd6\x39\xb5\xc6\x07\xdf\x27\x67\x60\x03\x98\x49\x13\x47\x7b\xb9\xc1\xa4\xf0\x13\x17\x91\xbd\xb4\x8d\x48\xe1\xae\xbf\x17\x3c\xc9\x37\x9b\x93\xce\x1c\xfc\x32\xa3\xe6\x05\x29\xe4\x7d\xac\x05\x18\xf2\xd9\xaf\x44\xf6\xe4\xc0\x1e\x3b\x4a\x8a\x93\x3c\xea\x8a\x31\xea\x05\xa7\x07\xf9\x43\xef\x38\xaf\x9d\xde\xcf\x00\x00\x00\xff\xff\xa5\x2c\x87\x94\x0c\x18\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6156, mode: os.FileMode(436), modTime: time.Unix(1603325017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
