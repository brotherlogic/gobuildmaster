package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6f\xe3\x36\x0c\xfe\xdc\xfc\x0a\x21\x3f\x60\xc5\xf6\x31\x18\x02\x74\x6b\x30\x14\x2b\xb2\x22\xcd\x0e\xf7\x2d\x90\x65\xd6\x51\x23\x8b\x3e\x8a\xce\x25\xf7\xeb\x0f\xce\x8b\x1b\xdb\x49\x23\x55\xbe\xbb\x02\x45\x00\x99\x8f\x1f\x92\xe2\x43\xc9\xb4\xda\x32\x58\x76\xe2\xcf\x81\x10\xaf\x98\xec\x7e\x85\xb0\x32\x87\x91\x18\x26\xa5\x36\xa9\x03\x5a\x03\x0d\x77\xeb\x19\x2e\x0a\xc9\xcb\x91\x18\x66\x9a\x97\x65\xf2\x9b\xc2\xfc\x36\x21\xe4\x25\x90\xc1\x4c\xab\xdb\x0e\xa4\x90\xc4\x5a\x9a\x45\x82\xc8\x8e\x49\x16\x23\xc1\x54\xc2\xee\x19\xc1\x97\x52\x13\xe4\xb5\x07\xd5\x9f\x92\x0c\x19\xd2\x76\x24\xee\x1f\x9e\xff\x3d\x2c\x16\x84\x05\x10\x6b\x70\x23\x31\x74\x8a\x24\xab\xe5\xfe\xfd\xe3\xc1\xfe\x9f\x20\x2d\x6d\x2a\xad\xda\x8e\xc4\x6c\x72\xff\xff\xf4\xfe\x6e\x3a\x1f\x8c\x07\x17\x22\xbc\x1e\xc9\x8b\x36\xa0\xb0\xd0\xc7\x40\x0e\x39\x69\x2f\xbf\x17\x5f\x42\x20\x57\x58\x72\xbd\xd4\x76\xf4\x9f\xc7\xff\xfe\xba\x7b\x1c\x08\x61\x71\x91\x4b\xc7\x40\x07\xd3\x8b\x7e\x1f\xbc\x58\x03\x39\x8d\x96\x49\xaa\x95\xff\xe6\x9c\x43\xfd\x1a\xff\x57\xb0\x75\x8c\x04\xbe\x9e\x37\xed\x3b\x7e\x5d\x2d\xa5\xe7\xc9\xec\xd3\x64\x76\xae\x98\x5e\x48\xe6\xc0\x4b\x02\xb8\x5c\x4f\x87\x30\xaf\x05\x95\x4a\x96\x41\x51\xb5\x00\x1f\x94\x43\xeb\x2d\x97\x03\xb8\x89\x91\xc3\x7e\x5d\x49\x4a\x1b\x72\x68\x2d\x57\xc4\xa1\x52\x3c\x66\x8f\xb0\x48\x70\xe3\xb6\x56\x79\xe7\xaf\x09\x19\x0b\x11\xde\x08\x8e\xb2\xde\x95\x41\x98\x9c\xda\x98\x18\xfe\x82\x70\xb3\xf5\x25\x3e\x31\x0e\x97\xc2\xe4\xf3\x7c\x32\x9b\xee\x54\xdb\x29\x25\xd8\x30\x90\x95\x66\x41\x20\xd3\x6d\xb3\x9e\x14\x96\x96\x47\xe2\xf7\xab\xa1\x18\xcc\x32\x6d\x33\xdf\x60\x1a\xe6\x3f\xea\x44\xb8\x2a\x80\xe3\x89\x07\x40\x81\x07\x5e\x03\x11\x53\x02\xb0\x01\x55\x32\x7a\x33\x37\xed\xbb\xbd\xba\xe3\x8a\x67\x1b\x2b\x08\xd7\xba\x3a\x27\xfc\x93\xd0\x81\x9c\x29\x4b\x57\xa6\xd8\x87\x73\xd5\xe3\x00\xc7\x4e\xcc\xc3\xb5\x32\x9b\xfc\x3d\x79\x78\x9a\x2f\x9e\x66\x0f\xd3\xf9\xe1\xfc\x18\x47\x6e\x73\x55\x30\x81\x8d\xa6\x03\xb9\x1a\xc9\x4d\xc0\x09\xf8\x0d\x08\xff\x18\xb6\x62\xdb\xa9\x5d\xf8\xc8\x9d\x40\x21\xa5\x0a\x8d\x01\xc5\x1a\xad\x6f\x50\xe7\x70\x31\x79\xdd\xf3\x10\x28\xd0\x01\xf2\xed\xa2\xa2\xba\x78\x69\x4c\xb5\x11\xe0\x42\x6a\xb4\x0d\x8a\xf1\x80\x20\xd7\x36\x05\x72\xfe\xdb\x70\x02\x88\x63\xae\xf6\x33\x03\x0e\x08\xbd\x8d\x89\xe7\x77\x48\x99\xb4\xda\x85\xfa\xd0\xc4\x45\xe9\x5b\x3a\xad\x5e\x31\xf1\x16\xf7\x89\x7d\x7c\xfc\x32\x4d\x43\x43\xaf\x21\xf1\xec\x49\x59\x6d\x66\x18\xfd\x1b\xa6\x87\xe8\x4d\xd5\xd5\xfc\xef\x1e\x5d\x54\xbc\x0f\x79\x75\x13\x09\xdd\x83\x13\x50\x0f\x1e\x60\x40\x03\x6c\x41\xe2\xd9\x03\x4f\xe8\x0e\xa8\x0f\x0f\x50\x81\x0b\xe8\x80\x2d\x50\x0f\x5d\x48\x1a\x08\xe4\xaf\x21\x3d\xb0\xb3\xe4\x50\xf6\x23\x24\x86\x5d\x1d\x93\xe8\x7f\x87\xed\x40\x3e\xf8\x01\x40\x52\xa7\x51\xf3\xa0\x46\x02\xbf\x4a\x1b\x9a\xc0\x1a\x12\xf5\x05\xc0\x6a\xa5\x8d\xf1\x17\x4f\x0b\xd0\xdf\x37\xc0\x9e\x90\xa5\x5b\x79\xe7\xa1\x05\x89\xc9\x43\xaa\x33\xcd\xd2\x54\x39\x35\xda\x79\x9f\x27\x67\x60\x3d\x88\x49\x21\x05\x6b\xb9\xc6\xc4\xf0\x23\x65\x81\xbd\xb4\x89\x88\xe1\xae\xde\xe7\x7d\x93\xaf\x8d\x63\x18\x19\xf2\xc2\x97\xf0\x68\x1b\xc3\xb7\x82\x6d\x2e\x8b\xc2\x3f\xb9\x0d\x40\x0c\xf3\xae\x55\x84\xd4\x75\x03\x10\x77\x35\x55\xab\xd2\x3b\xcb\x6f\xd6\xf1\x2a\x5a\x4b\xa3\x53\x19\x30\xdc\x38\x03\x8b\x1b\xaf\x69\xcb\x09\xe9\x34\xf3\x1e\xce\xb6\x20\x31\xec\x8e\x31\x8c\xbb\x01\x88\xea\xa4\xd2\x2d\x13\xac\x87\xb6\x3e\x23\xe9\x06\xa0\xcf\x49\x7b\x01\xe4\xd0\x4a\xd3\x1e\x35\x7c\xe0\x78\x72\xa0\x4a\x82\xa0\x99\x69\x07\xf2\x93\x26\xa7\xef\x6d\xde\xf7\x00\x00\x00\xff\xff\xb6\xd8\x78\xd2\x7e\x1b\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
