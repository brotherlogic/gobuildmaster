// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\xde\x7c\x85\xe0\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xcc\x35\xcd\xd1\x0e\x29\x37\xee\xd7\x17\xf2\x45\xab\x8b\x13\x73\x32\x6a\xbb\xc0\x22\x00\x3d\x47\x67\xce\x90\x3c\x1c\x51\xde\xfa\x88\x3e\x86\xec\xc7\x9b\x2c\xfb\x42\xf9\xe1\x6f\x96\x79\xd8\xe2\x3c\x9b\xe5\xb5\x75\x45\x40\xde\x21\xcf\x0e\xe3\x25\xad\x2a\x88\xeb\x79\x36\x2b\x6d\x5c\xd7\xf9\x77\x86\xb6\xef\x73\xa6\xb8\x46\x76\x54\x5a\xf3\x7e\x04\xa9\x80\xa3\x05\xb7\xca\x89\x62\x88\x0c\xd5\x3c\x8b\x5c\xe3\xe1\x37\xc6\xaf\xb5\x65\xdc\xb6\x19\x34\xff\x0c\x44\x2c\x89\xf7\xf3\xec\xee\xfe\xf3\xaf\xa7\xc1\x8a\xa9\x42\x8e\x16\xc3\x3c\x9b\x05\xc3\x10\xcd\xfa\xf8\xfc\xdb\x9b\xe3\x7f\xc6\xa2\xf6\x05\x78\xb3\x9f\x67\xcb\xc5\xdd\xef\x0f\x77\x1f\x1e\x1e\x6f\x6e\x6f\x5e\x50\x78\x5d\xc9\x93\x75\x68\xa8\xb2\x67\x21\xa7\x9a\x0c\x87\x5f\xd3\x97\x33\xc2\x86\xea\xd8\x0e\x0d\x13\xfd\xe5\xe3\x6f\x3f\x7d\xf8\x78\x93\x65\x9e\x56\x5b\x08\x11\xf9\x14\xfa\x62\xde\xa7\x2c\x76\xc8\xc1\x92\x8f\x0c\x66\x93\x3e\x39\x97\x50\xff\x4f\xfe\x1b\xdc\x87\x48\x8c\xa9\x99\xf7\xe3\x47\x79\x5d\x5d\x4a\x9f\x17\xcb\x3f\x16\xcb\x4b\x8b\xe9\x89\x61\x8b\x71\xcd\x88\x2f\xaf\xa7\x93\xcc\x6b\xa2\x9e\x1c\x55\xd5\x3e\x55\x52\x37\x7a\x52\x41\x9d\xe7\x2a\xc4\x14\x10\x41\x34\x45\x03\xc0\x1b\xf7\xf6\xe0\x29\x2f\x0b\x78\x77\x5d\x81\x2c\xfd\x4e\xf4\xbf\xe0\x59\x53\xe8\xba\x2e\xe2\x38\x6e\x80\x8b\x9e\x67\x0d\x86\x1b\x62\xa9\x5f\x9e\x6b\xca\x54\xe5\xf4\x1c\xf6\xde\x24\x17\xb6\x0f\xb9\xcd\x32\xb9\x5b\x9f\xd8\xd7\x08\x2e\xae\xcd\x1a\x25\xa6\x37\x02\x69\x32\x80\x62\xd7\xfc\x28\x3a\x12\x87\x18\x0d\xff\xd1\xad\x64\xae\x3f\xc4\x68\xf8\x2b\xa6\xe7\x64\x87\xeb\x04\xcb\x0d\x6e\xf1\xe7\xe3\x62\xf9\x70\x38\x5c\x46\x9b\x09\x9f\x23\xb2\x07\xb7\x62\x84\x62\x60\x75\x86\x6a\x1f\xe7\xd9\xf7\x57\xa5\x38\x2a\x4b\xeb\xcb\x54\x31\xbd\x70\xb9\x9c\x37\xf7\x32\xa9\x6e\x97\x23\xb2\xb0\x55\xeb\x21\x34\xab\x02\x9f\xd1\xd4\x91\x92\x99\xfb\xf1\xe3\x2e\x63\x94\x4a\xe2\x99\x55\x31\xed\x6c\xd3\xe1\xa4\x17\x61\x04\xb9\x30\xb5\xa1\x2e\x68\x8a\xe4\x9a\x9f\x05\x89\x75\xc2\xe5\xeb\x6d\xb9\xf8\x79\x71\xff\xe9\x71\xf5\x69\x79\xff\xf0\x78\x6a\x14\x6e\x95\xd3\xdc\x2c\x18\xa1\xf7\x8c\x20\x57\x95\xbc\x13\xb4\x3a\x7f\x23\xd3\x0f\xb3\x81\xb6\x83\x01\x64\x29\x0e\xc0\x68\x88\x0b\x43\xce\xa1\x89\x96\x7c\xaa\xa8\x4b\x38\x4d\x5d\x8f\x3c\x8c\x06\xad\x60\xfb\x8e\x51\x2a\x63\xaf\x9d\x6b\x26\x02\x83\x64\x8d\x0e\x41\x9a\x0c\x18\xb7\xd6\x17\xc8\x21\x7d\x1a\x3a\x00\x1d\x73\x33\x9f\x25\x46\x81\xf4\x21\x46\xcf\x1f\x88\x4b\xf0\x36\x48\x73\xe8\xe3\x54\xfb\x1b\x82\x35\x5f\x28\x4f\xde\xdc\x9d\x78\xbd\x7e\x28\x0a\xa9\xf4\x16\xa2\x67\xcf\xeb\x66\x32\x65\xf4\xdf\x30\x13\xa8\x77\x8d\xab\xa5\xb7\x23\x63\x94\x3e\x87\x6d\xd3\x89\x48\xe7\xa0\x03\x9a\x20\x03\x12\x18\xe0\x00\xa2\x67\x17\x9e\xd0\x23\xd0\x14\x19\x90\xc1\x20\x70\xc0\x01\x68\x02\x17\x02\x87\x42\xfe\x16\x32\x01\x7b\x84\x28\x65\x3f\x43\x34\xec\xe6\x5c\xc4\xf4\x1e\x76\x04\x79\xe3\x0b\x00\x83\x2d\x54\x37\x99\xbd\x02\xfe\x05\x5e\x5a\xc0\x16\xa2\x7a\x03\x88\x66\x63\x9d\x4b\xdf\x3c\x03\xc0\x74\xef\x00\x47\xc2\x08\x61\x93\x5c\x87\x01\x44\x53\x87\xc2\x96\x36\x82\x6b\x6a\xea\x6c\x48\x3e\x4f\x2e\xc0\x26\xd8\x4c\x86\x58\xbc\x97\x5b\x8c\x86\x9f\xb8\x14\x7a\x69\x1f\xa1\xe1\x6e\x9e\x97\xdc\xc9\xb7\xc1\x1a\xc6\x88\xdb\x2a\x95\xf0\x1c\xab\xe1\xdb\xe0\x7e\x0b\x55\x95\x5e\xdc\x1e\x40\xc3\x7c\xb0\x0a\xc9\xba\xee\x01\x74\xad\xa9\xd9\xd4\xc9\x55\xee\x46\x4f\x63\xcb\xea\xcd\xb8\x03\x67\x0b\x10\xdc\x91\x5c\x80\xe9\x2e\xee\xac\x8f\x39\xdb\xa2\x4c\xbe\x11\x1f\x40\x34\xec\x21\x92\x8c\xbb\x07\xd0\xd9\x81\xd9\xa4\xbb\xc1\x31\x56\xc3\xf7\xb5\xc6\x3a\x59\x65\x1b\xac\x5f\x5f\x4f\xe0\xa9\x16\xbe\xbf\x7c\xc3\xe8\xf9\x8d\x43\x10\x5c\xbb\x8d\x40\xaa\xe6\xa3\x96\x34\x1e\xe7\x60\xd5\x31\x0f\x61\x9d\x53\xfb\x99\x25\xe5\xe3\x58\x0f\x30\xe5\xf7\xbe\x0a\x39\x90\x07\xf7\x9a\x5b\x25\xf6\x4e\x01\x4d\xcd\x28\xba\xe3\x1f\x41\xfe\xa3\x9b\xfe\xd7\x26\xef\x9f\x00\x00\x00\xff\xff\x6b\x8e\x0c\x2a\xd5\x20\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8405, mode: os.FileMode(436), modTime: time.Unix(1637935586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
