// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x8b\xe3\x36\x10\xfe\x7c\xf9\x15\x22\x3f\xa0\x47\x4b\xe9\x87\x50\x16\xae\xdd\x50\x96\x1e\xdb\x23\xb7\x2d\xfd\x16\xc6\xf2\xac\xa3\x8b\xa2\xf1\x8d\xe4\x74\xd3\x5f\x5f\x9c\x17\x9f\x5f\x72\x6b\xcd\xca\x74\xe1\x16\x96\x80\x3c\x8f\x9f\x79\x46\xa3\xd1\x58\x72\xc6\x05\x74\xc1\xab\x9f\x67\x4a\x7d\xa2\xec\xf8\xab\x94\x83\x1d\x2e\xd4\x3c\xab\x8c\xcd\x3d\xf2\x1e\x79\x7e\x1c\x2f\x68\x5d\x42\xd8\x2c\xd4\xbc\x30\x61\x53\x65\xdf\x69\xda\xbd\xcd\x98\xc2\x06\xd9\x52\x61\xf4\xdb\x01\xa4\x04\x0e\x06\xec\x3a\x23\x0a\x3e\x30\x94\x0b\x15\xb8\xc2\xe3\x33\xc6\xcf\x95\x61\xdc\x35\x1e\xd4\x7f\x1a\x02\x16\xc4\x87\x85\xba\xbd\xfb\xf8\xfb\x79\xb0\x64\x2a\x91\x83\x41\xbf\x50\x73\xaf\x19\x82\xde\x9c\xde\x7f\x33\x3b\xfd\x33\xe6\x95\xcb\xc1\xe9\xc3\x42\xad\x96\xb7\x7f\xde\xdf\xbe\xbb\x7f\x98\xdd\xcc\xbe\x75\x85\xed\xf1\x9f\x7e\x8c\xd2\x3e\xae\xf1\xd1\x58\xd4\x54\x9a\x8b\xc4\x73\xb4\xfa\xc3\xcf\x29\xcf\x18\x61\x4b\x55\x68\x86\xfa\x12\x7e\x7b\xff\xc7\x2f\xef\xde\xcf\x94\x72\xb4\xde\x81\x0f\xc8\x67\xd3\xb1\x39\xdb\x23\x7b\x43\x2e\x30\xe8\x6d\xfc\xb4\x5d\x43\xbd\x8e\xff\x5b\x3c\xf8\x40\x8c\xb1\x9e\x77\xed\x07\x7e\x8d\x26\xd9\xc7\xe5\xea\xaf\xe5\xea\x5a\x9a\x3d\x32\xec\x30\x6c\x18\xf1\xeb\x99\x76\x96\x39\x26\xea\xd1\x52\x59\x1e\x62\x25\xb5\xad\x27\x15\xd4\x7a\x6f\x82\x98\x1c\x02\x88\xa6\xa8\x07\x78\xe1\xaa\xef\xbd\xe5\xeb\x02\xde\x8c\x2b\x90\xb9\xdf\xb2\x16\xad\x89\x57\x95\x3a\xae\xeb\x34\xae\x81\xf3\x4e\x19\xeb\x0d\xd7\xc4\x2f\xdc\x3e\x72\xa6\x32\xa3\x27\x7f\x70\x3a\x3a\xd6\x5d\xc8\x8d\x52\x2f\xde\xbc\x36\x08\x36\x6c\xf4\x06\x25\x75\x70\x00\x4a\xf1\x00\xf2\x7d\xfd\x50\xb4\x7f\xf6\x31\x29\xfc\xa7\x02\x26\xdb\x08\xfa\x98\x14\xfe\x92\xe9\x29\xba\xe8\xb5\x8c\xe5\x0b\x69\xf9\xf7\xc3\x72\x75\x7f\xdc\x6f\x06\x8b\x09\x9f\x02\xb2\x03\xbb\x66\x84\xbc\x57\xfd\x34\x55\x2e\x2c\xd4\xf7\xa3\x52\x2c\x15\x85\x71\x45\xac\x98\x8e\xf9\x74\x75\x61\xb4\xf1\x69\xed\xba\x61\x4d\x6e\x7d\xca\xa3\x85\x9a\x73\x6e\x7c\x69\xe1\x30\x1f\x2f\x8e\x19\x22\x0b\x7b\xbe\x0e\x22\x25\x63\xf0\x09\x75\x15\x28\x9a\xb9\x6b\x3f\x6c\x4a\x06\xae\x44\x6e\x71\x25\xd3\xde\xd4\x0d\x51\x7c\x10\x06\x90\x2b\xd3\xfe\xdc\xee\xe1\xab\x9c\xa6\x70\xbc\x7e\x2c\x70\xba\x65\x2e\xcf\xd3\xd5\xf2\xd7\xe5\xdd\x87\x87\xf5\x87\xd5\xdd\xfd\xc3\xb9\xe7\xb8\x49\x4c\x81\x4b\xa2\xc6\x6e\x18\x6d\xf3\x88\x04\x10\x7c\xfc\x20\xb2\xb0\x78\x0e\x20\xa3\x21\x7d\x23\x68\xdf\xfe\x45\xa6\x1f\xe6\xbd\x20\x1f\x2b\x98\x8a\x29\x61\x8c\x9a\x38\xd7\x64\x2d\xea\x60\xc8\xc5\x8a\xba\x86\x4b\x89\xeb\x89\x87\x51\xa3\x11\xd4\x98\x21\x2a\x69\x67\xaa\xac\xad\x27\x02\xbd\x64\xb1\xf4\x41\x29\x1e\x30\xee\x8c\xcb\x91\x7d\xfc\x34\xb4\x00\x69\xcc\xf5\x7c\x16\x18\x04\xd2\xfb\x98\x74\x7e\x4f\x5c\x80\x33\x5e\xea\x43\x17\x97\xb4\xbe\xc1\x1b\xfd\x89\xb2\xe8\xc5\xdd\xb2\x4f\xd7\x0f\x79\x2e\x95\xde\x40\xd2\xd9\xb3\xaa\x9e\x4c\x19\xfd\x17\xcc\x04\xea\x6d\x5d\xd5\xe2\xfb\xa9\x21\x2a\xdd\x87\x5d\xdd\x4a\x49\xe7\xa0\x05\x9a\xc0\x03\x12\x14\xc0\x1e\x24\x9d\x5d\xd8\x2a\x0c\x40\x53\x78\x40\x1a\xbd\xa0\x02\xf6\x40\x13\x54\x21\xb0\x28\xe4\x6f\x20\x13\xb0\x07\x08\x52\xf6\x0b\x24\x85\x5d\x5f\x82\x18\xdf\x68\x0f\x20\x2f\xfc\x82\x61\x30\xf9\x14\x27\xd3\xa7\x68\xfc\x03\x4e\x1a\xc0\x06\x92\xde\xc2\x04\xf0\xdb\x68\xf6\x1e\x24\xad\x43\x2e\x4c\x00\x5b\x2b\xb1\xc6\x47\x57\xf1\x2b\xb0\x09\x52\x58\x13\x8b\x57\x50\x83\x49\xe1\x27\x2e\x84\x15\xac\x8b\x48\xe1\xae\xdf\x17\xdd\x3f\x37\xc6\x29\x8c\x01\x77\x65\x2c\xe1\xc5\x36\x85\x6f\x8b\x87\x1d\x94\x65\x7c\x70\x3b\x80\x14\xe6\xe3\x02\x95\xe4\x75\x07\x90\xd6\x10\xea\x6d\x15\x1d\xe5\xb6\xf5\x34\xc5\x30\x79\x31\xee\xc1\x9a\x1c\x04\xc7\x27\x57\x60\x69\xe7\x7d\xc6\x85\x8c\x4d\x5e\x44\x9f\xad\xf7\x20\x29\xec\x3e\x90\x8c\xbb\x03\x48\x2b\x07\x7a\x1b\x5f\x0d\x4e\xb6\x29\x7c\x9f\x2b\xac\xa2\x55\x36\xc6\xe9\xf9\xf5\x08\x8e\x2a\xe1\x57\xc3\x17\x4c\x3a\xbf\xb6\x08\x82\x13\xb9\x01\x28\xe9\x64\xb2\xb2\xf1\xcc\x8d\xf1\x34\xdf\xc9\xf2\x2f\xe4\xe4\x16\x03\xfc\x26\xa3\xe6\x66\x28\xe6\x8a\xaf\x03\x98\xf2\xd6\xb2\x44\xf6\xe4\xc0\x3e\x57\x29\x23\x4f\x47\x3d\xea\x8a\x51\x74\x2d\x31\x80\xfc\x4f\x97\x13\xcf\x4d\xde\x7f\x01\x00\x00\xff\xff\x6c\x73\x70\xc4\x97\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8855, mode: os.FileMode(436), modTime: time.Unix(1647204728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
