// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6a\xdb\x4c\x10\xbd\xfe\xfc\x14\x8b\x1f\xe0\x0b\xb9\x15\xc5\x90\x12\x53\x4a\x43\x0a\x4e\x5a\x7a\x67\x56\xab\x89\xbc\xb5\xb4\xa3\xce\xce\xa6\xf6\xdb\x17\x59\xb6\xa2\xbf\x58\x2b\xa9\xa2\x81\x60\x98\x9d\xb3\x3a\xf3\x7b\x64\x1b\x6d\x18\x0c\x5b\xf1\x61\x21\xc4\x4f\x0c\x4f\x9f\x42\x18\x99\x42\x20\x96\xa1\xd3\x49\x64\x81\x5e\x81\x96\x27\x7b\x8c\xdb\x4c\xf2\x2e\x10\xcb\x58\xf3\xce\x85\xff\x2b\x4c\x6f\x42\x42\xde\x01\x25\x18\x6b\x75\xd3\x82\x64\x92\x58\xcb\x64\x1b\x22\xb2\x65\x92\x59\x20\x98\x1c\x9c\xce\x08\x7e\x39\x4d\x90\x96\x0c\xf2\x3f\x25\x19\x62\xa4\x63\x20\xee\x3f\x3f\x7d\x39\x1b\x33\xc2\x0c\x88\x35\xd8\x40\x2c\xad\x22\xc9\x6a\x57\xdc\xbf\x5a\x14\xff\x04\x91\x33\x91\x34\xea\x18\x88\xcd\xfa\xfe\xdb\xe3\xfd\xdd\xe3\xf3\x62\xb5\x78\x27\xc2\xfe\x48\x5e\x74\x02\x0a\x33\x7d\x09\xe4\x9c\x93\xa6\xf9\x5a\x7c\x21\x81\xdc\xa3\xe3\xd2\xd4\x24\xfa\xe9\xe1\xeb\xc7\xbb\x87\x85\x10\x06\xb7\xa9\xb4\x0c\x74\x76\x7d\x97\xf7\x99\xc5\x2b\x90\xd5\x68\x98\xa4\xda\xfb\x17\xa7\x0b\xf5\x6f\xf8\xcb\x04\x88\xfd\x89\x57\xdc\x57\x42\x0c\xaf\x76\x3d\x6b\xc3\x3a\xba\x03\xd4\xd3\xb7\x4f\xeb\xcd\xf7\xf5\xa6\xab\x73\xc9\x19\x73\xb9\xe4\xd2\xb8\x0a\x9d\xe1\x40\xdc\xf6\xb2\xdf\xc3\xd1\x32\x12\xf8\x12\xaf\xfb\xff\x55\xce\x1d\x3d\xd0\xc7\x3e\x22\xcc\x42\x3c\xd8\xa3\x51\xbe\x01\x34\x20\x53\x2a\x9f\x11\x1e\x8e\xbe\xcf\xad\x38\xf7\x64\x6d\xfd\xe3\x79\xbd\x79\x3c\x4d\x40\x2b\x6f\x70\x60\x20\x23\x93\x2d\x81\x8c\x8e\x23\x6b\x5e\x50\x24\x50\xa0\x07\xb4\x6c\x1b\x35\x29\x77\x2e\x49\xf2\x3c\x80\x1d\x30\xb1\x2d\xd0\x28\x06\xbe\xa1\x2a\x49\xd1\xb2\x9d\xb7\xd2\x9c\xe7\x7c\x64\xf4\x29\x1a\xcd\xe8\x1d\x77\xcd\x7d\x76\x7d\xfb\xaf\x97\x3e\x1c\x40\xb9\x01\xfc\xeb\xfe\x6d\x01\x68\x55\xd1\x73\xfc\x73\xcd\xf1\xef\x9e\x37\xef\x11\xd2\x5e\x8e\x7c\x7e\xec\xdf\xb0\x55\xf7\xd1\xcb\xb2\x76\xcb\xaa\x4c\x98\xf7\xbc\xbf\x90\x4c\x61\xa0\xaa\x37\x31\x33\x4d\x5a\x08\x40\x55\x11\xbc\xbc\x23\xd6\xcc\xab\xc5\xc8\x6a\x5d\xc4\x2a\x94\x6a\xef\xb2\xa1\x12\x57\x45\x8d\x1c\x3a\x92\x3a\xba\x1d\x5d\x37\x02\x85\x14\x29\x4c\x12\x50\xac\xd1\xf8\x06\xd0\x85\x1b\xdf\xf2\xc5\x6d\x32\x8a\xfc\x9b\xa7\x01\x99\xa2\x13\xc5\x55\x31\xf0\x80\xa9\x6b\x62\x66\x79\x93\x2f\x1e\xf2\x5b\x1a\xb6\xcb\x36\xe1\xd2\x3e\x3e\xef\xa7\x2b\x12\x6d\xd9\x37\xec\x1a\x60\xa6\x79\x25\x48\xb5\x89\x80\x9a\x31\x57\xad\x63\x74\xd1\x37\xdf\x16\x29\x96\x46\xdb\xc6\xbe\xe8\x3c\x9c\x93\x47\x46\xa8\xc0\x76\x55\xbe\x7a\xb2\x2a\x76\xc2\x4c\x1c\x52\x6c\xae\xcd\xa6\xfd\xfd\x0c\x5c\xd1\x78\xef\xf1\xce\xbf\x3e\x69\x13\x77\x30\xa8\x1e\xcd\x38\x7c\x35\x5d\x6c\x14\xa1\x3c\x99\xba\xf8\xac\x4c\xc0\x0e\xdb\x3c\x25\x64\xca\xe2\x53\x97\x4e\xf2\x7f\xcd\x6a\x41\x46\xaa\x56\xea\xac\x56\x93\x7e\x08\xa9\xbd\x30\xb3\xb4\x7b\xef\x0c\x36\x20\xd3\xa5\x23\x74\xb9\x12\x0c\x2b\xe0\x1b\xe6\xea\xf3\xff\x04\x00\x00\xff\xff\xd9\x0c\xb6\x3c\xe8\x12\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4840, mode: os.FileMode(436), modTime: time.Unix(1579707485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
