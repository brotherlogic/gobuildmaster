// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x6b\x23\x37\x10\xfe\x7c\xf9\x15\xc2\x3f\xa0\x47\x4b\xe9\x07\x53\x02\xd7\xc6\x94\xd0\x23\x3d\x7c\x69\xe9\x37\x33\xab\x9d\xac\x75\x96\x35\x7b\x23\xc9\x8d\xfb\xeb\xcb\xfa\xed\xf6\xc5\x8e\x35\xd1\x92\x06\x82\x41\x3b\xcf\x3e\x33\xa3\xd1\xa3\x59\xc9\x19\x17\xd0\x05\xaf\x7e\xbe\x51\xea\x0b\x15\xbb\x5f\xa5\x1c\xac\x71\xaa\x26\x45\x34\xb6\xf4\xc8\x1b\xe4\xc9\x6e\xbc\xa2\x45\x0d\x61\x39\x55\x93\xca\x84\x65\x2c\xbe\xd3\xb4\x7e\x5f\x30\x85\x25\xb2\xa5\xca\xe8\xf7\x03\x48\x0d\x1c\x0c\xd8\x45\x41\x14\x7c\x60\xa8\xa7\x2a\x70\xc4\xdd\xb3\x82\x11\x56\x14\x43\x6b\x88\xf1\x6b\x34\x8c\xeb\x93\x53\xcd\x9f\x86\x80\x15\xf1\x76\xaa\xee\xee\x3f\xff\x7e\x18\xac\x99\x6a\xe4\x60\xd0\x4f\xd5\xc4\x6b\x86\xa0\x97\x7b\xca\xdb\x9b\xfd\x3f\x63\x19\x5d\x09\x4e\x6f\xa7\x6a\x3e\xbb\xfb\xf3\xe1\xee\xc3\xc3\x63\x67\xfc\xa7\x1f\xdb\x4f\x6e\x6f\x2e\xa4\xe3\x7a\xd8\x4f\xc6\xa2\xa6\xda\x1c\xa3\x3e\x24\xb0\x3f\x2c\x4a\x46\x3f\x84\xdf\x3e\xfe\xf1\xcb\x87\x8f\x37\x4a\x39\x5a\xac\xc1\x07\xe4\x83\xe9\x45\xbf\x0f\x5e\x6c\x90\xbd\x21\x17\x18\xf4\x2a\x7d\x26\xcf\xa1\xfe\x1f\xff\x57\xb8\xf5\x81\x18\x53\x3d\xef\xda\xcb\x8b\xec\xf3\x6c\xfe\xd7\x6c\x7e\xae\xcc\xb4\x8d\x3e\xfc\x70\xb9\xca\x0e\x21\x5e\x0b\xe8\xc9\x52\x5d\x6f\x53\xc3\x69\x5b\x8f\x19\x4c\xfb\xbd\x19\xc1\x94\x10\x40\x34\x3d\x3d\xc0\x2b\x57\x7c\xef\x2d\x97\x03\x78\x77\x3d\x02\x99\xfb\x2d\xeb\xb7\x11\xb7\x31\x42\xbd\x1e\xd7\x7e\x5c\x03\x97\x1d\x09\xeb\x0d\x37\xc4\x17\x84\xf5\x6a\x9a\x99\xea\x82\x9e\xfd\xd6\xe9\xe4\x5c\x77\x21\xb7\x4a\x5d\x94\xf5\x6b\xec\x4b\x04\x1b\x96\x7a\x89\x12\x0d\x1c\x80\x72\x3c\x80\x72\xd3\x3c\x14\x6d\xa7\x7d\x4c\x0e\xff\x13\xc3\x1a\x85\x9b\x40\x1f\x93\xc3\x5f\x33\x3d\x27\x8b\x5e\xcb\x58\xbe\x90\x66\x7f\x3f\xce\xe6\x0f\xbb\xbd\x66\xb0\x98\xf0\x39\x20\x3b\xb0\x0b\x46\x28\x7b\xea\xa7\x29\xba\x30\x55\xdf\x5f\x0d\xc5\x52\x55\x19\x57\xa5\x06\xd3\x31\x7f\xc3\xa6\xa7\xb5\xe3\x86\x05\xb9\xc5\xbe\x8e\xa6\x6a\xc2\xa5\xf1\xb5\x85\xed\xe4\xba\x38\x16\x88\x2c\x6c\x01\x3b\x88\x9c\x8a\xc1\x67\xd4\x31\x50\x32\x73\xd7\x7e\xd8\x90\x0c\x5c\x49\xdc\xe2\x6a\xa6\x8d\x69\x9a\xa1\xf4\x24\x0c\x20\x67\xa6\xfd\xa5\xdd\xc3\xc7\x92\xc6\x70\xbc\x79\x2c\x70\xba\x65\x2e\xaf\xd3\xf9\xec\xd7\xd9\xfd\xa7\xc7\xc5\xa7\xf9\xfd\xc3\xe3\xa1\xe7\xb8\xcd\x2c\x81\x63\xa1\xa6\x6e\x18\x6d\xf3\x84\x02\x48\x77\xa4\xa9\x6a\xa1\x78\x0e\x20\x57\x53\xfa\x4e\xd0\xbe\xfd\x8b\x4c\xed\x56\x74\x17\xdb\x4e\xc1\x54\x8a\x84\x31\x6a\xe2\x52\x93\xb5\xa8\x83\x21\x97\x1a\xd4\x39\x5c\x4e\x5e\xf7\x3c\x8c\x1a\x8d\x40\x63\x86\xa8\xac\x9d\x29\x5a\xdb\x4c\x04\x7a\xc9\x62\xe9\x83\x72\x3c\x60\x5c\x1b\x57\x22\xfb\xf4\x69\x68\x01\xf2\x98\x9b\xf9\xac\x30\x08\x42\xef\x63\xf2\xf9\x3d\x71\x05\xce\x78\xa9\x0f\x5d\x5c\xd6\xfa\x06\x6f\xf4\x17\x2a\x92\x17\x77\xcb\x3e\x3f\x7e\x28\x4b\x69\xe8\x27\x48\x3e\x7b\x11\x9b\xc9\x94\xd1\x7f\xc3\x8c\x10\xbd\x6d\x54\x2d\xbd\x9f\x1a\xa2\xf2\x7d\x58\x37\xad\x94\x74\x0e\x5a\xa0\x11\x3c\x20\x81\x00\xf6\x20\xf9\xec\xc2\x56\x61\x00\x1a\xc3\x03\xd2\xe8\x05\x0a\xd8\x03\x8d\xa0\x42\x60\x51\xc8\x7f\x82\x8c\xc0\x1e\x20\x48\xd9\x8f\x90\x1c\x76\x7d\x4c\x62\x7a\xa3\x3d\x80\xbc\xf2\x0b\x86\xc1\x94\x29\x67\xb6\x69\x09\xfc\x07\x9c\x34\x81\x27\x48\x7e\x0b\x13\xc0\xaf\x92\xd9\x7b\x90\xbc\x0e\xb9\x32\x01\x6c\x13\x89\x35\x3e\x59\xc5\xcf\xc0\x46\x28\x61\x4d\x2c\x5e\x41\x27\x4c\x0e\x3f\x71\x25\x54\xb0\x2e\x22\x87\xbb\x79\x5f\x72\xff\x7c\x32\xce\x61\x0c\xb8\xae\x53\x09\x8f\xb6\x39\x7c\x2b\xdc\xae\xa1\xae\xd3\x93\xdb\x01\xe4\x30\xef\x16\xa8\xa4\xae\x3b\x80\xbc\x86\x50\xaf\x62\x72\x96\xdb\xd6\xe3\x88\x61\xf6\x62\xdc\x80\x35\x25\x08\x8e\x4f\xce\xc0\xf2\xce\xfb\x8c\x0b\x05\x9b\xb2\x4a\x3e\x5b\xef\x41\x72\xd8\x7d\x20\x19\x77\x07\x90\x27\x07\x7a\x95\xae\x06\x7b\xdb\x1c\xbe\xaf\x11\x63\x72\x94\x27\xe3\xfc\xfa\x7a\x02\x47\x51\xf8\xd5\xf0\x0d\x93\xcf\xaf\x2d\x82\xe0\x44\x6e\x00\xca\x3a\x99\x8c\x36\x9d\xf9\x64\x3c\xce\x77\xb2\xfc\x0b\x39\xbb\xc5\x00\xbf\x2c\xe8\x74\x33\x94\x72\xc5\xd7\x01\x8c\x79\x6b\x59\x23\x7b\x72\x60\x5f\x52\xca\xc4\xd3\x51\x8f\x3a\x32\x8a\xae\x25\x06\x90\x37\xba\x9c\x78\x69\xf2\xfe\x0b\x00\x00\xff\xff\x89\x0f\xe7\xcb\xc4\x21\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8644, mode: os.FileMode(436), modTime: time.Unix(1648332271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
