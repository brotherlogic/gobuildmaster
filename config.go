// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdb\x8a\xdb\x30\x10\x7d\x6e\xbe\x42\xe4\x03\xba\xf4\xd5\x94\xc0\x96\x84\x52\xba\xa4\x90\xdd\x96\xbe\x05\x59\x9e\x3a\xda\xd8\x1a\x77\x34\x0a\xf1\xdf\x17\xe7\x46\x64\xe7\x22\xad\x5a\x1a\x08\x81\xf1\x9c\x9c\x33\xa3\x33\x23\x1b\x6d\x18\x0c\x5b\xf1\x71\x24\xc4\x2b\xe6\xbb\x5f\x21\x8c\xac\x21\x13\xe3\xdc\xe9\xaa\xb0\x40\x1b\xa0\xf1\x2e\x5e\xe2\xb2\x91\xbc\xca\xc4\xb8\xd4\xbc\x72\xf9\x7b\x85\xf5\x43\x4e\xc8\x2b\xa0\x0a\x4b\xad\x1e\x06\x90\x46\x12\x6b\x59\x2d\x73\x44\xb6\x4c\xb2\xc9\x04\x93\x83\xdd\x33\x82\xdf\x4e\x13\xd4\x27\x05\xdd\x47\x49\x86\x12\xa9\xcd\xc4\xf4\xcb\xf3\xd7\x43\xb0\x21\x6c\x80\x58\x83\xcd\xc4\xd8\x2a\x92\xac\x56\xfb\xff\x9f\x8c\xf6\x5f\x82\xc2\x99\x42\x1a\xd5\x66\x62\x31\x9b\x7e\x9f\x4f\x1f\xe7\x2f\xa3\xc9\xe8\x4a\x85\xf7\x2b\xf9\xa5\x2b\x50\xd8\xe8\x63\x21\x87\x9e\xf4\xc3\xb7\xea\xcb\x09\xe4\x1a\x1d\x9f\x42\x7d\xa1\x9f\x9f\xbe\x7d\x7a\x7c\x1a\x09\x61\x70\x59\x4b\xcb\x40\x87\xd4\xab\xba\x0f\x2a\x36\x40\x56\xa3\x61\x92\x6a\x1d\x7e\x38\x97\x50\xff\x47\xff\x1a\x5a\xcb\x48\x10\xaa\xdc\xcf\xbf\xe3\x9b\xe7\xd9\xe2\xc7\x6c\x71\xc9\x39\xe4\x8c\x39\x16\x7e\xc9\x38\x87\x7a\xee\xa9\x2f\x24\xcb\x28\xf9\x3d\xc0\x1b\x7d\xef\x37\xe1\xba\xfe\x77\x29\xb6\xdf\xc7\x95\xa4\xc2\xb3\x7d\x2f\xdc\x11\xc7\x8e\xdc\xb1\x79\x84\x4d\x8e\x5b\xdb\x1a\x15\xdc\x3e\x1f\x32\x11\x22\x7e\xe0\x8f\xe3\x4b\xb2\x86\xc8\xb1\xe9\x63\x52\xf8\x1b\xc2\x6d\x1b\x4a\x7c\x96\x7c\xc7\x32\xb3\x9f\x2f\xb3\xc5\x7c\x37\x8a\x03\xdb\xc0\x96\x81\x8c\xac\x96\x04\xb2\x68\x7d\xf3\x28\x74\x86\x33\xf1\xe1\xae\xee\x0a\xcb\x52\x9b\x32\x54\xb9\x97\xfe\xcf\xd7\xfc\x0d\xc3\x1f\x6f\x32\x00\x8a\xbc\xc8\x3c\x44\xca\x91\xc3\x16\x94\x63\x0c\x66\xf6\xf3\x87\x3b\x78\x20\x25\x70\x6b\x35\x84\x1b\xdd\xed\xff\xf0\x26\x0c\x20\x03\x35\x42\x58\x57\xe0\xdf\x10\xd7\x3d\x8e\x10\x76\x96\x9e\xf0\x8a\x71\xfd\xaa\xf0\x18\x26\xa7\xd2\x82\x07\xa6\xf3\x4f\xe4\x9e\xe9\x41\xde\xdc\x4b\x02\x85\x54\x28\xac\x2a\x50\xac\xd1\x84\xf2\x5f\xc2\xa5\x18\x7f\xcf\x43\xa0\x40\x47\x0c\xde\x10\x95\xb4\x6f\x5d\x55\x75\x1e\x00\x1b\xe3\xae\x3e\x28\x45\x01\x41\xad\x4d\x01\x64\xc3\x8f\xe1\x0c\x90\xc6\xdc\x9d\x67\x09\x1c\x51\x7a\x1f\x93\xce\x6f\x91\x4a\x69\xb4\x8d\xd5\xe0\xe3\x52\x74\xe4\xd2\x6a\xf5\x8a\x79\xf0\x1c\x9e\xe5\xdf\xe4\xfd\x13\x00\x00\xff\xff\xbe\xfc\x3c\xd4\x3e\x0d\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3390, mode: os.FileMode(436), modTime: time.Unix(1594577455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
