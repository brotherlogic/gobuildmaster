package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x99\xdb\x6e\xc3\x36\x0c\x86\xaf\x9b\xa7\x10\xf2\x00\x2b\xb6\xcb\x60\x08\xd0\xad\xc1\x50\xac\xc8\x8a\x34\x1b\x76\x17\xc8\x32\xeb\xa8\x96\x45\x8f\xa2\xb3\x64\x4f\x3f\x38\x07\x37\xb6\x93\x46\xaa\xbc\x43\x81\xa2\x80\xc2\x2f\x3f\x49\x91\x94\xad\x5a\x6d\x19\x2c\x3b\xf1\xfd\x48\x88\x77\x4c\xf6\x7f\x85\xb0\xb2\x80\x89\x18\x27\x95\x36\xa9\x03\xda\x00\x8d\xf7\xeb\x19\xae\x4a\xc9\xeb\x89\x18\x67\x9a\xd7\x55\xf2\x8d\xc2\xe2\x3e\x21\xe4\x35\x90\xc1\x4c\xab\xfb\x1e\x52\x4a\x62\x2d\xcd\x2a\x41\x64\xc7\x24\xcb\x89\x60\xaa\x60\xff\x19\xc1\x1f\x95\x26\x28\x1a\x0f\xea\x1f\x25\x19\x32\xa4\xdd\x44\x3c\x3e\xbd\xfe\x7c\x5c\x2c\x09\x4b\x20\xd6\xe0\x26\x62\xec\x14\x49\x56\xeb\xc3\xf7\x4f\x47\x87\x5f\x82\xb4\xb2\xa9\xb4\x6a\x37\x11\x8b\xd9\xe3\xaf\xf3\xc7\x87\xf9\x72\x34\x1d\x5d\x89\xf0\x76\x24\x6f\xda\x80\xc2\x52\x9f\x02\x39\xe6\xa4\xbb\xfc\x59\x7c\x09\x81\xcc\xb1\xe2\x66\xa9\xeb\xe8\x4f\xcf\xbf\xfc\xf0\xf0\x3c\x12\xc2\xe2\xaa\x90\x8e\x81\x8e\xa6\x57\xfd\x3e\x7a\xb1\x01\x72\x1a\x2d\x93\x54\xb9\xff\xe6\x5c\xa2\xfe\x1b\xff\x73\xd8\x39\x46\x02\x5f\xcf\xdb\xf6\x3d\xbf\x6e\x96\xd2\xeb\x6c\xf1\xdb\x6c\x71\xa9\x98\xde\x48\x16\xc0\x6b\x02\xb8\x5e\x4f\xc7\x30\x6f\x05\x95\x4a\x96\x41\x51\x75\x80\x2f\xb6\x43\xe7\x5b\xae\x07\x70\x77\x3b\x82\x30\xf7\xff\x1f\xbe\xdf\x76\xf4\xb0\xae\x24\xa5\xad\x56\xee\x2c\xd7\xc2\xa1\x63\xe4\x94\x37\xc2\x32\xc1\xad\xdb\x59\xe5\x9d\xbc\x36\x32\x15\x22\x7c\x88\x9d\x46\xd2\xbe\x84\xc3\x46\x41\x97\x89\xd1\x2f\x09\xb7\x3b\x5f\xe1\x33\xe3\xf0\x36\x9e\xfd\xbe\x9c\x2d\xe6\xfb\x89\xd3\x2b\x25\xd8\x32\x90\x95\x66\x45\x20\xd3\x5d\xbb\x9e\x14\x56\x96\x27\xe2\xdb\x9b\xa1\x18\xcc\x32\x6d\x33\xdf\x60\x5a\xe6\xff\xd4\x69\xe6\xdb\xbc\x09\x00\x05\x1e\xd6\x2d\x22\xa6\x04\x60\x0b\xaa\x62\xf4\x56\x6e\xdb\xf7\xcf\x99\x9e\x2b\x9e\x23\xb8\x24\xdc\xe8\xfa\x8c\xf3\x4f\x42\x0f\xb9\x50\x96\xae\x4a\x71\x08\xe7\xea\x8f\x03\x1c\x3b\x33\x0f\xef\x95\xc5\xec\xc7\xd9\xd3\xcb\x72\xf5\xb2\x78\x9a\x2f\x8f\x67\xdf\x34\x72\x9b\xeb\x82\x09\x1c\x34\x3d\xe4\x66\x24\x77\x01\xa7\xf7\x5f\x40\xf8\xdd\xb8\x13\xdb\xbe\xdb\x85\x4f\xbb\x13\x28\xa4\x54\xa1\x31\xa0\x58\xa3\xf5\x0d\xea\x12\x17\x93\xd7\x83\x0e\x81\x02\x1d\xd0\xbe\x7d\x2a\x6a\x8a\x57\xc6\xd4\x1b\x01\x2e\xa4\x46\xbb\x50\x8c\x07\x04\x85\xb6\x29\x90\xf3\xdf\x86\x33\x20\x4e\xb9\xde\xcf\x0c\x38\x20\xf4\x2e\x13\xaf\xef\x90\x32\x69\xb5\x0b\xf5\xa1\xcd\x45\xf5\xb7\x74\x5a\xbd\x63\xe2\xdd\xdc\x67\xf6\xf1\xf1\xcb\x34\x0d\x0d\xbd\x41\xe2\xd5\x93\xaa\xde\xcc\x30\xf9\x0f\x66\x80\xe8\x4d\x3d\xd5\xfc\x9f\x3d\xfa\x54\xbc\x0f\x45\xfd\x24\x12\xba\x07\x67\xd0\x00\x1e\x60\xc0\x00\xec\x20\xf1\xea\x81\x27\x74\x0f\x1a\xc2\x03\x54\xe0\x02\x26\x60\x07\x1a\x60\x0a\x49\x03\x81\xfa\x0d\x32\x80\x3a\x4b\x0e\x55\x3f\x21\x31\xea\xea\x94\x44\xff\x67\xd8\x1e\xf2\xc5\x17\x00\x92\x3a\x8d\xba\xcb\x6a\x25\xf0\x4f\x69\x43\x13\xd8\x20\x51\x6f\x00\xac\x72\x6d\x8c\x7f\xf3\x74\x80\xe1\xde\x01\x0e\x82\x2c\x5d\xee\x9d\x87\x0e\x12\x93\x87\x54\x67\x9a\xa5\xa9\x73\x6a\xb4\xf3\x3e\x4f\x2e\x60\x03\x34\x93\x42\x0a\xee\xe5\x86\x89\xd1\x47\xca\x02\x67\x69\x9b\x88\xd1\xae\xbf\xcf\xfb\x49\xbe\x31\x8e\x51\x64\x28\x4a\x5f\xc1\x93\x6d\x8c\x5e\x0e\xbb\x42\x96\xa5\x7f\x72\x5b\x40\x8c\xf2\x7e\x54\x84\xd4\x75\x0b\x88\x7b\x34\x55\x79\xe5\x9d\xe5\x0f\xeb\xf8\x2e\xda\x48\xa3\x53\x19\x70\xb9\x71\x01\x8b\xbb\x5e\xd3\x96\x13\xd2\x69\xe6\x7d\x33\xdb\x41\x62\xd4\x1d\x63\x98\x76\x0b\x88\xeb\x63\x95\xfb\xb7\xf1\xc1\x36\x6a\x72\x4b\xb7\x4e\xb0\xb9\x24\xf6\xb9\xbe\x6f\x01\x43\xfe\x57\xa2\x04\x72\x68\xa5\xe9\x5e\x6d\x7c\xe1\x38\x74\xa0\x2a\x82\xa0\x3b\xda\x1e\xf2\x2f\xdd\xd4\x7e\xb6\x79\x7f\x07\x00\x00\xff\xff\xc8\xa8\x8f\x5d\xaa\x1c\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
