// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6e\xdb\x3c\x0c\xbd\x6e\x9e\x42\xc8\x03\x7c\xc5\xb7\xcb\x60\x08\xd0\xa1\xc1\x30\xac\xe8\x80\xb4\x1b\x76\x17\xc8\x32\xeb\xa8\x91\x45\x8f\xa2\xb3\x64\x4f\x3f\x38\x3f\x6e\xfc\x93\x46\xaa\xbc\xad\x40\x11\x40\xe6\xf1\xe1\xa1\x48\x4a\xa6\xd5\x96\xc1\xb2\x13\xef\x47\x42\x3c\x63\xb2\xfb\x15\xc2\xca\x1c\x26\x62\x9c\x94\xda\xa4\x0e\x68\x0d\x34\xde\xad\x67\xb8\x28\x24\x2f\x27\x62\x9c\x69\x5e\x96\xc9\x7f\x0a\xf3\xeb\x84\x90\x97\x40\x06\x33\xad\xae\x3b\x90\x42\x12\x6b\x69\x16\x09\x22\x3b\x26\x59\x4c\x04\x53\x09\xbb\x67\x04\x3f\x4a\x4d\x90\xd7\x1e\x54\x7f\x4a\x32\x64\x48\xdb\x89\xb8\xfd\xf4\xf0\xf9\xb0\x58\x10\x16\x40\xac\xc1\x4d\xc4\xd8\x29\x92\xac\x96\xfb\xf7\x4f\x47\xfb\x7f\x82\xb4\xb4\xa9\xb4\x6a\x3b\x11\xf3\xd9\xed\xd7\xfb\xdb\x9b\xfb\xc7\xd1\x74\x74\x46\xe1\x65\x25\x4f\xda\x80\xc2\x42\x1f\x85\x1c\x62\xd2\x5e\x7e\x4d\x5f\x42\x20\x57\x58\x72\xbd\xd4\x76\xf4\xe3\xdd\x97\x0f\x37\x77\x23\x21\x2c\x2e\x72\xe9\x18\xe8\x60\x7a\xd6\xef\x83\x17\x6b\x20\xa7\xd1\x32\x49\xb5\xf2\xdf\x9c\x3e\xd4\xbf\xf1\x7f\x05\x5b\xc7\x48\xe0\xeb\x79\xd3\xbe\xe3\xd7\xc5\x54\x7a\x98\xcd\xbf\xcd\xe6\x7d\xc9\xf4\x44\x32\x07\x5e\x12\xc0\xf9\x7c\x3a\xc8\xbc\x24\x2a\x95\x2c\x83\x54\xb5\x00\x6f\x2c\x87\xd6\x5b\xce\x0b\xb8\x8a\x29\x87\xfd\xba\x92\x94\x36\xca\xa1\xb5\x5c\x11\x87\x96\xe2\x31\x7a\x84\x45\x82\x1b\xb7\xb5\xca\x3b\x7e\x4d\xc8\x54\x88\xf0\x46\x70\x2c\xeb\x5d\x1a\x84\x95\x53\x1b\x13\xc3\x5f\x10\x6e\xb6\xbe\xc4\x27\xc6\xe1\xa5\x30\xfb\xfe\x38\x9b\xdf\xef\xaa\xb6\x93\x4a\xb0\x61\x20\x2b\xcd\x82\x40\xa6\xdb\x66\x3e\x29\x2c\x2d\x4f\xc4\xff\x17\xa5\x18\xcc\x32\x6d\x33\x5f\x31\x0d\xf3\x3f\x75\x22\x5c\x2c\x80\xe3\x89\x07\x40\x81\x07\x5e\x03\x11\x93\x02\xb0\x01\x55\x32\x7a\x33\x37\xed\xbb\xbd\xba\xe3\x8a\x67\x1b\x2b\x08\xd7\xba\x3a\x27\xfc\x83\xd0\x81\xf4\xa4\xa5\x2b\x53\x1c\xc2\xb9\xea\x71\x80\x63\x27\xe6\x3d\x4e\x45\xdc\x4e\xce\x1f\x29\x0d\xd2\x69\xad\xd6\xbb\x80\xaa\x94\x0a\x6c\x45\x1d\xc8\xc5\xbe\x70\x15\x20\xe8\x17\x10\xbe\xeb\x95\x23\x7c\xf4\x10\x28\xa4\x54\xa1\x31\xa0\x58\xa3\xf5\x15\xd5\x87\x8b\x29\xb0\x3d\x0f\x81\x02\x1d\x50\xe0\x5d\x54\x54\x9f\x2f\x8d\xa9\x36\x02\x5c\x48\x16\xb7\x41\x31\x1e\x10\xe4\xda\xa6\x40\xce\x7f\x1b\x4e\x00\x71\xcc\xd5\x7e\x66\xc0\x01\xd2\xdb\x98\x78\x7e\x87\x94\x49\xab\x5d\xa8\x0f\x4d\x5c\x8c\x1f\x89\x74\x5a\x3d\x63\xe2\x5d\xdc\x27\xf6\xf1\xfa\x65\x9a\x86\x4a\xaf\x21\xf1\xec\x49\x59\x6d\x66\x18\xfd\x0b\x66\x00\xf5\xa6\xea\x6a\xfe\xb7\x93\x2e\x2a\xde\x87\xbc\xba\xab\x84\xee\xc1\x09\x68\x00\x0f\x30\xa0\x01\xb6\x20\xf1\xec\x81\x67\x78\x07\x34\x84\x07\xa8\xc0\x05\x74\xc0\x16\x68\x80\x2e\x24\x0d\x04\xf2\xd7\x90\x01\xd8\x59\x72\x28\xfb\x11\x12\xc3\xae\x8e\x41\xf4\xbf\xe5\x76\x20\x6f\xfc\x44\x20\xa9\xd3\xa8\x89\x51\x23\x80\x3f\xa5\x0d\x0d\x60\x0d\x89\xfa\x46\x60\xb5\xd2\xc6\xf8\x17\x4f\x0b\x30\xdc\x57\xc2\x9e\x90\xa5\x5b\x79\xc7\xa1\x05\x89\x89\x43\xaa\x33\xcd\xd2\x54\x31\x35\xda\x79\x9f\x27\x3d\xb0\x01\x8a\x49\x21\x05\xd7\x72\x8d\x89\xe1\x47\xca\x02\x7b\x69\x13\x11\xc3\x5d\xbd\xcf\xfb\x26\x5f\x1b\xc7\x30\x32\xe4\x85\x2f\xe1\xd1\x36\x86\x6f\x05\xdb\x5c\x16\x85\x7f\x70\x1b\x80\x18\xe6\x5d\xab\x08\xc9\xeb\x06\x20\xee\x6a\xaa\x56\xa5\x77\x94\x5f\xac\xe3\xab\x68\x2d\x8d\x4e\x65\xc0\xf8\xa3\x07\x16\x37\x80\xd3\x96\x13\xd2\x69\xe6\x3d\xbe\x6d\x41\x62\xd8\x1d\x63\x18\x77\x03\x10\xd5\x49\xa5\x5b\x26\x58\x8f\x75\x7d\x86\xd6\x0d\xc0\x90\xb3\xf8\x02\xc8\xa1\x95\xa6\x3d\x6a\x78\xc3\xf1\xe4\x40\x95\x04\x41\x53\xd5\x0e\xe4\x2f\xcd\x56\x5f\xdb\xbc\xdf\x01\x00\x00\xff\xff\x76\x52\x60\x99\xa0\x1b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 7072, mode: os.FileMode(436), modTime: time.Unix(1622943027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
