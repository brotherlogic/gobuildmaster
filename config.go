// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdb\x6e\xe3\x36\x10\x7d\xde\x7c\x05\xe1\x0f\xe8\xa2\xc5\xa2\x0f\x46\x11\x60\xdb\x18\x6d\xd0\x45\x12\x38\x6e\xd1\xf6\xc5\x18\x51\x13\x99\x6b\x8a\xa3\x1d\x92\x6e\xdc\xaf\x2f\xe4\x5b\x74\x73\x44\x86\xde\x36\x40\x10\x80\x9a\xc3\x33\x33\x1c\x1e\x8e\xa8\x18\x65\x1c\x1a\x67\xc5\x0f\x57\x42\x7c\xa6\x6c\xf7\x57\x08\x03\x25\x4e\xc5\x24\xf3\x4a\xe7\x16\x79\x83\x3c\xd9\x8d\x17\xb4\xac\xc0\xad\xa6\x62\x52\x28\xb7\xf2\xd9\x37\x92\xca\xf7\x19\x93\x5b\x21\x6b\x2a\x94\x7c\xdf\x83\x54\xc0\x4e\x81\x5e\x66\x44\xce\x3a\x86\x6a\x2a\x1c\x7b\xdc\x3d\xcb\x18\x61\x4d\xde\x35\x86\x18\xbf\x78\xc5\x58\x9e\x9c\xaa\x7f\x24\x38\x2c\x88\xb7\x53\x71\x73\xfb\xf8\xeb\x61\xb0\x62\xaa\x90\x9d\x42\x3b\x15\x13\x2b\x19\x9c\x5c\xed\x29\xaf\x43\x66\xfa\xe5\xfe\x71\xb1\x5c\xfc\xf9\x30\x1b\x9a\xee\x41\x89\x0f\x2f\x73\xd5\xbf\x8c\xb9\x37\x39\x18\xb9\x9d\x8a\xf9\xec\xe6\xb7\xbb\x9b\x8f\x77\x8b\xd6\xf8\xf7\x1f\x9a\x4f\xae\xaf\xce\xa4\x76\x3c\x85\x4f\x4a\xa3\xa4\x4a\x1d\x33\x78\x58\x8c\xee\x70\x54\x62\xbb\x21\xfc\xfc\xe9\xfe\xc7\x8f\x9f\xae\x84\x30\xb4\x2c\xc1\x3a\xe4\x83\xe9\x59\xbf\x0f\x5e\x6c\x90\xad\x22\xe3\x18\xe4\x3a\xbc\x2a\x86\x50\xff\x8f\xff\x6b\xdc\x5a\x47\x8c\xa1\x9e\xb7\xed\xe3\x0b\xf6\x71\x36\xff\x7d\x36\x1f\xaa\x31\xe0\x82\xcc\xf9\x22\x3b\x44\x38\x16\xcf\x93\xa6\xaa\xda\x86\x46\xd3\xb4\x7e\xb3\xe3\xcd\x49\x12\x3c\xcf\xc1\x41\xd4\x52\x74\x00\x6f\x54\x8a\xce\x2c\xe7\x03\x78\x37\x1e\x41\x9c\xfb\x0d\xeb\xff\x46\x14\x07\x42\x1d\x9d\xeb\xaf\xfb\xbb\x41\x45\x34\x64\xa4\xf6\xf5\x46\x4b\xc8\xdb\x78\x92\xf6\xe3\x12\x38\x6f\x69\x5f\x67\x78\x17\xc9\xb0\x22\x8f\xae\x19\x53\x95\xd1\xb3\xdd\x1a\x19\xbc\x70\x6d\xc8\xb5\x10\x67\xcf\x83\x31\xf6\x15\x82\x76\x2b\xb9\xc2\x18\xf1\xec\x81\x52\x3c\x80\x7c\x53\x3f\x8c\x3a\xd3\xbb\x98\x14\xfe\x27\x86\x12\x23\x4f\x8f\x2e\x26\x85\xbf\x62\x7a\x0e\x96\xcb\x86\xf1\xc8\xb6\x99\xfd\xb1\x98\xcd\xef\x76\x27\x52\x6f\xeb\xe0\xb3\x43\x36\xa0\x97\x8c\x90\x77\x74\x53\x92\x37\x6e\x2a\xbe\x1d\xf5\x5b\x53\x51\x28\x53\x84\x7a\xde\x32\xff\x8a\x6d\xd6\x2b\xe7\xb2\x5b\x92\x59\xee\x8b\x66\x2a\x26\x9c\x2b\x5b\x69\xd8\x4e\xc6\x65\x15\x9f\x51\x7a\x47\xc1\xe5\xd1\xb6\xef\xb7\x0e\xbd\x6a\x09\x3c\xa0\x2a\xa6\x8d\xaa\xdb\x96\xf0\x4a\xed\x41\x06\x52\xff\x9a\xf6\x5b\x9f\xd3\x25\x1c\xaf\x1f\x47\x38\xdd\x30\x8f\xaf\x95\xf9\xec\xa7\xd9\xed\xc3\x62\xf9\x30\xbf\xbd\x5b\x1c\x3a\x86\xeb\xc4\x5d\x7a\x2c\x96\x50\x85\x7e\x31\x4f\x61\xcd\x10\x39\x52\x9a\x7a\x90\x76\xb2\xde\x45\xb4\x55\xff\x20\xd3\x77\x93\x4e\xfa\x76\xfa\x20\x42\x04\x82\x51\x12\xe7\x92\xb4\x46\xe9\xd4\xb1\xb3\x1c\x8f\x60\x08\x97\x92\xc4\x3d\x0f\xa3\x44\x15\x71\xc4\xf4\x51\x49\x22\xef\xb5\xae\x17\x02\x6d\xcc\x36\xe8\x82\x52\x3c\x60\x2c\x95\xc9\x91\x6d\xf8\x32\x34\x00\x69\xcc\xf5\x7a\x16\xe8\x22\x42\xef\x62\xd2\xf9\x2d\x71\x01\x46\xd9\x58\x1f\xda\xb8\xa4\xcd\x0c\x56\xc9\xcf\x94\x05\xef\xe4\x86\x7d\x7a\xfc\x90\xe7\xb1\xa1\x9f\x20\xe9\xec\x99\xaf\x17\x33\x8e\xfe\x05\x73\x81\xe8\x75\xad\x6a\xe1\xdd\x4a\x1f\x95\xee\x43\x59\x37\x2a\xb1\x6b\xd0\x00\x5d\xc0\x03\x8a\x10\xc0\x0e\x24\x9d\x3d\xb2\x09\xe8\x81\x2e\xe1\x01\x49\xb4\x11\x0a\xd8\x01\x5d\x40\x85\x40\x63\x24\xff\x09\x72\x01\x76\x07\x2e\x96\xfd\x08\x49\x61\x97\xc7\x24\x86\xb7\xd0\x3d\xc8\x1b\xdf\x0f\x18\x54\x1e\x72\x6f\x1a\x96\xc0\xbf\xc1\xc4\x26\xf0\x04\x49\x6f\x61\x1c\xd8\x75\x30\x7b\x07\x92\xd6\xfb\x16\xca\x81\xae\x23\xd1\xca\x06\xab\xf8\x00\xec\x02\x25\x2c\x89\xa3\x77\xd0\x09\x93\xc2\x4f\x5c\x44\x2a\x58\x1b\x91\xc2\x5d\xcf\x17\xdc\x3f\x9f\x8c\x53\x18\x1d\x96\x55\x28\xe1\xd1\x36\x85\x6f\x8d\xdb\x12\xaa\x2a\x3c\xb9\x2d\x40\x0a\xf3\x6e\x83\xc6\xd4\x75\x0b\x90\xd6\x10\xca\xb5\x0f\xce\x72\xd3\xfa\x32\x62\x98\xbc\x19\x37\xa0\x55\x0e\x11\x17\x23\x03\xb0\xb4\xab\x33\x65\x5c\xc6\x2a\x2f\x82\xef\xbc\x3b\x90\x14\x76\xeb\x28\x8e\xbb\x05\x48\x93\x03\xb9\x0e\x57\x83\xbd\x6d\x0a\xdf\x17\x8f\x3e\x38\xca\x93\x71\x7a\x7d\x3d\x81\x21\x1f\xf9\xd6\xf0\x82\x49\xe7\x97\x1a\x21\xe2\xae\xad\x07\x4a\xf1\x00\xbd\x0e\x67\x3e\x19\x5f\xe6\x3d\x39\xfe\x0d\x39\xb9\xc5\x00\xbb\xca\xe8\xf4\x91\x25\xe4\xd3\x5b\x0b\xf0\xe6\x4f\x87\x15\xb2\x25\x03\xfa\x35\x59\x0c\xbc\xe4\xb4\x28\x3d\x63\xd4\x75\x7e\x0f\xf2\x35\x2e\xf5\x93\x4e\x28\x93\x4b\x28\xab\xc8\xff\xb8\xe8\xa1\x92\x7c\xf0\x4a\x47\x5c\x5d\x34\xcc\x5f\x65\xfd\x37\x00\x00\xff\xff\x46\xb9\xbf\xc2\x68\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8808, mode: os.FileMode(436), modTime: time.Unix(1663536513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
