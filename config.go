// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x61\x8b\xda\x40\x10\xfd\x5c\x7f\xc5\xe2\x0f\xe8\xd1\xaf\xa1\x08\x57\x0c\xa5\xf4\xb0\xe0\x5d\x4b\xbf\xc9\x66\x33\x8d\x5b\x37\x3b\xe9\xec\xac\x98\x7f\x5f\xa2\x89\x98\x44\xcd\xe6\xd2\x72\x82\x08\x93\x79\xbe\x37\xb3\x6f\x66\x63\xb5\x65\xb0\xec\xc4\xc7\x99\x10\xbf\x31\x39\xfe\x0a\x61\x65\x0e\x91\x98\x27\x5e\x9b\xd4\x01\xed\x81\xe6\xc7\x78\x86\x9b\x42\xf2\x36\x12\xf3\x4c\xf3\xd6\x27\xef\x15\xe6\x0f\x09\x21\x6f\x81\x0c\x66\x5a\x3d\xf4\x20\x85\x24\xd6\xd2\x6c\x12\x44\x76\x4c\xb2\x88\x04\x93\x87\xe3\x33\x82\x3f\x5e\x13\xe4\x67\x05\xd5\x47\x49\x86\x0c\xa9\x8c\xc4\xf2\xcb\xf3\xd7\x3a\x58\x10\x16\x40\xac\xc1\x45\x62\xee\x14\x49\x56\xdb\xd3\xff\x2f\x66\xa7\x2f\x41\xea\x6d\x2a\xad\x2a\x23\xb1\x8e\x97\xdf\x57\xcb\xc7\xd5\xcb\x6c\x31\xbb\x51\xe1\x70\x25\xbf\xb4\x01\x85\x85\x6e\x0a\xa9\x7b\xd2\x0d\xdf\xab\x2f\x21\x90\x3b\xf4\x7c\x0e\x75\x85\x7e\x7e\xfa\xf6\xe9\xf1\x69\x26\x84\xc5\x4d\x2e\x1d\x03\xd5\xa9\x37\x75\xd7\x2a\xf6\x40\x4e\xa3\x65\x92\x6a\x17\x7e\x38\xd7\x50\x6f\xa3\x7f\x07\xa5\x63\x24\x08\x55\xde\xce\x1f\xf0\xcd\x73\xbc\xfe\x11\xaf\xaf\x39\x87\xbc\xb5\x4d\xe1\xd7\x8c\x53\xd7\x33\xa4\x3e\x95\x2c\x47\xc9\xef\x00\x5e\xe9\xfb\x76\x13\x6e\xeb\x7f\x37\xc5\xf6\xa7\xb8\x92\x94\xb6\x6c\xdf\x09\x57\xc4\x63\x47\xae\x69\x1e\x61\x91\xe0\xc1\x95\x56\x05\xb7\xaf\x0d\x59\x08\x31\x7e\xe0\x9b\xf1\x25\x99\xc3\xc8\xb1\xe9\x62\xa6\xf0\x17\x84\x87\x32\x94\xf8\x22\x79\xc0\x32\xf1\xcf\x97\x78\xbd\x3a\x8e\x62\xcf\x36\x70\x60\x20\x2b\xcd\x86\x40\xa6\x65\xdb\x3c\x0a\xbd\xe5\x48\x7c\x18\xd4\x6d\x30\xcb\xb4\xcd\x42\x95\xb7\xd2\xff\xfb\x9a\xbf\x63\xf8\xe6\x26\x03\xa0\x91\x17\x59\x0b\x31\xe5\xc8\xe1\x00\xca\x33\x06\x33\xb7\xf3\xfb\x3b\xb8\x27\x25\x70\x6b\x15\x84\x7b\x5d\xed\xff\xf0\x26\xf4\x20\x3d\x35\x42\x38\x9f\xe2\xbf\x10\x57\x3d\x1e\x21\xec\x22\x7d\xc2\x2b\xc6\xed\xab\xa2\xc5\xb0\x38\x97\x16\x3c\x30\x95\x7f\x46\xee\x99\x0e\xe4\xd5\xbd\x24\x50\x48\xa9\x42\x63\x40\xb1\x46\x1b\xca\x7f\x0d\x37\xc5\xf8\x27\x1e\x02\x05\x7a\xc4\xe0\xf5\x51\x93\xf6\xad\x37\xa6\xf2\x00\xb8\x31\xee\xea\x82\xa6\x28\x20\xc8\xb5\x4d\x81\x5c\xf8\x31\x5c\x00\xee\x32\xff\x0d\x00\x00\xff\xff\x3d\xa7\x05\x80\xbe\x0b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3006, mode: os.FileMode(436), modTime: time.Unix(1594253818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
