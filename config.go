// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x8a\xdb\x3c\x10\xbd\xfe\xf2\x14\x22\x0f\xf0\x2d\xbd\x35\x25\xb0\x65\x43\x29\x5d\xb6\x90\xdd\x96\xde\x05\x59\x9e\x3a\xda\xc8\x1a\x77\x34\xda\x26\x6f\x5f\x9c\xc4\x69\x6c\xe7\x47\x8a\x52\x1a\x08\x01\x59\xc7\xe7\x1c\xe9\xcc\x48\xc4\x6a\xcb\x60\xd9\x89\xf7\x23\x21\x5e\x31\xdf\xfc\x0a\x61\x65\x05\x99\x18\xe7\x5e\x9b\xc2\x01\xbd\x01\x8d\x37\xe3\x25\xce\x6b\xc9\x8b\x4c\x8c\x4b\xcd\x0b\x9f\xff\xaf\xb0\xba\xcb\x09\x79\x01\x64\xb0\xd4\xea\x6e\x00\xa9\x25\xb1\x96\x66\x9e\x23\xb2\x63\x92\x75\x26\x98\x3c\x6c\x9e\x11\xfc\xf4\x9a\xa0\xda\x2b\x68\x3e\x4a\x32\x94\x48\xeb\x4c\x3c\x7c\x7a\xfe\xbc\x1b\xac\x09\x6b\x20\xd6\xe0\x32\x31\x76\x8a\x24\xab\xc5\xf6\xfd\x93\xd1\xf6\x4b\x50\x78\x5b\x48\xab\xd6\x99\x98\x4d\x1f\xbe\x3e\x3d\xdc\x3f\xbd\x8c\x26\xa3\x13\x0e\x2f\x3b\xf9\xa1\x0d\x28\xac\x75\x6b\x64\xb7\x26\xfd\xe1\x73\xfe\x72\x02\xb9\x44\xcf\xfb\xa1\xbe\xd0\x8f\x8f\x5f\x3e\xdc\x3f\x8e\x84\xb0\x38\xaf\xa4\x63\xa0\xdd\xd4\x93\xba\x77\x2a\xde\x80\x9c\x46\xcb\x24\xd5\x32\x7c\x73\x8e\xa1\xfe\x8d\xfe\x25\xac\x1d\x23\x41\xa8\xf2\xee\xfc\x0b\xb9\x79\x9e\xce\xbe\x4d\x67\xc7\x92\x43\xde\xda\xd6\xf8\xb1\xe0\xec\xfc\x5c\x52\x5f\x48\x96\x51\xf2\x7b\x80\x2b\x73\xdf\x7b\xcb\x69\x03\xff\xa5\xe4\x7e\x3b\xae\x24\x15\x9d\xdc\xf7\x86\x1b\xe2\xd8\x9a\x6b\x57\x8f\xb0\xce\x71\xe5\xd6\x56\x05\xaf\x5f\x17\x32\x11\x22\xbe\xe2\xdb\xfa\x25\x59\x41\x64\xdd\xf4\x31\x29\xfc\x35\xe1\x6a\x1d\x4a\x7c\x30\x79\x50\x8b\x17\x63\x34\xfd\xfe\x32\x9d\x3d\x6d\xca\x73\x10\x25\x58\x31\x90\x95\x66\x4e\x20\x8b\x75\x37\x4f\x0a\xbd\xe5\x4c\xbc\xbb\x68\xc5\x60\x59\x6a\x5b\x86\x9a\xe9\x4c\xff\xeb\xad\xff\x4c\x0d\xb4\xa7\x1b\x00\x45\x1e\x6e\x1d\x44\x4a\x0a\x60\x05\xca\x33\x06\x33\x77\xe7\x0f\xfb\xf2\x40\x4a\x60\x27\xab\x09\xdf\x74\x73\x26\x84\x2f\xc2\x00\x72\x24\x99\xce\x17\x78\x0b\x71\xcd\xe3\x08\x61\x07\xd3\x13\xae\x1d\xa7\x8f\x8f\x0e\xc3\x64\x6f\x2d\xb8\x60\x9a\xfc\x44\xb6\x9e\x1e\xe4\xea\xb5\x24\x50\x48\x85\x42\x63\x40\xb1\x46\x1b\xca\x7f\x0c\x97\x12\xfc\x2d\x0f\x81\x02\x1d\x51\x78\x43\x54\x52\x0b\xf6\xc6\x34\x19\x00\x17\x93\xae\x3e\x28\x45\x01\x41\xa5\x6d\x01\xe4\xc2\xb7\xe1\x00\x90\xc6\xdc\xec\x67\x09\x1c\x61\xbd\x8f\x49\xe7\x77\x48\xa5\xb4\xda\xc5\x6a\xe8\xe2\x52\x74\xe4\xd2\x69\xf5\x8a\x79\x70\x1d\x1e\xcc\x4f\xf7\x2f\x8b\x22\xd6\xfa\x1e\x92\xce\x9e\xfb\x66\x33\xe3\xe8\xff\x60\x6e\xe0\xde\x34\x1d\x35\xfc\xe2\x30\x44\xa5\x6b\xa8\x9a\x6b\x44\xec\x1e\x1c\x80\x6e\xa0\x00\x23\x1a\x60\x0f\x92\xce\x1e\x79\xb6\x0e\x40\xb7\x50\x80\x0a\x5c\x44\x07\xec\x81\x6e\xd0\x85\xa4\x81\x48\xfe\x3d\xe4\x06\xec\x2c\x39\x96\xbd\x85\xa4\xb0\xab\x76\x11\xc3\x6f\x9f\x03\xc8\x95\xb7\xf7\xca\x3b\xad\x92\xfe\xb6\xe9\xac\xe0\x2f\x69\x63\x57\x70\x0f\x49\xba\xbc\xb3\x5a\x6a\x63\xc2\xab\xa7\x03\xb8\xfa\x0a\xb7\x7d\x3b\x4b\xb7\x0c\x36\xdd\x83\x9c\x37\xfd\x3b\x00\x00\xff\xff\xd3\xfa\xd9\xe3\x0c\x14\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5132, mode: os.FileMode(436), modTime: time.Unix(1598120230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
