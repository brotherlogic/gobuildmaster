// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x8a\xdb\x30\x0c\xc7\x3f\x2f\x4f\x61\xfa\x00\x3b\xf6\x35\x8c\xc2\x8d\x86\x31\x76\x74\xd0\xbb\x8d\x7d\x2b\x8a\xa3\xa5\x5e\x13\x2b\x93\xe5\xd2\xbc\xfd\x68\x9b\x74\xe7\xa4\xbd\x24\xd7\x8d\x15\x4a\x40\x91\xa2\x9f\xe4\xbf\x64\x6b\xac\xa0\x15\xa7\xde\x47\x4a\xfd\xa4\xf4\xf8\x54\xca\x42\x89\xb1\x9a\xa5\xde\x14\x99\x43\xde\x21\xcf\x8e\xf6\x9c\xd6\x15\xc8\x26\x56\xb3\xdc\xc8\xc6\xa7\x6f\x35\x95\x77\x29\x93\x6c\x90\x0b\xca\x8d\xbe\xeb\x85\x54\xc0\x62\xa0\x58\xa7\x44\xe2\x84\xa1\x8a\x95\xb0\xc7\xe3\x3b\xc6\x5f\xde\x30\x96\x67\x82\xc3\x4f\x83\x60\x4e\x5c\xc7\x6a\xf1\xe9\xf1\x73\x63\xac\x98\x2a\x64\x31\xe8\x62\x35\x73\x9a\x41\xf4\xe6\xf4\xfd\x79\x74\xfa\x33\x66\xde\x66\x60\x75\x1d\xab\x55\xb2\xf8\xba\x5c\xdc\x2f\x9f\xa2\x79\x74\xa5\xc2\xe1\x4a\x7e\x98\x02\x35\x55\xa6\x2d\xa4\xe9\x49\xd7\xfc\x52\x7d\x29\x23\x6c\xc9\xcb\xd9\xd4\x05\xfd\xf8\xf0\xe5\xc3\xfd\x43\xa4\x94\xa5\x75\x09\x4e\x90\x1b\xd7\xab\xdc\x0d\xc5\x0e\xd9\x19\xb2\xc2\xa0\xb7\xe3\x0f\xe7\x52\xd4\xff\xe1\xdf\x62\xed\x84\x18\xc7\x92\x87\xfe\x03\xba\x79\x4c\x56\xdf\x92\xd5\x25\xe5\xb0\xb7\xb6\x2d\xfc\x92\x70\x9a\x7a\x86\xe8\x33\x10\x98\x84\xdf\x09\x78\xa5\xee\xc3\x26\x5c\xe7\x7f\x73\x8b\xec\x4f\x76\x0d\x9c\x05\xb2\xef\x98\x0f\x89\xa7\x8e\x5c\xdb\x3c\xa6\x2a\xa5\xbd\xab\xad\x1e\xdd\xbe\x30\x64\xae\xd4\xf4\x81\x6f\xc7\x97\xa1\xc4\x89\x63\xd3\x8d\xb9\x25\x7f\xc5\xb4\xaf\xc7\x26\x7e\xe6\x3c\x20\x99\xe4\xfb\x53\xb2\x5a\x1e\x47\xb1\x27\x1b\xdc\x0b\xb2\x85\x62\xcd\x08\x59\x1d\x8a\x47\x93\xb7\x12\xab\x77\x83\xdc\x05\xe5\xb9\xb1\xf9\x58\xf2\xc0\xfd\x9f\xaf\xf9\x17\x04\xdf\xde\x64\x88\x3c\xf1\x22\x0b\x22\x6e\x39\x72\xdc\xa3\xf6\x42\xa3\x33\x87\xfe\xfd\x1d\xdc\x43\x19\xb9\xb5\x2a\xa6\x9d\x39\xec\xff\xf1\x4d\xe8\x85\xfc\x4d\x9a\xc3\xeb\x09\x24\xcf\xdc\x5f\xbd\xff\x83\xaf\xcc\xcf\xf8\x7f\xa6\xe0\x77\x00\x00\x00\xff\xff\x39\xcc\x7c\x42\x10\x09\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2320, mode: os.FileMode(420), modTime: time.Unix(1593809255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
