// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xdf\x6a\xab\x40\x10\xc6\xaf\x8f\x4f\x31\xf8\x00\x27\xf7\x72\x08\xe4\x90\x50\x4a\x43\x0a\x49\xdb\xdb\x30\xae\x53\xdd\x46\x77\xec\xec\x18\xea\xdb\x97\x24\x1a\xd0\xe6\x9f\xed\x45\x05\x11\x3e\x77\x9c\xdf\x37\x7e\xe3\xac\x53\x72\xea\xe1\x5f\x00\xf0\xc6\xf1\xfe\x09\xe0\xb0\xa0\x08\xc2\xb8\xb2\x79\xe2\x49\xb6\x24\xe1\x5e\x4f\x79\x5d\xa2\x66\x11\x84\xa9\xd5\xac\x8a\xff\x1a\x2e\x46\xb1\xb0\x66\x24\x39\xa7\xd6\x8c\xbe\x94\x94\x28\x6a\x31\x5f\xc7\xcc\xea\x55\xb0\x8c\x40\xa5\xa2\xfd\x3b\xa1\xf7\xca\x0a\x15\x47\x82\xdd\x65\x50\x29\x65\xa9\x23\x98\xde\xaf\x1e\x1a\xb1\x14\x2e\x49\xd4\x92\x8f\x20\xf4\x46\x50\x4d\x76\xf8\xfe\x38\x38\xdc\x42\x49\xe5\x12\x74\xa6\x8e\x60\x39\x9b\x3e\x2f\xa6\x93\xc5\x53\x30\x0e\xce\x38\xbc\xee\xe4\xd5\xe6\x64\xb8\xb4\xad\x91\x66\x26\x7d\xf9\x92\xbf\x58\x08\x37\x5c\xe9\x51\xea\x83\xde\xcd\x1f\xff\x4f\xe6\x01\x80\xe3\x75\x81\x5e\x49\x9a\xa3\x67\xb9\x1b\x8a\x2d\x89\xb7\xec\x54\xd0\x6c\x6e\xff\x39\xa7\xaa\x7e\x87\x7f\x43\xb5\x57\x16\xba\x95\xbc\x7b\xfe\x4a\x6e\x56\xb3\xe5\xcb\x6c\x79\x2a\x39\x52\x39\xd7\x1a\x3f\x15\x9c\xc6\xcf\x35\xfa\x04\x15\x07\xe1\xf7\x0a\xbe\x99\xfb\xee\x10\xce\xf3\xff\xf9\x49\xec\x0f\xba\x41\x49\x3a\xb1\xef\xc9\xbb\xc6\x43\x57\xae\x1d\x9e\x70\x19\xf3\x87\xaf\x9d\xb9\x79\x7c\xdd\x92\x31\xc0\xf0\x85\x6f\xd7\x57\xb0\xa0\x81\x6b\xd3\xaf\xb9\xd8\xff\x33\x00\x00\xff\xff\x02\x8d\xe6\x41\x52\x05\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1362, mode: os.FileMode(420), modTime: time.Unix(1593547611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
