// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x6a\xdb\x40\x0c\xc7\x3f\xcf\x4f\x21\xfc\x00\x2b\xfb\x6a\x46\xa0\x23\x66\x8c\x95\x0c\xd2\x6e\xec\x5b\x90\xcf\x5a\x72\xcb\xf9\xe4\xe9\x74\x25\x7e\xfb\x11\x37\xc9\x9a\x38\x59\x2e\x69\xa1\x81\x60\x90\xf5\x97\x7f\xfa\x4b\xc7\x79\xeb\x95\xbc\x06\xf8\x98\x01\xfc\xe6\xaa\x7f\x02\x78\x6c\xa8\x80\xbc\x8a\xd6\xd5\x81\xe4\x91\x24\xef\xe3\x73\x9e\xb5\xa8\x8b\x02\xf2\xb9\xd5\x45\xac\xde\x1b\x6e\x6e\x2a\x61\x5d\x90\x38\x9e\x5b\x73\x33\x90\xb4\x28\x6a\xd1\xcd\x2a\x66\x0d\x2a\xd8\x16\xa0\x12\xa9\x7f\x27\xf4\x27\x5a\xa1\x66\x47\xb0\xfe\x19\x54\x9a\xb3\x74\x05\x8c\xbf\xdc\x7f\xdd\x04\x5b\xe1\x96\x44\x2d\x85\x02\xf2\x60\x04\xd5\x2c\x9e\xea\x8f\x52\x2a\xdd\x97\xd3\x1f\xe5\xf4\x58\x2d\xc5\xb0\x74\x36\xe8\xbf\x62\xeb\xbf\x50\x1d\x7d\x8d\xde\x74\x05\x4c\xcb\xf1\xf7\xc9\xf8\x76\xf2\x90\x8d\xb2\x13\x76\x9d\xb7\xe5\x97\x75\x64\xb8\xb5\x5b\x57\x36\x06\x1f\x86\xff\x67\x56\x25\x84\x4b\x8e\xba\x0b\x1d\x82\x7e\xbe\xfb\xf6\xe9\xf6\x2e\x03\xf0\x3c\x6b\x30\x28\xc9\x26\xf5\x24\xf7\x86\xe2\x91\x24\x58\xf6\x2a\x68\x96\xe9\x93\x3e\xa6\x7a\x1b\x7e\x74\x24\x9a\x0e\xfe\x2c\x7d\x04\x70\xf9\xb4\xf7\x5d\xbb\xec\x78\x1c\x11\x5d\xbd\xba\x12\xbd\xdf\x16\xd9\x2e\xae\xe1\xe8\xb5\x80\x0f\x67\xe9\x97\xd4\x05\x65\xa1\x54\xf0\xfd\xfc\x57\x65\x3e\xb2\x03\xe7\xe8\x6b\xe1\xb6\xe2\x55\xe8\xbc\x49\x6d\xe0\x40\xf2\x92\xc9\xb7\xc2\xab\x2e\xf5\xbb\xcf\x92\xcf\xb8\x56\xfe\x7c\x28\xa7\x93\xfe\x04\x0c\x7c\xa3\x95\x92\x78\x74\x33\x21\xac\xbb\x2b\x67\xfe\x84\x28\x64\xc8\x5e\xb0\xb2\x43\xd5\x8b\xbc\x8b\xce\xad\x7d\xa0\x70\xc1\x89\x1d\x88\xae\x22\x48\x6d\xd5\xa0\xd4\xf9\xd0\xb7\x5d\xb8\xbf\x71\xae\xeb\xbe\x61\x6f\x95\x93\xfb\xde\x4b\x7f\xad\xcb\xf2\xe4\xfd\xf6\x2e\x1b\xfd\x0d\x00\x00\xff\xff\x27\xc2\xd9\x13\x0f\x08\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2063, mode: os.FileMode(436), modTime: time.Unix(1574868990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
