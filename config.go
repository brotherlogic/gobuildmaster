// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\xde\x7c\x85\xe0\x0f\xe8\xa2\xc5\xa2\x0f\x46\x11\x60\xdb\x18\x6d\xd0\x45\x36\x70\xdc\xa2\x7d\x32\x46\xd4\x44\xe6\x9a\xe2\x68\x87\x64\x1a\xf7\xeb\x0b\xf9\x16\x5d\xec\x98\xb3\x54\x77\xfd\x62\x80\x9a\xc3\x33\x33\x1c\x1e\x8e\x28\xab\xad\x47\xeb\x5d\xf6\xd3\x55\x96\x7d\xa2\x7c\xfb\x9f\x65\x16\x2a\x9c\x66\x93\x3c\x68\x53\x38\xe4\x27\xe4\xc9\x76\xbc\xa4\x65\x0d\x7e\x35\xcd\x26\xa5\xf6\xab\x90\x7f\xa7\xa8\x7a\x9b\x33\xf9\x15\xb2\xa1\x52\xab\xb7\x03\x48\x0d\xec\x35\x98\x65\x4e\xe4\x9d\x67\xa8\xa7\x99\xe7\x80\xdb\x67\x39\x23\xac\x29\xf8\xd6\x10\xe3\xe7\xa0\x19\xab\xa3\x53\xcd\x4f\x81\xc7\x92\x78\x33\xcd\x6e\x6e\x1f\x7e\xdf\x0f\xd6\x4c\x35\xb2\xd7\xe8\xa6\xd9\xc4\x29\x06\xaf\x56\x3b\xca\xeb\x98\x99\x7e\xfb\xf8\xb0\x58\x2e\xfe\xbe\x9f\x9d\x9a\xee\x5e\x67\xef\x9a\xb9\x9a\x99\x18\x8b\x60\x0b\xb0\x6a\x33\xcd\xe6\xb3\x9b\x3f\xee\x6e\xde\xdf\x2d\x3a\xe3\x3f\xbe\x6b\x3f\xb9\xbe\x3a\x93\xd4\xcb\xc9\x7b\xd4\x06\x15\xd5\xfa\x90\xbb\xfd\x32\xf4\x87\x45\x29\xed\x87\xf0\xeb\x87\x8f\x3f\xbf\xff\x70\x95\x65\x96\x96\x15\x38\x8f\xbc\x37\x3d\xeb\xf7\xde\x8b\x27\x64\xa7\xc9\x7a\x06\xb5\x8e\xaf\x87\x53\xa8\x6f\xe3\xff\x1a\x37\xce\x13\x63\xac\xe7\x5d\x7b\x79\xa9\x3e\xcc\xe6\x7f\xce\xe6\xa7\xaa\x4b\x99\xe0\xfc\x0f\x2f\xb5\x7a\x26\xc4\x4b\x01\x3d\x1a\xaa\xeb\x4d\x6c\x38\x6d\xeb\x31\x83\x69\xcf\x9b\x10\x4c\x01\x1e\x44\xcb\xd3\x03\x7c\xa1\x6e\xf4\x66\x39\x1f\xc0\x9b\xcb\x11\xc8\xdc\x6f\x59\x7f\x1d\x89\x1c\x23\xd4\xcb\x71\xed\xc6\x15\x70\xd1\x91\xb0\xde\xf0\x56\xa1\x4f\x0b\xeb\xc5\x34\x33\xd5\x39\x3d\xbb\x8d\x55\xd1\xb9\xee\x42\xae\xb3\xec\xac\xac\x5f\x62\x5f\x21\x18\xbf\x52\x2b\x94\x68\xe0\x00\x94\xe2\x01\x14\x4f\xcd\x43\xd1\xa1\xdc\xc7\xa4\xf0\x3f\x32\x54\x28\x3c\x04\xfa\x98\x14\xfe\x9a\xe9\x39\x5a\xf4\x5a\xc6\xf2\x8d\x34\xfb\x6b\x31\x9b\xdf\x6d\xcf\x9a\xc1\x66\xc2\x67\x8f\x6c\xc1\x2c\x19\xa1\xe8\xa9\x9f\xa2\x60\xfd\x34\xfb\xfe\x62\x28\x86\xca\x52\xdb\x32\x36\x98\x8e\xf9\xff\xd8\x3a\xbd\x72\xe2\xfa\x25\xd9\xe5\xae\x8e\xa6\xd9\x84\x0b\xed\x6a\x03\x9b\xc9\x65\x71\xcc\x11\x59\xd8\x48\x76\x10\x29\x15\x83\xcf\xa8\x82\xa7\x68\xe6\xae\xfd\xb0\x21\x19\xb8\x12\x79\xc4\xd5\x4c\x4f\xba\x69\x86\xe2\x93\x30\x80\x9c\x58\xf6\xd7\x4e\x0f\x17\x0a\x1a\xc3\xf1\xe6\xb1\xc0\xe9\x96\xb9\xbc\x4e\xe7\xb3\x5f\x66\xb7\xf7\x8b\xe5\xfd\xfc\xf6\x6e\xb1\xef\x39\xae\x13\x4b\xe0\x50\xa8\xb1\x07\x46\xdb\x3c\xa2\x00\xe2\x1d\x69\xaa\x5a\x28\x9e\x03\xc8\xc5\x94\xbe\x11\xb4\x6f\xff\x22\x53\xbb\x15\xdd\xc6\xb6\x55\xb0\x2c\x46\xc2\x18\x15\x71\xa1\xc8\x18\x54\x5e\x93\x8d\x0d\xea\x14\x2e\x25\xaf\x3b\x1e\x46\x85\x5a\xa0\x31\x43\x54\xd2\xc9\x14\x8c\x69\x16\x02\x9d\x64\xb3\xf4\x41\x29\x1e\x30\x56\xda\x16\xc8\x2e\x7e\x19\x5a\x80\x34\xe6\x66\x3d\x4b\xf4\x82\xd0\xfb\x98\x74\x7e\x47\x5c\x82\xd5\x4e\xea\x43\x17\x97\xb4\xbf\xc1\x69\xf5\x89\xf2\xe8\xcd\xdd\xb2\x4f\x8f\x1f\x8a\x42\x1a\xfa\x11\x92\xce\x9e\x87\x66\x31\x65\xf4\x2f\x98\x11\xa2\x37\x8d\xaa\xc5\xf7\x53\x43\x54\xba\x0f\x55\xd3\x4a\x49\xd7\xa0\x05\x1a\xc1\x03\x12\x08\x60\x0f\x92\xce\x2e\x6c\x15\x06\xa0\x31\x3c\x20\x85\x4e\xa0\x80\x3d\xd0\x08\x2a\x04\x06\x85\xfc\x47\xc8\x08\xec\x1e\xbc\x94\xfd\x00\x49\x61\x57\x87\x24\xc6\x37\xda\x03\xc8\x17\xbe\xc1\x30\xe8\xe2\xfc\xeb\x8b\x34\x81\xff\x80\x95\x26\xf0\x08\x49\x6f\x61\x3c\xb8\x75\x34\x7b\x0f\x92\xd6\x21\x97\xda\x83\x69\x22\x31\xda\x45\xab\xf8\x09\xd8\x08\x25\xac\x88\xc5\x3b\xe8\x88\x49\xe1\x27\x2e\x85\x0a\xd6\x45\xa4\x70\x37\xf3\x45\xf7\xcf\x47\xe3\x14\x46\x8f\x55\x1d\x4b\x78\xb0\x4d\xe1\x5b\xe3\xa6\x82\xba\x8e\x4f\x6e\x07\x90\xc2\xbc\xdd\xa0\x92\xba\xee\x00\xd2\x1a\x42\xb5\x0e\xd1\x59\x6e\x5b\x8f\x23\x86\xc9\x9b\xf1\x09\x8c\x2e\x40\x70\x7d\x72\x02\x96\x76\xdf\xa7\xad\xcf\x59\x17\x65\xf4\xdd\x7a\x0f\x92\xc2\xee\x3c\xc9\xb8\x3b\x80\x34\x39\x50\xeb\x78\x35\xd8\xd9\xa6\xf0\x7d\x0e\x18\xa2\xa3\x3c\x1a\xa7\xd7\xd7\x23\x58\x0a\xc2\xb7\x86\x17\x4c\x3a\xbf\x32\x08\x82\x1b\xb9\x01\x28\xe9\x66\x32\x98\x78\xe6\xa3\xf1\x38\xef\xc9\xf2\x37\xe4\xe4\x16\x03\xdc\x2a\xa7\xe3\x97\xa1\x98\x4f\x7c\x1d\xc0\x98\x5f\x2d\x6b\x64\x47\x16\xcc\x6b\x4a\x19\x79\x3b\xea\x50\x05\x46\xd1\x67\x89\x01\xe4\x2b\x7d\x9c\x48\x3a\xc7\x6c\xa1\xa0\xaa\x85\x97\xf8\x03\x54\x92\x0f\x41\x1b\xc1\x05\x47\xcb\xfc\x55\xd6\xff\x02\x00\x00\xff\xff\x04\xab\xe3\x9e\x04\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8964, mode: os.FileMode(436), modTime: time.Unix(1657388362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
