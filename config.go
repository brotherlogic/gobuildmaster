// Code generated by go-bindata.
// sources:
// config.pb
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xf7\x2b\x8c\xfc\x80\x1d\x36\x1c\xf6\x21\x18\x0a\xdc\xd6\x60\x2b\x76\x68\x8b\x34\x1b\xb6\x7d\x09\x64\x99\x75\x74\x91\x45\x1f\x25\x67\xcd\x7e\xfd\xe0\xbc\xd5\x6f\xa9\xc5\x32\xdd\x0a\x14\x05\x64\x3e\x7a\x48\x91\x7a\x44\xcb\x75\xc6\x05\x70\xc1\x27\x3f\xbc\x4f\x92\x2f\x98\xee\xfe\x26\x89\x53\x05\x4c\x93\x49\x5a\x19\x9b\x79\xa0\x0d\xd0\x64\x37\x9e\xe3\xb2\x54\x61\x35\x4d\x26\xb9\x09\xab\x2a\xfd\x46\x63\xf1\x21\x25\x0c\x2b\x20\x8b\xb9\xd1\x1f\x7a\x90\x52\x51\x30\xca\x2e\x53\xc4\xe0\x03\xa9\x72\x9a\x04\xaa\x60\xf7\x2c\x25\x50\x6b\xac\x42\x63\x88\xe0\x6b\x65\x08\x8a\x93\x53\xf5\x8f\x56\x01\x72\xa4\xed\x34\xb9\xbe\x79\xf8\xf5\x30\x58\x12\x96\x40\xc1\x80\x9f\x26\x13\xaf\x49\x05\xbd\xda\x53\x5e\xc5\xcc\xf4\xcb\xdd\xc3\x62\xb9\xf8\xf3\x7e\x36\x34\xdd\xbd\x49\x3e\x32\xe6\xfa\xeb\xee\x76\x70\x1a\x87\x4e\xdb\xca\x87\xe3\x5a\xd4\x93\xd5\xbf\x04\x59\xe5\x32\xe5\xf4\x76\x9a\xcc\x67\xd7\xbf\xdd\x5e\x7f\xba\x5d\xb4\xc6\xbf\xff\xd8\x7c\x72\xf5\xfe\x4c\x9e\xc6\xf3\xf1\x68\x2c\x68\x2c\xcd\xd1\x85\x43\x66\xbb\xc3\xac\x2c\x75\x43\xf8\xf9\xf3\xdd\x8f\x9f\x3e\xbf\x4f\x12\x87\xcb\x42\xd5\xe1\x1e\x4c\xcf\xfa\x7d\xf0\x62\x03\xe4\x0d\xba\x40\x4a\xaf\xe3\x4b\x6c\x08\xf5\xff\xf8\xbf\x86\xad\x0f\x48\x10\xeb\x79\xdb\x9e\x5f\xfd\x0f\xb3\xf9\xef\xb3\xf9\x50\xa5\x15\x99\xf1\xa5\x55\xdb\xf3\x75\x76\x08\x72\x2c\xa4\x47\x8b\x65\xb9\x8d\x0d\xa8\x69\xfd\x6a\xdf\x9b\x93\x08\x3c\xcf\x54\x50\xac\x6c\x74\x00\xaf\x54\x9e\xce\x2c\xe7\x03\x78\x37\x1e\x01\xcf\xfd\x86\xf5\x7f\x23\xb2\x03\xa1\xbe\xa9\x34\x8e\xae\xdb\xf8\x22\xed\xc7\xb5\xa2\xac\x25\x7f\x9d\xe1\x5d\x24\xc3\xa2\x3c\x9a\x33\xc2\x32\xc5\x27\xbf\x75\x3a\x3a\x71\x6d\xc8\x55\x92\x9c\x3d\x12\xc6\xd8\x57\xa0\x6c\x58\xe9\x15\x70\xf4\xb3\x07\x92\x78\xa0\xb2\x4d\xfd\x90\xd5\x23\x74\x31\x12\xfe\x47\x52\x05\x30\x0f\x90\x2e\x46\xc2\x5f\x12\x3e\x45\xcb\x65\xc3\x78\x64\xdb\xcc\xfe\x58\xcc\xe6\xb7\xbb\x43\xa9\xb7\x75\xe0\x29\x00\x39\x65\x97\x04\x2a\xeb\xe8\xa6\xc6\xca\x85\x69\xf2\xed\xa8\xdf\x16\xf3\xdc\xb8\x3c\xd6\xf3\x96\xf9\x1b\xb6\x6d\x2f\x1c\xcd\x61\x89\x6e\xb9\x2f\x9a\x69\x32\xa1\xe3\x81\x37\x2e\xab\xf0\x04\xba\x0a\x18\x5d\x1e\x6d\xfb\x7e\xf7\xd0\xab\x96\xc8\x03\xaa\x24\xdc\x98\xba\x73\x89\xaf\xd4\x1e\x64\x60\xe9\x5f\xd2\x7e\x5f\x65\x78\x09\xc7\xeb\xc7\x0c\xa7\x1b\xe6\xfc\x5a\x99\xcf\x7e\x9a\xdd\xdc\x2f\x96\xf7\xf3\x9b\xdb\xc5\xa1\x63\xb8\x12\xee\xd2\x56\x77\x14\xa1\xd0\xcf\xe6\x12\xd6\x14\x80\x98\xd2\xd4\x83\xb4\x17\xeb\x1d\xa3\xad\xfa\x07\x08\xbf\x9b\x74\x96\x6f\xa7\x0f\x49\x8c\x40\x10\x68\xa4\x4c\xa3\xb5\xa0\x83\x41\x17\x1b\xc1\x10\x4e\xb2\x88\x7b\x1e\x02\x0d\x86\x71\xc4\xf4\x51\x22\x91\xaf\xac\xad\x13\x01\x9e\xb3\x0d\xba\x20\x89\x07\x04\x85\x71\x19\x90\x8f\x4f\x43\x03\x20\x63\xae\xf3\x99\x43\x60\x84\xde\xc5\xc8\xf9\x3d\x52\xae\x9c\xf1\x5c\x1f\xda\x38\xd1\x66\x56\xde\xe8\x2f\x98\x46\xef\xe4\x86\xbd\x3c\x7e\x95\x65\xdc\xd0\x4f\x10\x39\x7b\x5a\xd5\xc9\xe4\xd1\x3f\x63\x2e\x10\xbd\xad\x55\x2d\xbe\x5b\xe9\xa3\xe4\x3e\x14\x75\xa3\xc2\xcd\x41\x03\x74\x01\x0f\x90\x21\x80\x1d\x88\x9c\x9d\xd9\x04\xf4\x40\x97\xf0\x00\x35\x78\x86\x02\x76\x40\x17\x50\x21\x65\x81\xc9\x7f\x82\x5c\x80\x3d\xa8\xc0\x65\x3f\x42\x24\xec\xfa\xb8\x88\xf1\x2d\x74\x0f\xf2\xca\xf7\x03\x52\x26\x8b\xb9\x3a\x8d\x5b\xc0\xbf\x95\xe3\x2e\xe0\x09\x22\x6f\x61\x82\xf2\xeb\x68\xf6\x0e\x44\xd6\xfb\xe6\x26\x28\x5b\x47\x62\x8d\x8f\x56\xf1\x01\xd8\x05\x4a\x58\x23\xb1\x77\xd0\x09\x23\xe1\x47\xca\x99\x0a\xd6\x46\x48\xb8\xeb\xf9\xa2\xfb\xe7\x93\xb1\x84\x31\x40\x51\xc6\x12\x1e\x6d\x25\x7c\x6b\xd8\x16\xaa\x2c\xe3\x17\xb7\x05\x90\x30\xef\x36\x28\xa7\xae\x5b\x00\x59\x43\xa8\xd7\x55\xf4\x2a\x37\xad\x2f\x23\x86\xe2\xcd\xb8\x51\xd6\x64\x8a\x71\x31\x32\x00\x93\x5d\x9d\x19\x17\x52\x32\x59\x1e\x7d\xe7\xdd\x81\x48\xd8\x7d\x40\x1e\x77\x0b\x20\x93\x03\xbd\x8e\x57\x83\xbd\xad\x84\xef\x6b\x05\x55\x74\x94\x27\x63\x79\x7d\x3d\x2a\x87\x15\xf3\xad\xe1\x19\x23\xe7\xd7\x16\x14\xe3\xae\xad\x07\x92\x78\x00\x95\x8d\x67\x3e\x19\x5f\xe6\x3d\x99\xff\x86\x2c\x6e\x31\x94\x5f\xa5\x78\xfa\xc8\x12\xf3\xe9\xad\x05\x78\xf5\xa7\xc3\x12\xc8\xa3\x53\xf6\x25\x59\x8c\xbc\xe4\xf4\xa0\x2b\x02\xd6\x75\x7e\x0f\xf2\x16\x97\xfa\xa2\x13\xca\x65\x5a\x15\x25\xf3\x3f\x38\x7a\x28\x91\x0f\x95\xb1\x8c\xab\x8b\x86\xb9\x48\xdc\xd1\xa1\x67\xca\x7b\x1b\x22\xea\xbe\x94\x5f\x73\x5a\x92\xa6\xfd\x8b\xbc\xff\x06\x00\x00\xff\xff\xd8\xcc\x8c\x49\xae\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9134, mode: os.FileMode(420), modTime: time.Unix(1673625958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

