// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x8a\xdb\x3a\x10\xfd\x7d\xf3\x14\x22\x0f\x70\x97\xfb\xd7\x5c\x02\x7b\xd9\x70\x29\x5d\xb6\x90\xdd\x96\xfe\x0b\x63\x79\xea\x68\x23\x6b\xdc\xd1\x78\x9b\xbc\x7d\x71\xbe\x1a\xdb\xc9\x46\x8a\x52\x1a\x08\x01\x59\xc7\xe7\x9c\xd1\x7c\x88\x38\xe3\x04\x9d\x78\xf5\xef\x48\xa9\x57\xca\x37\xbf\x4a\x39\xa8\x30\x53\xe3\xbc\x31\xb6\xf0\xc8\x6f\xc8\xe3\xcd\x7a\x49\xf3\x1a\x64\x91\xa9\x71\x69\x64\xd1\xe4\x7f\x6b\xaa\xee\x72\x26\x59\x20\x5b\x2a\x8d\xbe\x1b\x40\x6a\x60\x31\x60\xe7\x39\x91\x78\x61\xa8\x33\x25\xdc\xe0\xe6\x19\xe3\xf7\xc6\x30\x56\x07\x05\xed\x47\x83\x60\x49\xbc\xce\xd4\xc3\x87\xe7\x8f\xbb\xc5\x9a\xa9\x46\x16\x83\x3e\x53\x63\xaf\x19\x44\x2f\xb6\xef\x9f\x8c\xb6\x5f\xc6\xa2\x71\x05\x38\xbd\xce\xd4\x6c\xfa\xf0\xf9\xe9\xe1\xfe\xe9\x65\x34\x19\x9d\x71\x78\xd9\xc9\x37\x63\x51\x53\x6d\xf6\x46\x76\x31\xe9\x2f\xbf\xe7\x2f\x67\x84\x25\x35\x72\x58\xea\x0b\xfd\xff\xf1\xd3\x7f\xf7\x8f\x23\xa5\x1c\xcd\x2b\xf0\x82\xbc\xdb\x7a\x56\xf7\x4e\xc5\x1b\xb2\x37\xe4\x84\x41\x2f\xc3\x0f\xe7\x14\xea\xcf\xe8\x5f\xe2\xda\x0b\x31\x86\x2a\xef\xee\x1f\xe8\xba\x98\x4a\xcf\xd3\xd9\x97\xe9\xec\x64\x32\x09\x88\x21\x47\x0e\xcf\xe7\xd3\xce\xe6\x25\x53\x05\x08\x44\xb9\xea\x01\xae\x2c\x87\xde\x5b\xce\x1b\xf8\x2b\xa5\x1c\xb6\xeb\x1a\xb8\xe8\x94\x43\x6f\xb9\x25\x8e\x2d\xc5\x7d\xf4\x98\xea\x9c\x56\x7e\xed\x74\x70\xfc\xba\x90\x89\x52\xf1\x8d\x60\x5f\xd6\x0c\x15\x46\x96\x53\x1f\x93\xc2\x5f\x33\xad\xd6\xa1\xc4\x47\x9b\xe3\x4b\x61\xfa\xf5\x65\x3a\x7b\xda\x54\xed\x20\x95\x70\x25\xc8\x0e\xec\x9c\x11\x8a\x75\x37\x9f\x34\x35\x4e\x32\xf5\xcf\x45\x2b\x96\xca\xd2\xb8\x32\xd4\x4c\x67\xfb\x6f\x9f\x08\xef\xd4\xc0\x7e\xe8\x21\x72\xe4\xcc\xeb\x20\x52\xb2\x00\x57\xa8\x1b\xa1\x60\xe6\xee\xfe\x61\xbb\x1e\x48\x09\xec\x64\x35\xd3\x9b\x69\x47\x45\x78\x10\x06\x90\x13\x99\xe9\x9b\x82\x6e\x21\xae\x7d\x1c\x21\xec\x68\x7b\xc2\x6d\xe4\xfc\x08\xe9\x30\x4c\x0e\xd6\x82\x0b\xa6\xcd\x9f\xc8\xd6\xd3\x83\x5c\x1d\x4b\x46\x4d\x5c\x68\xb2\x16\x75\x3b\x06\x43\xf9\x4f\xe1\x52\x12\x7f\xcb\xc3\xa8\xd1\x44\x14\xde\x10\x95\xd4\x82\x1b\x6b\xdb\x1c\x40\x1f\x93\x5d\x7d\x50\x8a\x02\xc6\xca\xb8\x02\xd9\x87\x1f\xc3\x11\x20\x8d\xb9\x3d\xcf\x12\x25\xc2\x7a\x1f\x93\xce\xef\x89\x4b\x70\xc6\xc7\x6a\xe8\xe2\x52\x74\xe4\xe0\x8d\x7e\xa5\x3c\xb8\x0e\x8f\xf6\xa7\xfb\x87\xa2\x88\xb5\x7e\x80\xa4\xb3\xe7\x4d\x7b\x98\x71\xf4\xbf\x30\x37\x70\x6f\xdb\x8e\x1a\x7e\x71\x18\xa2\xd2\x35\x54\xed\x35\x22\xf6\x0c\x8e\x40\x37\x50\x40\x11\x0d\xb0\x07\x49\x67\x8f\x9c\xad\x03\xd0\x2d\x14\x90\x46\x1f\xd1\x01\x7b\xa0\x1b\x74\x21\xb0\x18\xc9\x7f\x80\xdc\x80\x5d\x40\x62\xd9\xf7\x90\x14\x76\xbd\x0f\x62\xf8\xed\x73\x00\xb9\xf2\xf6\x5e\x35\xde\xe8\xa4\x7f\x73\x3a\x11\xfc\x01\x2e\x36\x82\x07\x48\xd2\xe5\x5d\xf4\xd2\x58\x1b\x5e\x3d\x1d\xc0\xd5\x57\xb8\xed\xdb\x05\xfc\x32\xd8\x74\x0f\x92\x62\xba\x30\xa5\x11\xb0\x6d\x00\xad\x09\x0f\x7b\x07\xe6\x03\x06\xc8\xcf\x00\x00\x00\xff\xff\x2d\xf8\xc0\x57\xa9\x14\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5289, mode: os.FileMode(436), modTime: time.Unix(1598139480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
