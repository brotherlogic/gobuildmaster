// Code generated by go-bindata.
// sources:
// config.pb
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6b\x23\x37\x10\xfe\x7c\xf9\x15\xc2\x3f\xe0\x8e\x96\xa3\x1f\x4c\x09\x5c\x89\x69\x4b\x8f\xe4\x48\xd2\xd2\xf6\x8b\x99\xd5\x4e\xd6\xaa\xb5\x9a\xbd\x91\x94\xc6\xfd\xf5\x65\xfd\xb2\xd9\x37\x7b\x25\xcb\x69\x03\x21\x20\xcf\xa3\x67\x46\x33\x7a\x34\x92\x63\x94\x71\x68\x9c\x15\xdf\x5f\x09\xf1\x17\x65\xdb\xbf\x42\x18\x28\x71\x2e\x66\x99\x57\x3a\xb7\xc8\xcf\xc8\xb3\xed\x78\x41\xcb\x0a\xdc\x6a\x2e\x66\x85\x72\x2b\x9f\xbd\x97\x54\x7e\xc8\x98\xdc\x0a\x59\x53\xa1\xe4\x87\x01\xa4\x02\x76\x0a\xf4\x32\x23\x72\xd6\x31\x54\x73\xe1\xd8\xe3\xf6\xb3\x8c\x11\xd6\xe4\x5d\x6b\x88\xf1\xab\x57\x8c\x65\xe3\x54\xfd\x23\xc1\x61\x41\xbc\x99\x8b\x9b\x9f\x1f\x7e\xd9\x0f\x56\x4c\x15\xb2\x53\x68\xe7\x62\x66\x25\x83\x93\xab\x1d\xe5\x75\xc8\x4c\x3f\xdd\x3d\x3c\x2e\x1f\xff\xf8\xb2\x18\x9b\xee\x8b\x12\x1f\x23\xe6\xfa\xf3\xee\x76\x74\x1a\x43\x46\x6a\x6f\xdd\x61\x2d\xea\xc9\xea\x5f\xc6\xdc\x9b\x1c\x8c\xdc\xcc\xc5\xfd\xe2\xe6\xd7\xdb\x9b\x4f\xb7\x8f\x9d\xf1\xef\x3e\xb6\x3f\xb9\xbe\x3a\x92\xa7\xe9\x7c\x3c\x29\x8d\x92\x2a\x75\x70\x61\x9f\xd9\xfe\x70\x54\x96\xfa\x21\xfc\xf8\xf9\xee\x87\x4f\x9f\xaf\x84\x30\xb4\x2c\xa1\x0e\x77\x6f\x7a\xd4\xef\xbd\x17\xcf\xc8\x56\x91\x71\x0c\x72\x1d\x5e\x62\x63\xa8\xff\xc7\xff\x35\x6e\xac\x23\xc6\x50\xcf\xbb\xf6\xf1\xd5\xff\xb0\xb8\xff\x6d\x71\x3f\x56\x69\xc0\x05\x99\xf7\x2b\x2a\xf1\x78\xa5\xed\xc3\x9c\x0a\xea\x49\x53\x55\x6d\x42\x43\x6a\x5b\x9f\xed\x7d\x7b\x92\x04\xcf\x73\x70\x10\x95\x8f\x1e\xe0\x4c\xed\xe9\xcd\x72\x3c\x80\x77\xd3\x11\xc4\xb9\xdf\xb2\xfe\x6f\x64\x76\x24\xd4\x37\x15\xc7\xc9\x75\x9b\x5e\xa4\xdd\xb8\x04\xce\x3b\x02\xd8\x1b\xde\x46\x32\x2e\xcb\x53\x39\x5b\x21\x68\xb7\x92\x2b\x8c\xd1\xb0\x01\xe8\x5a\x88\xa3\x07\xc3\xe4\x8e\x65\x28\x31\x52\x44\xfb\x98\x14\xfe\x8a\xe9\x25\x58\x30\x5a\xc6\x13\x85\xb3\xf8\xfd\x71\x71\x7f\xbb\x15\xe6\x41\xf1\xe0\x8b\x43\x36\xa0\x97\x8c\x90\xf7\x94\x43\x92\x37\x6e\x2e\xbe\x99\xf4\x5b\x53\x51\x28\x53\x84\x7a\xde\x31\x7f\xc3\xd6\xe5\xc4\xf1\xe4\x96\x64\x96\xbb\xee\x6a\x2e\x66\x9c\x2b\x5b\x69\xd8\xcc\xa6\x85\x05\x5f\x50\x7a\x47\xc1\xe5\xd1\xb5\x1f\x9e\xa0\x83\x6a\x09\x94\xe8\x8a\xe9\x59\xd5\xa7\x77\x78\xa5\x0e\x20\x23\x4b\x7f\x4a\xfd\xac\xcf\xe9\x12\x8e\xd7\x1f\x47\x38\xdd\x32\x9f\xac\x95\x77\x11\x67\xa5\xcc\xfb\xc7\x7c\xc2\xce\x3d\x14\x50\xe8\x81\xf3\x6a\x9e\xc2\x5a\x30\x94\x19\xab\xbc\x08\x3e\xe9\xba\x88\x14\xee\x0c\x91\x23\xa5\x72\x00\x39\x3f\x79\xff\x20\xd3\xb7\xfd\xd4\x6d\xf5\x4a\x84\x08\x16\xa3\x24\xce\x25\x69\x8d\xd2\x29\x32\xa1\x11\x8c\xe1\x92\x12\xb8\xe5\x61\x94\xa8\x22\xae\x86\x43\x54\xd2\xa1\xe3\xb5\xae\x13\x81\x36\x66\x5b\xf6\x41\x29\x1e\x30\x96\xca\xe4\xc8\x36\x3c\x0d\x2d\x40\x1a\x73\x9d\xcf\x02\x5d\x44\xe8\x7d\x4c\x3a\xbf\x25\x2e\xc0\x28\x1b\xeb\x43\x17\x97\xee\x07\xe4\x79\xac\x0b\x0d\x24\x9d\x3d\xf3\xf5\xa2\xc6\xd1\xbf\x62\x2e\x10\xbd\xae\xd5\x25\xbc\x8b\x19\xa2\xd2\x7d\x28\xeb\x06\x26\x36\x07\x2d\xd0\x05\x3c\xa0\x08\x21\xea\x41\xd2\xd9\x23\x9b\x83\x01\xe8\x12\x1e\x90\x44\x1b\xa1\x44\x3d\xd0\x05\xd4\x00\x34\x46\xf2\x37\x90\x0b\xb0\x3b\x70\xb1\xec\x07\x48\x0a\xbb\x3c\x2c\x62\x78\x6b\x3d\x80\xbc\xe9\xa3\x4f\xec\x42\xfe\x0d\x26\x76\x21\x1b\x48\x7a\x4b\xe1\xc0\xae\x83\xd9\x7b\x90\xb4\x3e\xb8\x50\x0e\x74\x1d\x89\x56\x36\x58\xcd\x47\x60\x17\x28\x65\x49\x1c\xbd\x93\x1a\x4c\x0a\x3f\x71\x11\xa9\x64\x5d\x44\x0a\x77\x3d\x5f\x70\x3f\xdb\x18\xa7\x30\x3a\x2c\xab\x50\xc2\x83\x6d\x0a\xdf\x1a\x37\x25\x54\x55\xf8\xe2\x76\x00\x29\xcc\xdb\x0d\x1a\x53\xd7\x1d\x40\xd2\x6d\x0b\xe4\xda\x07\xaf\x72\xdb\xfa\xcc\xc7\x14\x06\x95\x5f\xe6\x6a\xbc\xdb\x58\xcf\xa0\x55\x0e\x11\x0f\x27\x23\xb0\xb4\xa7\x35\x65\x5c\xdc\x5d\xb9\x07\x49\x61\xb7\x8e\xe2\xb8\x3b\x80\x34\x39\x90\xeb\x70\x35\xd8\xd9\xa6\xf0\x7d\xf5\xe8\x83\xa3\x6c\x8c\xd3\xeb\xeb\x09\x0c\xf9\xc8\xdb\xc3\x2b\x26\x9d\x5f\x6a\x84\x88\xb7\xb8\x01\x28\xc5\x03\xf4\x3a\x9c\xb9\x31\xbe\xcc\xbd\x35\xfe\xc6\x9a\xdc\x62\x80\x5d\x65\xd4\x7c\x0d\x11\xf2\xe5\x54\x07\x70\x76\x97\x58\x21\x5b\x32\xa0\x4f\xc9\x62\xe0\x23\xa8\x45\xe9\x19\xa3\x9e\xfb\x07\x90\xb7\x78\xf4\x4f\x3a\xa1\x4c\x2e\xa1\xac\x22\xff\xcb\x61\x80\x4a\xf2\xc1\x2b\x1d\xf1\x84\xd1\x32\x4f\x12\x77\x32\x64\x23\xe5\xbd\x0b\x49\xea\xbe\xc0\xae\x63\x5a\x92\xb6\xfd\x69\xde\xa9\x2f\xcb\x48\xfa\xe0\xee\xba\x31\x3e\x49\xf9\x6f\x00\x00\x00\xff\xff\xb8\x4a\x3f\xf7\x45\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9029, mode: os.FileMode(436), modTime: time.Unix(1752639064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

