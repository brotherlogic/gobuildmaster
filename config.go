// Code generated by go-bindata.
// sources:
// config.pb
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xf7\x2b\x8c\xfc\x80\x1d\x36\x1c\xf6\x21\x18\x0a\xdc\xd6\x60\x2b\x76\x68\x8b\x34\x1b\xb6\x7d\x09\x68\x99\x75\x74\x91\x45\x1f\x25\x67\xcd\x7e\xfd\xe0\xbc\xd5\x6f\xa9\xa5\x32\xdd\x0a\x14\x05\x64\x3e\x7a\x48\x91\x7a\x44\xcb\xb5\xda\x7a\xb4\xde\x25\x3f\xbc\x4f\x92\x2f\x94\xee\xfe\x26\x89\x85\x02\xa7\xc9\x24\xad\xb4\xc9\x1c\xf2\x06\x79\xb2\x1b\xcf\x69\x59\x82\x5f\x4d\x93\x49\xae\xfd\xaa\x4a\xbf\x51\x54\x7c\x48\x99\xfc\x0a\xd9\x50\xae\xd5\x87\x1e\xa4\x04\xf6\x1a\xcc\x32\x25\xf2\xce\x33\x94\xd3\xc4\x73\x85\xbb\x67\x29\x23\xac\xa9\xf2\x8d\x21\xc6\xaf\x95\x66\x2c\x4e\x4e\xd5\x3f\x0a\x3c\xe6\xc4\xdb\x69\x72\x7d\xf3\xf0\xeb\x61\xb0\x64\x2a\x91\xbd\x46\x37\x4d\x26\x4e\x31\x78\xb5\xda\x53\x5e\x85\xcc\xf4\xcb\xdd\xc3\x62\xb9\xf8\xf3\x7e\x36\x34\xdd\xbd\x4e\x3e\x46\xcc\xf5\xd7\xdd\xed\xe0\x34\x96\xac\x32\x95\xf3\xc7\xb5\xa8\x27\xab\x7f\x19\xb3\xca\x66\x60\xd5\x76\x9a\xcc\x67\xd7\xbf\xdd\x5e\x7f\xba\x5d\xb4\xc6\xbf\xff\xd8\x7c\x72\xf5\xfe\x4c\x9e\xc6\xf3\xf1\xa8\x0d\x2a\x2a\xf5\xd1\x85\x43\x66\xbb\xc3\x51\x59\xea\x86\xf0\xf3\xe7\xbb\x1f\x3f\x7d\x7e\x9f\x24\x96\x96\x05\xd4\xe1\x1e\x4c\xcf\xfa\x7d\xf0\x62\x83\xec\x34\x59\xcf\xa0\xd6\xe1\x25\x36\x84\xfa\x7f\xfc\x5f\xe3\xd6\x79\x62\x0c\xf5\xbc\x6d\x1f\x5f\xfd\x0f\xb3\xf9\xef\xb3\xf9\x50\xa5\x01\xe7\x64\xcf\x17\xd9\x21\xc2\xb1\x78\x1e\x0d\x95\xe5\x36\x34\x9a\xa6\xf5\xab\x1d\x6f\x4e\x22\xf0\x3c\x03\x0f\x51\xa9\xe8\x00\x5e\x29\x3b\x9d\x59\xce\x07\xf0\x6e\x3c\x82\x38\xf7\x1b\xd6\xff\x8d\xc2\x0e\x84\xfa\xa6\xba\x38\xba\x6e\xe3\x8b\xb4\x1f\x57\xc0\x59\x4b\xfb\x3a\xc3\xbb\x48\x86\x15\x79\x34\x67\x4c\x65\x4a\x4f\x6e\x6b\x55\x70\xe2\xda\x90\xab\x24\x39\x7b\x1e\x8c\xb1\xaf\x10\x8c\x5f\xa9\x15\xc6\x88\x67\x0f\x24\xf1\x00\xb2\x4d\xfd\x30\xaa\x41\xe8\x62\x24\xfc\x8f\x0c\x05\x46\x9e\x1e\x5d\x8c\x84\xbf\x64\x7a\x0a\x96\xcb\x86\xf1\xc8\xb6\x99\xfd\xb1\x98\xcd\x6f\x77\x27\x52\x6f\xeb\xe0\x93\x47\xb6\x60\x96\x8c\x90\x75\x74\x53\x51\x65\xfd\x34\xf9\x76\xd4\x6f\x43\x79\xae\x6d\x1e\xea\x79\xcb\xfc\x0d\x7b\xb6\x17\xce\x65\xbf\x24\xbb\xdc\x17\xcd\x34\x99\x70\xa6\x5d\x69\x60\x3b\x19\x97\x55\x7c\x42\x55\x79\x0a\x2e\x8f\xb6\x7d\xbf\x75\xe8\x55\x4b\xe0\x01\x55\x32\x6d\x74\xdd\xb6\x84\x57\x6a\x0f\x32\xb0\xf4\x2f\x69\xbf\xab\x32\xba\x84\xe3\xf5\xe3\x08\xa7\x1b\xe6\xf1\xb5\x32\x9f\xfd\x34\xbb\xb9\x5f\x2c\xef\xe7\x37\xb7\x8b\x43\xc7\x70\x25\xdc\xa5\xc7\x62\x09\x55\xe8\x67\x73\x09\x6b\x8a\xc8\x91\xd2\xd4\x83\xb4\x17\xeb\x5d\x44\x5b\xf5\x0f\x32\x7d\x37\xe9\x2c\xdf\x4e\x1f\x92\x10\x81\x60\x54\xc4\x99\x22\x63\x50\x79\x7d\xec\x2c\xc7\x23\x18\xc2\x49\x16\x71\xcf\xc3\xa8\x50\x47\x1c\x31\x7d\x94\x48\xe4\x2b\x63\xea\x44\xa0\x8b\xd9\x06\x5d\x90\xc4\x03\xc6\x42\xdb\x0c\xd9\x85\xa7\xa1\x01\x90\x31\xd7\xf9\xcc\xd1\x47\x84\xde\xc5\xc8\xf9\x1d\x71\x0e\x56\xbb\x58\x1f\xda\x38\xd1\x66\x06\xa7\xd5\x17\x4a\x83\x77\x72\xc3\x5e\x1e\x3f\x64\x59\x6c\xe8\x27\x88\x9c\x3d\xad\xea\x64\xc6\xd1\x3f\x63\x2e\x10\xbd\xa9\x55\x2d\xbc\x5b\xe9\xa3\xe4\x3e\x14\x75\xa3\x12\x9b\x83\x06\xe8\x02\x1e\x50\x84\x00\x76\x20\x72\xf6\xc8\x26\xa0\x07\xba\x84\x07\xa4\xd0\x45\x28\x60\x07\x74\x01\x15\x02\x83\x91\xfc\x27\xc8\x05\xd8\x3d\xf8\x58\xf6\x23\x44\xc2\xae\x8e\x8b\x18\xde\x42\xf7\x20\xaf\x7c\x3f\x60\xd0\x59\xc8\xbd\x69\xd8\x02\xfe\x0d\x36\x76\x01\x4f\x10\x79\x0b\xe3\xc1\xad\x83\xd9\x3b\x10\x59\xef\x9b\x6b\x0f\xa6\x8e\xc4\x68\x17\xac\xe2\x03\xb0\x0b\x94\xb0\x22\x8e\xde\x41\x27\x8c\x84\x9f\x38\x8f\x54\xb0\x36\x42\xc2\x5d\xcf\x17\xdc\x3f\x9f\x8c\x25\x8c\x1e\x8b\x32\x94\xf0\x68\x2b\xe1\x5b\xe3\xb6\x80\xb2\x0c\x5f\xdc\x16\x40\xc2\xbc\xdb\xa0\x31\x75\xdd\x02\xc8\x1a\x42\xb5\xae\x82\x57\xb9\x69\x7d\x19\x31\x14\x6f\xc6\x0d\x18\x9d\x41\xc4\xc5\xc8\x00\x4c\x76\x75\xa6\xad\x4f\x59\x67\x79\xf0\x9d\x77\x07\x22\x61\x77\x9e\xe2\xb8\x5b\x00\x99\x1c\xa8\x75\xb8\x1a\xec\x6d\x25\x7c\x5f\x2b\xac\x82\xa3\x3c\x19\xcb\xeb\xeb\x11\x2c\x55\x91\x6f\x0d\xcf\x18\x39\xbf\x32\x08\x11\x77\x6d\x3d\x90\xc4\x03\xac\x4c\x38\xf3\xc9\xf8\x32\xef\xc9\xf1\x6f\xc8\xe2\x16\x03\xdc\x2a\xa5\xd3\x47\x96\x90\x4f\x6f\x2d\xc0\xab\x3f\x1d\x96\xc8\x8e\x2c\x98\x97\x64\x31\xf0\x92\xd3\xa1\xaa\x18\xa3\xae\xf3\x7b\x90\xb7\xb8\xd4\x17\x9d\x50\x36\x53\x50\x94\x91\xff\xbe\xd1\x43\x89\x7c\xa8\xb4\x89\xb8\xba\x68\x98\x8b\xc4\x9d\x2c\xb9\x48\x79\x6f\x43\x44\xdd\x17\xb8\x75\x4c\x4b\xd2\xb4\x7f\x91\xf7\xdf\x00\x00\x00\xff\xff\x99\x06\x5f\xb8\xab\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9131, mode: os.FileMode(420), modTime: time.Unix(1673647457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

