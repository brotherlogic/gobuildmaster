// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xd1\x6e\xdb\x3a\x0c\x7d\xbe\xf9\x0a\x21\x1f\x70\x8b\xbe\x06\x17\x01\x7a\xd1\x60\x18\x56\x74\x40\xda\x0d\x7b\x0b\x64\x99\x75\xb4\xc8\xa2\x47\xc9\x6d\xf2\xf7\x83\x1d\x27\xb1\x65\xb7\x96\xac\xa6\x40\x11\x80\xe2\x11\x8f\x48\x8a\xa4\xa5\xa5\xb6\xa0\xad\x61\xff\xcd\x18\xfb\x8d\x49\xfd\xcb\x98\xe6\x39\x2c\xd8\x3c\x29\xa5\x4a\x0d\xd0\x2b\xd0\xbc\x96\x67\xb8\x29\xb8\xdd\x2e\xd8\x3c\x93\x76\x5b\x26\xff\x0a\xcc\x6f\x12\x42\xbb\x05\x52\x98\x49\x71\xd3\x83\x14\x9c\xac\xe4\x6a\x93\x20\x5a\x63\x89\x17\x0b\x66\xa9\x84\x7a\x8d\xe0\x4f\x29\x09\xf2\x33\x83\xea\x4f\x70\x0b\x19\xd2\x61\xc1\xee\xbf\x3e\x7d\x6b\x84\x05\x61\x01\x64\x25\x98\x05\x9b\x1b\x41\xdc\x8a\xed\x71\xff\xa5\xcf\x4e\x4f\xab\xf5\xcf\xd5\x7a\x68\x2f\xcb\xcd\x4e\x49\x63\x2f\x9b\x55\xff\x04\x69\xa9\x53\xae\xc5\x61\xc1\xd6\xab\xfb\x1f\x8f\xf7\x77\x8f\xcf\xb3\xe5\xec\x1d\x77\x8d\xbb\xe5\x45\x2a\x10\x58\xc8\x93\x57\x1a\x07\xbb\xe2\x8f\x9c\x95\x10\xf0\x1d\x96\xf6\x2c\x72\x89\x7e\x79\xf8\xfe\xff\xdd\xc3\x8c\x31\x8d\x9b\x9c\x1b\x0b\xd4\xa8\x46\xf0\x3e\xca\x05\xa7\xb4\xc3\xdb\x11\xd7\x31\x08\xf4\x59\xb3\xd3\x0e\x0e\xc6\x22\x81\x6f\x7e\x75\xf5\x27\x87\x9d\x4a\xad\x4f\x4e\x1f\x0a\x7a\xe3\xcb\x31\xf6\x39\x6a\x69\xd1\xfb\x72\x74\xd4\x3f\x2b\xf9\xdf\xcd\xd7\x7f\x46\xe9\xbf\x02\x19\x89\x3a\xec\x86\x0f\x80\x3e\x35\x0c\x02\x4b\x6d\x17\xec\x76\x94\x3d\x81\x40\x4a\x05\x2a\x05\xc2\x4a\xd4\xbe\x07\x18\xc2\x4d\xb8\xf4\x0d\x8b\x94\xb0\x48\x70\x6f\x0e\x5a\xf8\x12\x70\x20\x4b\xc6\x26\x5b\x7f\x21\x9e\x83\x25\x2e\x76\xfe\x01\x74\x31\x31\xf6\x0b\xc2\xfd\xc1\xd7\x70\x4b\x79\x24\x63\x56\xbf\x9e\x57\xeb\xc7\xba\x98\xf5\x72\x06\xf6\x16\x48\x73\xb5\x21\xe0\xe9\x61\x62\xee\x1c\x29\x12\x08\x90\x01\xa9\xdf\x47\x45\xf9\xae\x54\xaa\xf2\x03\x54\xa5\xda\xdb\x87\x2e\x28\x86\xc1\xf1\x26\x64\x60\x03\x08\xb8\x98\xab\xb4\x4b\x82\x5c\xea\x14\xc8\xcc\xbb\x74\xdb\xd2\x88\xa6\x03\x7b\x10\x65\x40\xdd\xee\xea\xf7\x1b\x71\x2f\x04\x63\xed\xc3\x63\x8e\x02\xa0\x76\x89\x3d\x4d\x64\x1d\xf1\x72\x36\xd1\x01\x06\x55\x40\xda\x5f\xb4\x43\xdb\xa4\x6f\x3a\x19\xa4\x8c\x6b\x69\x9c\xd3\x0e\x2e\x4e\x89\xbb\x2f\x8f\x82\x50\x80\x71\xb3\xce\x5d\x39\x8e\x9c\xd7\xe2\x90\xa3\x1b\x74\x57\xfe\xbe\x07\x3e\x68\xf9\xbe\xe6\xdf\xb8\xb6\x43\x0e\x38\xcb\xaf\x74\xe1\x2b\x1b\x5c\x55\x55\x5e\x67\x03\xe6\xdb\x4b\xd3\x9b\x75\xd5\xf5\xfc\xf3\xfe\xa2\x3d\xdd\xa2\x38\x65\x8e\x7f\xb5\xe9\x41\x26\x4e\x8a\x79\x69\xa4\x38\xf5\xc7\xa8\x43\x28\x14\x3c\x64\xc2\x6a\xeb\x4f\xb7\x5a\x50\xb5\xec\xdf\x19\xdb\xea\x93\x27\xd2\xce\x2e\xcb\x73\x71\x0f\x1c\x4a\x03\xa9\xf7\x40\x31\x4d\xbd\xbe\x29\xfe\xb6\x5b\xea\xf1\xa3\x84\xe1\x0a\x4c\xd8\xa9\xcf\x90\x18\xeb\x29\xb7\xbc\x19\xe8\xfd\xef\xd9\x00\xe8\xd3\xbe\xc9\x22\xcf\xf2\x2a\xe1\xcd\x3f\x84\x5d\x44\x8c\xed\xba\xc8\x5f\x9e\x43\xc6\x4d\x77\x00\xf1\xf9\x93\x70\xb1\x2b\x8b\xb0\x04\xba\x60\xe2\xed\xe7\x55\x18\x43\xef\x6d\x0b\x14\xc3\x20\xec\xec\x1f\x9d\xda\xf3\xf1\x42\x83\x7d\x43\xda\x99\x02\x20\xf5\x35\xeb\x62\x26\x1b\x3f\xbd\xe3\x84\x9d\x7a\x08\x35\xf1\xce\x12\x97\xe9\x6d\x64\x99\xe7\x69\x1a\x9a\x2c\x67\x48\x4c\xaa\x6c\xb1\x34\xf0\x52\x7f\x0b\xf9\x5a\x77\x20\x31\xd6\x9b\x07\xa0\xc0\x57\x87\x21\xd4\xb5\x9e\x3b\xff\x06\x00\x00\xff\xff\xb1\xd7\x91\xb1\xd6\x16\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5846, mode: os.FileMode(436), modTime: time.Unix(1574427483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
