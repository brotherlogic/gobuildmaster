// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x61\x8b\x9b\x40\x10\x86\x3f\x9f\xbf\x62\xc8\x0f\xe8\xd1\xaf\x52\x02\x57\x22\xa5\xf4\x48\x21\x77\x2d\xfd\x16\xc6\x75\x6a\xb6\xd1\x9d\xed\xec\xec\x11\xff\x7d\xb9\x44\x8f\xea\x25\x55\x1b\x4a\x03\x41\x78\x9d\x71\x9f\x77\x7c\x47\x67\x9d\x92\xd3\x00\xef\x12\x80\x1f\x9c\x1f\xaf\x00\x0e\x6b\x4a\x61\x91\x47\x5b\x15\x81\xe4\x89\x64\x71\xd4\x4b\xde\x7a\xd4\x5d\x0a\x8b\xd2\xea\x2e\xe6\x6f\x0c\xd7\xb7\xb9\xb0\xee\x48\x2a\x2e\xad\xb9\x7d\xd5\xe2\x51\xd4\x62\xb5\xcd\x99\x35\xa8\xa0\x4f\x41\x25\xd2\xf1\x9e\xd0\xcf\x68\x85\xea\x17\x82\xe7\x9f\x41\xa5\x92\xa5\x49\x61\xf5\xf1\xe1\x53\x2b\x7a\x61\x4f\xa2\x96\x42\x0a\x8b\x60\x04\xd5\xec\x4e\xcf\x5f\x26\xa7\xbf\x50\x11\x5d\x81\xce\x34\x29\x6c\xb2\xd5\x97\xf5\xea\x6e\xfd\x98\x2c\x93\x0b\x0e\xc7\x9d\x7c\xb7\x15\x19\xf6\xb6\x33\xd2\xce\x64\x28\xff\xc9\x5f\x2e\x84\x7b\x8e\xfa\x22\x0d\x41\x3f\xdc\x7f\x7e\x7f\x77\x9f\x00\x38\xde\xd6\x18\x94\xa4\x2d\xbd\xc8\xdd\x52\x3c\x91\x04\xcb\x4e\x05\xcd\x7e\xfa\xcb\x39\xd7\xf5\x7f\xf8\xf7\xd4\x04\x65\xa1\xa9\xe4\xfd\xfa\x91\xdc\x3c\x64\x9b\xaf\xd9\xe6\x5c\x72\x24\x3a\xd7\x19\x3f\x17\x9c\xd6\xcf\x18\x7d\x81\x8a\xb3\xf0\x07\x0d\x7f\x99\xfb\xfe\x10\x2e\xf3\xdf\x5c\x13\xfb\x93\x6e\x50\x8a\x5e\xec\x07\xf2\xf3\xc1\x73\x57\xae\x1b\x9e\xb0\xcf\xf9\x10\x1a\x67\x26\x8f\xaf\xdf\xb2\x04\x98\xbf\xf0\xdd\xfa\x0a\xd6\x34\x73\x6d\x86\x3d\xd7\x9c\xef\x85\x0f\xcd\xd4\x83\x7f\x2b\x1e\x89\x4c\xf6\xed\x31\xdb\xac\x8f\xab\xf8\x2a\x36\x74\x50\x12\x87\xd5\x56\x08\x8b\xa6\x1f\x1e\xc3\xd1\x69\x0a\x6f\x47\xb9\x2b\x2e\x4b\xeb\xca\xa9\xe4\xbd\xf2\x7f\xfe\x99\xbf\x49\x96\xbf\x02\x00\x00\xff\xff\xf1\xef\x8f\xd5\xc9\x06\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1737, mode: os.FileMode(420), modTime: time.Unix(1593649207, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
