// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdb\x6e\xdb\x38\x10\x7d\x8e\xbf\x82\xf0\x07\x6c\xb0\xfb\x68\x2c\x0c\xa4\x88\x51\x14\x0d\x52\xc0\x49\x8b\xbe\x19\x23\x6a\x2a\x33\xa6\x38\xea\x90\x4a\xed\x7e\x7d\x21\x5f\x14\x53\xb2\x63\x32\x54\xdb\x00\x81\x01\x6a\x8e\xce\x9c\xe1\x5c\x28\x1a\x65\x1c\x1a\x67\xc5\xff\x23\x21\x9e\x28\xdb\xfe\x0a\x61\xa0\xc4\x89\x18\x67\xb5\xd2\xb9\x45\x7e\x46\x1e\x6f\xd7\x0b\x5a\x54\xe0\x96\x13\x31\x2e\x94\x5b\xd6\xd9\x3f\x92\xca\xeb\x8c\xc9\x2d\x91\x35\x15\x4a\x5e\xf7\x20\x15\xb0\x53\xa0\x17\x19\x91\xb3\x8e\xa1\x9a\x08\xc7\x35\x6e\x9f\x31\x7e\xaf\x15\x63\xd9\x7a\xd0\xfc\x49\x70\x58\x10\x6f\x26\xe2\xf6\xc3\xc3\xc7\xfd\x62\xc5\x54\x21\x3b\x85\x76\x22\xc6\x56\x32\x38\xb9\xdc\xbd\x7f\x3a\xda\xfd\x33\xe6\xb5\xc9\xc1\xc8\xcd\x44\xcc\x67\xb7\x9f\xef\x6f\x6f\xee\x1f\x47\xd3\xd1\x19\x85\x97\x95\x7c\x53\x1a\x25\x55\xea\x20\x64\x1f\x93\xee\xf2\x6b\xfa\x32\x46\x58\x51\xed\xda\xa5\xae\xa3\xef\xef\x3e\xbd\xbb\xb9\x1b\x09\x61\x68\x51\x82\x75\xc8\x7b\xd3\xb3\x7e\xef\xbd\x78\x46\xb6\x8a\x8c\x63\x90\xab\xf0\xcd\x39\x85\xfa\x3b\xfe\xaf\x70\x63\x1d\x31\x86\x7a\xee\xdb\xf7\xfc\xba\x98\x4a\x0f\xb3\xf9\x97\xd9\xfc\x64\x32\x39\x70\x8a\x0c\x19\x3c\x9f\x4f\x7b\x99\x97\x44\xe5\xe0\x20\x4a\x55\x07\xf0\xc6\x72\xe8\xbc\xe5\xbc\x80\xab\x94\x72\xd8\xad\x4b\xe0\xdc\x2b\x87\xce\x72\x43\x1c\x5b\x8a\x87\xe8\x31\x55\x19\xad\xed\xc6\xc8\xe0\xf8\xf9\x90\xa9\x10\xf1\x8d\xe0\x50\xd6\x0c\x25\x46\x96\x53\x17\x93\xc2\x5f\x31\xad\x37\xa1\xc4\x47\xc6\xf1\xa5\x30\xfb\xfa\x38\x9b\xdf\x6f\xab\xb6\x97\x4a\xb8\x76\xc8\x06\xf4\x82\x11\xf2\x8d\x9f\x4f\x92\x6a\xe3\x26\xe2\xdf\x8b\x52\x34\x15\x85\x32\x45\xa8\x18\xcf\xfc\xb7\x4f\x84\x57\x6a\xe0\x30\xf4\x10\x39\x72\xe6\x79\x88\x94\x2c\xc0\x35\xca\xda\x51\x30\xb3\x6f\xdf\x6f\xd7\x3d\x57\x02\x3b\x59\xc5\xf4\xac\x9a\x51\x11\x1e\x84\x1e\xe4\x44\x66\xda\x3a\xa7\x21\x9c\x6b\x1e\x47\x38\x76\x64\x7e\xc2\xa9\x84\x03\xca\xf9\xa9\xe2\x91\x4e\x5b\xb5\xc1\x35\xd4\xa4\x54\x64\x37\xea\x41\x2e\xb6\x86\xab\x08\x41\x3f\x91\xe9\xbf\x93\x72\x44\x88\x1e\x46\x49\x9c\x4b\xd2\x1a\x65\x33\x6e\x43\x45\x9d\xc2\xa5\x14\xd8\x8e\x87\x51\xa2\x8a\x28\xf0\x3e\x2a\xa9\xd5\xd7\x5a\x37\x1b\x81\x36\x26\x8b\xbb\xa0\x14\x0f\x18\x4b\x65\x72\x64\x1b\xbe\x0d\x47\x80\x34\xe6\x66\x3f\x0b\x74\x11\xd2\xbb\x98\x74\x7e\x4b\x5c\x80\x51\x36\xd6\x07\x1f\x97\xe2\x47\x06\x56\xc9\x27\xca\x82\x8b\xfb\xc8\x3e\x5d\x3f\xe4\x79\xac\xf4\x16\x92\xce\x9e\xd5\xcd\x66\xc6\xd1\xbf\x60\x06\x50\xaf\x9b\xae\x16\x7e\x40\xe9\xa3\xd2\x7d\x28\x9b\xe3\x4a\xec\x1e\x1c\x81\x06\xf0\x80\x22\x1a\x60\x07\x92\xce\x1e\x39\xc3\x7b\xa0\x21\x3c\x20\x89\x36\xa2\x03\x76\x40\x03\x74\x21\xd0\x18\xc9\xdf\x42\x06\x60\x77\xe0\x62\xd9\x0f\x90\x14\x76\x79\x08\x62\xf8\x29\xb7\x07\x79\xe3\x57\x02\x83\xca\x93\x2e\x8d\xbc\x00\xfe\x00\x13\x1b\xc0\x16\x92\xf4\x8d\xe0\xe4\x4a\x69\x1d\x5e\x3c\x1d\xc0\x70\x5f\x09\x3b\x42\x07\x76\x15\x1c\x87\x0e\x24\x25\x0e\xb9\x2a\x94\x03\xdd\xc4\x54\x2b\x1b\x3c\x4f\x4e\xc0\x06\x28\x26\x49\x1c\x5d\xcb\x2d\x26\x85\x9f\xb8\x88\xec\xa5\x3e\x22\x85\xbb\x79\x5f\xf0\x49\xbe\x35\x4e\x61\x74\x58\x56\xa1\x84\x07\xdb\x14\xbe\x15\x6e\x4a\xa8\xaa\xf0\xe0\x7a\x80\x14\xe6\x6d\xab\x88\xc9\x6b\x0f\x90\x76\x34\x95\xab\x3a\x38\xca\x2f\xd6\x49\xb5\x0c\x76\x99\x51\x7b\xb7\x18\x72\x73\xea\x01\x86\xbc\x10\xae\x90\x2d\x19\xd0\xdd\x8f\xdd\x37\x34\x48\x8b\xb2\x66\x8c\xba\xda\xeb\x41\xfe\xd0\x05\xdf\x6b\x9b\xf7\x2b\x00\x00\xff\xff\x5b\x81\x26\x5f\x25\x1a\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6693, mode: os.FileMode(436), modTime: time.Unix(1604090351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
