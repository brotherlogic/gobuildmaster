// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x8a\xdb\x3c\x10\xbd\xfe\xf2\x14\x22\x0f\xf0\x2d\xbd\x35\x25\xb0\x65\x43\x29\x5d\xb6\x90\xdd\x96\xde\x05\x59\x9e\x3a\xda\xc8\x1a\x77\x34\xda\x26\x6f\x5f\x9c\xc4\x69\x6c\xe7\x47\x8a\x52\x1a\x08\x01\x79\x4e\xce\x99\xd1\x99\x91\xb0\xd5\x96\xc1\xb2\x13\xef\x47\x42\xbc\x62\xbe\xf9\x15\xc2\xca\x0a\x32\x31\xce\xbd\x36\x85\x03\x7a\x03\x1a\x6f\xd6\x4b\x9c\xd7\x92\x17\x99\x18\x97\x9a\x17\x3e\xff\x5f\x61\x75\x97\x13\xf2\x02\xc8\x60\xa9\xd5\xdd\x00\x52\x4b\x62\x2d\xcd\x3c\x47\x64\xc7\x24\xeb\x4c\x30\x79\xd8\x3c\x23\xf8\xe9\x35\x41\xb5\x57\xd0\x7c\x94\x64\x28\x91\xd6\x99\x78\xf8\xf4\xfc\x79\xb7\x58\x13\xd6\x40\xac\xc1\x65\x62\xec\x14\x49\x56\x8b\xed\xff\x4f\x46\xdb\x2f\x41\xe1\x6d\x21\xad\x5a\x67\x62\x36\x7d\xf8\xfa\xf4\x70\xff\xf4\x32\x9a\x8c\x4e\x64\x78\x39\x93\x1f\xda\x80\xc2\x5a\xb7\x89\xec\x6a\xd2\x5f\x3e\x97\x5f\x4e\x20\x97\xe8\x79\xbf\xd4\x17\xfa\xf1\xf1\xcb\x87\xfb\xc7\x91\x10\x16\xe7\x95\x74\x0c\xb4\x0b\x3d\xa9\x7b\xa7\xe2\x0d\xc8\x69\xb4\x4c\x52\x2d\xc3\x37\xe7\x18\xea\xdf\xe8\x5f\xc2\xda\x31\x12\x84\x2a\xef\xc6\x5f\xf0\xcd\xf3\x74\xf6\x6d\x3a\x3b\xe6\x1c\xf2\xd6\xb6\x89\x1f\x33\xce\x2e\x9f\x4b\xea\x0b\xc9\x32\x4a\x7e\x0f\x70\xa5\xef\xbb\x45\x38\xad\xff\xbf\x14\xdb\x6f\xd7\x95\xa4\xa2\x63\xfb\xde\x72\x43\x1c\xdb\x72\x6d\xf1\x08\xeb\x1c\x57\x6e\x6d\x55\x70\xf9\xba\x90\x89\x10\xf1\x0d\xdf\xb6\x2f\xc9\x0a\x22\xdb\xa6\x8f\x49\xe1\xaf\x09\x57\xeb\x50\xe2\x83\xe0\x41\x2b\x5e\x74\xd1\xf4\xfb\xcb\x74\xf6\xb4\xe9\xce\x81\x93\x60\xc5\x40\x56\x9a\x39\x81\x2c\xd6\x5d\x3f\x29\xf4\x96\x33\xf1\xee\x62\x2a\x06\xcb\x52\xdb\x32\x34\x99\x4e\xf8\x5f\x9f\xfc\x67\x7a\xa0\x3d\xdc\x00\x28\xf2\x6c\xeb\x20\x52\x5c\x00\x2b\x50\x9e\x31\x98\xb9\x1b\x3f\x1c\xcb\x03\x29\x81\x83\xac\x26\x7c\xd3\xcd\x91\x10\x5e\x84\x01\xe4\x88\x33\x9d\x2f\xf0\x16\xe2\x9a\xc7\x11\xc2\x0e\xc2\x13\x6e\x1d\xa7\x4f\x8f\x0e\xc3\x64\x9f\x5a\x70\xc3\x34\xfe\x89\x1c\x3d\x3d\xc8\xd5\xb5\x24\x50\x48\x85\x42\x63\x40\xb1\x46\x1b\xca\x7f\x0c\x97\x62\xfc\x2d\x0f\x81\x02\x1d\xd1\x78\x43\x54\xd2\x08\xf6\xc6\x34\x1e\x00\x17\xe3\xae\x3e\x28\x45\x01\x41\xa5\x6d\x01\xe4\xc2\xb7\xe1\x00\x90\xc6\xdc\xec\x67\x09\x1c\x91\x7a\x1f\x93\xce\xef\x90\x4a\x69\xb5\x8b\xd5\xd0\xc5\xa5\xe8\xc8\xa5\xd3\xea\x15\xf3\xe0\x3e\x3c\x88\x4f\xcf\x5f\x16\x45\x6c\xea\x7b\x48\x3a\x7b\xee\x9b\xcd\x8c\xa3\xff\x83\xb9\x41\xf6\xa6\x99\xa8\xe1\x17\x87\x21\x2a\x5d\x43\xd5\x5c\x23\x62\xf7\xe0\x00\x74\x03\x05\x18\x31\x00\x7b\x90\x74\xf6\xc8\xb3\x75\x00\xba\x85\x02\x54\xe0\x22\x26\x60\x0f\x74\x83\x29\x24\x0d\x44\xf2\xef\x21\x37\x60\x67\xc9\xb1\xec\x2d\x24\x85\x5d\xb5\x45\x0c\xbf\x7d\x0e\x20\x57\xde\xde\x2b\xef\xb4\x4a\x7a\x6b\xd3\xa9\xe0\x2f\x69\x63\x2b\xb8\x87\x9c\xaf\x60\xd0\x25\x86\xa5\x5b\x06\xd3\xf7\x20\xe7\xe9\x7f\x07\x00\x00\xff\xff\x38\x3a\xdc\xd7\x95\x13\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5013, mode: os.FileMode(436), modTime: time.Unix(1597798356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
