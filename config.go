// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x6f\xdb\x36\x10\xfe\xdc\xfc\x0a\xc1\x3f\x60\xc5\x86\x62\x1f\x8c\x21\x40\xb7\x18\x5b\xb0\x22\x0d\x1c\x6f\xd8\x3e\x19\x27\xea\x22\xb3\xa6\x78\xea\x91\xcc\xe2\xfd\xfa\x41\x7e\x8b\x5e\xec\x98\x57\x6a\x6d\x80\xc0\x00\x75\x0f\x9f\xbb\xe3\xf1\xe1\x89\xb2\xda\x7a\xb4\xde\x65\x3f\x5d\x65\xd9\x27\xca\xb7\xbf\x59\x66\xa1\xc2\x69\x36\xc9\x83\x36\x85\x43\x7e\x42\x9e\x6c\xc7\x4b\x5a\xd6\xe0\x57\xd3\x6c\x52\x6a\xbf\x0a\xf9\x77\x8a\xaa\xb7\x39\x93\x5f\x21\x1b\x2a\xb5\x7a\x3b\x80\xd4\xc0\x5e\x83\x59\xe6\x44\xde\x79\x86\x7a\x9a\x79\x0e\xb8\x7d\x96\x33\xc2\x9a\x82\x6f\x0d\x31\x7e\x0e\x9a\xb1\x3a\x3a\xd5\xfc\x29\xf0\x58\x12\x6f\xa6\xd9\xcd\xed\xc3\xef\xfb\xc1\x9a\xa9\x46\xf6\x1a\xdd\x34\x9b\x38\xc5\xe0\xd5\x6a\x47\x79\x1d\x33\xd3\x6f\x1f\x1f\x16\xcb\xc5\xdf\xf7\xb3\x53\xd3\xdd\xeb\xec\xdd\xcb\x5c\xcd\x3f\x63\x11\x6c\x01\x56\x6d\xa6\xd9\x7c\x76\xf3\xc7\xdd\xcd\xfb\xbb\x45\x67\xfc\xc7\x77\xed\x27\xd7\x57\x67\x52\x7b\x39\x85\x8f\xda\xa0\xa2\x5a\x1f\x32\xb8\x5f\x8c\xfe\xb0\x28\xb1\xfd\x10\x7e\xfd\xf0\xf1\xe7\xf7\x1f\xae\xb2\xcc\xd2\xb2\x02\xe7\x91\xf7\xa6\x67\xfd\xde\x7b\xf1\x84\xec\x34\x59\xcf\xa0\xd6\xf1\x55\x71\x0a\xf5\x6d\xfc\x5f\xe3\xc6\x79\x62\x8c\xf5\xbc\x6b\x2f\x2f\xd8\x87\xd9\xfc\xcf\xd9\xfc\x54\x8d\x29\x13\x9c\xff\xe1\x7c\x95\xed\x43\xbc\x14\xd0\xa3\xa1\xba\xde\xc4\x86\xd3\xb6\x1e\x33\x98\xf6\xbc\x09\xc1\x14\xe0\x41\xb4\x3c\x3d\xc0\x17\xaa\x47\x6f\x96\xf3\x01\xbc\xb9\x1c\x81\xcc\xfd\x96\xf5\xd7\x11\xca\x31\x42\xbd\x1c\xd7\x6e\x5c\x01\x17\x1d\x09\xeb\x0d\x6f\x75\xfa\xb4\xb0\x5e\x4c\x33\x53\x9d\xd3\xb3\xdb\x58\x15\x9d\xeb\x2e\xe4\x3a\xcb\xce\xca\xfa\x25\xf6\x15\x82\xf1\x2b\xb5\x42\x89\x06\x0e\x40\x29\x1e\x40\xf1\xd4\x3c\x14\x1d\xcd\x7d\x4c\x0a\xff\x23\x43\x85\xc2\x43\xa0\x8f\x49\xe1\xaf\x99\x9e\xa3\x45\xaf\x65\x2c\xdf\x48\xb3\xbf\x16\xb3\xf9\xdd\xf6\xac\x19\x6c\x26\x7c\xf6\xc8\x16\xcc\x92\x11\x8a\x9e\xfa\x29\x0a\xd6\x4f\xb3\xef\x2f\x86\x62\xa8\x2c\xb5\x2d\x63\x83\xe9\x98\xff\x8f\x0d\xd4\x2b\x27\xae\x5f\x92\x5d\xee\xea\x68\x9a\x4d\xb8\xd0\xae\x36\xb0\x99\x5c\x16\xc7\x1c\x91\x85\xed\x64\x07\x91\x52\x31\xf8\x8c\x2a\x78\x8a\x66\xee\xda\x0f\x1b\x92\x81\x2b\x91\x47\x5c\xcd\xf4\xa4\x9b\x66\x28\x3e\x09\x03\xc8\x89\x65\x7f\xed\xf4\x70\xa1\xa0\x31\x1c\x6f\x1e\x0b\x9c\x6e\x99\xcb\xeb\x74\x3e\xfb\x65\x76\x7b\xbf\x58\xde\xcf\x6f\xef\x16\xfb\x9e\xe3\x3a\xb1\x04\x0e\x85\x1a\x7b\x60\xb4\xcd\x23\x0a\x20\xde\x91\xa6\xaa\x85\xe2\x39\x80\x5c\x4c\xe9\x1b\x41\xfb\xf6\x2f\x32\xb5\x5b\xd1\x6d\x6c\x5b\x05\xcb\x62\x24\x8c\x51\x11\x17\x8a\x8c\x41\xe5\x35\xd9\xd8\xa0\x4e\xe1\x52\xf2\xba\xe3\x61\x54\xa8\x05\x1a\x33\x44\x25\x9d\x4c\xc1\x98\x66\x21\xd0\x49\x36\x4b\x1f\x94\xe2\x01\x63\xa5\x6d\x81\xec\xe2\x97\xa1\x05\x48\x63\x6e\xd6\xb3\x44\x2f\x08\xbd\x8f\x49\xe7\x77\xc4\x25\x58\xed\xa4\x3e\x74\x71\x49\xfb\x1b\x9c\x56\x9f\x28\x8f\xde\xdc\x2d\xfb\xf4\xf8\xa1\x28\xa4\xa1\x1f\x21\xe9\xec\x79\x68\x16\x53\x46\xff\x82\x19\x21\x7a\xd3\xa8\x5a\x7c\x3f\x35\x44\xa5\xfb\x50\x35\xad\x94\x74\x0d\x5a\xa0\x11\x3c\x20\x81\x00\xf6\x20\xe9\xec\xc2\x56\x61\x00\x1a\xc3\x03\x52\xe8\x04\x0a\xd8\x03\x8d\xa0\x42\x60\x50\xc8\x7f\x84\x8c\xc0\xee\xc1\x4b\xd9\x0f\x90\x14\x76\x75\x48\x62\x7c\xa3\x3d\x80\x7c\xe1\x1b\x0c\x83\x2e\x62\xee\x6c\xe3\x12\xf8\x0f\x58\x69\x02\x8f\x90\xf4\x16\xc6\x83\x5b\x47\xb3\xf7\x20\x69\x1d\x72\xa9\x3d\x98\x26\x12\xa3\x5d\xb4\x8a\x9f\x80\x8d\x50\xc2\x8a\x58\xbc\x83\x8e\x98\x14\x7e\xe2\x52\xa8\x60\x5d\x44\x0a\x77\x33\x5f\x74\xff\x7c\x34\x4e\x61\xf4\x58\xd5\xb1\x84\x07\xdb\x14\xbe\x35\x6e\x2a\xa8\xeb\xf8\xe4\x76\x00\x29\xcc\xdb\x0d\x2a\xa9\xeb\x0e\x20\xad\x21\x54\xeb\x10\x9d\xe5\xb6\xf5\x38\x62\x98\xbc\x19\x9f\xc0\xe8\x02\x04\xd7\x27\x27\x60\x69\xf7\x7d\xda\xfa\x9c\x75\x51\x46\xdf\xad\xf7\x20\x29\xec\xce\x93\x8c\xbb\x03\x48\x93\x03\xb5\x8e\x57\x83\x9d\x6d\x0a\xdf\xe7\x80\x21\x3a\xca\xa3\x71\x7a\x7d\x3d\x82\xa5\x20\x7c\x6b\x78\xc1\xa4\xf3\x2b\x83\x20\xb8\x91\x1b\x80\x92\x6e\x26\x83\x89\x67\x3e\x1a\x8f\xf3\x9e\x2c\x7f\x43\x4e\x6e\x31\xc0\xad\x72\x3a\x7e\x19\x8a\xf9\xc4\xd7\x01\x8c\xf9\xd5\xb2\x46\x76\x64\xc1\xbc\xa6\x94\x91\xb7\xa3\x0e\x55\x60\x14\x7d\x96\x18\x40\xbe\xd2\xc7\x89\xa4\x73\xcc\x16\x0a\xaa\x5a\x78\x89\x3f\x40\x25\xf9\x10\xb4\x11\x5c\x70\xb4\xcc\x5f\x65\xfd\x2f\x00\x00\xff\xff\xf0\x2f\xcc\x58\x0a\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8970, mode: os.FileMode(436), modTime: time.Unix(1657392059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
