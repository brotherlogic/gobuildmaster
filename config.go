// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x8e\xdb\x36\x10\x7d\x8e\xbf\x82\xf0\x07\x34\x68\x1f\x8d\x62\x81\xb4\x31\x8a\x45\x83\x6d\xe0\x6c\x8b\xbe\x19\x23\x6a\x56\x66\x4c\x71\x94\x21\xe5\xae\xfb\xf5\x85\x7c\x51\x74\xf1\xae\x38\xa1\xd0\x04\x08\x16\xa0\xe7\xe8\xcc\x19\x92\x87\x23\xca\x19\x17\xd0\x05\xaf\x7e\x5e\x28\xf5\x99\xb2\xd3\x5f\xa5\x1c\x94\xb8\x52\xcb\xac\x36\x36\xf7\xc8\x07\xe4\xe5\x69\xbc\xa0\x6d\x05\x61\xb7\x52\xcb\xc2\x84\x5d\x9d\xfd\xa0\xa9\x7c\x9b\x31\x85\x1d\xb2\xa5\xc2\xe8\xb7\x23\x48\x05\x1c\x0c\xd8\x6d\x46\x14\x7c\x60\xa8\x56\x2a\x70\x8d\xa7\xdf\x18\xbf\xd4\x86\xb1\x6c\x33\x68\xfe\x69\x08\x58\x10\x1f\x57\xea\xfd\xfd\xa7\xdf\x2f\x83\x15\x53\x85\x1c\x0c\xfa\x95\x5a\x7a\xcd\x10\xf4\xee\xfc\xfc\xbb\xc5\xf9\x3f\x63\x5e\xbb\x1c\x9c\x3e\xae\xd4\x66\xfd\xfe\xcf\x87\xf7\xef\x1e\x1e\x17\x77\x8b\x17\x14\x4e\x2b\x79\x32\x16\x35\x55\xe6\x2a\xe4\x52\x93\xe1\xf0\x6b\xfa\x32\x46\xd8\x53\x1d\xda\xa1\x61\xa2\xbf\x7d\xf8\xe3\x97\x77\x1f\x16\x4a\x39\xda\x96\xe0\x03\xf2\x25\xf4\xc5\xbc\x2f\x59\x1c\x90\xbd\x21\x17\x18\xf4\x3e\x7e\x72\x6e\xa1\xbe\x4f\xfe\x7b\x3c\xfa\x40\x8c\xb1\x99\xf7\xe3\x47\x79\x4d\x2e\xa5\x4f\xeb\xcd\x5f\xeb\xcd\xad\xc5\xf4\xc4\x50\x62\xd8\x31\xe2\xcb\xeb\xe9\x22\x73\x4a\xd4\x93\xa5\xaa\x3a\xc6\x4a\xea\x46\xcf\x2a\xa8\xf3\xdc\x04\x31\x39\x04\x10\x4d\xd1\x00\xf0\x8d\x7b\x7b\xf0\x94\x97\x05\xbc\x99\x56\x20\x4b\xbf\x13\x2d\xda\x13\xdf\x55\xea\xb4\xae\xf3\xb8\x06\xce\x7b\x36\x36\x18\x6e\x88\xa5\x16\x7a\x2d\x33\x53\x95\xd1\xb3\x3f\x3a\x1d\x5d\xeb\x3e\xe4\x4e\x29\xb9\x81\x5f\xd8\x77\x08\x36\xec\xf4\x0e\x25\x3e\x38\x02\xa5\x64\x00\xf9\xa1\xf9\x51\x74\x4a\x0e\x31\x29\xfc\x67\x03\x93\x1d\x04\x43\x4c\x0a\x7f\xc5\xf4\x1c\x6d\x7a\x9d\x60\xf9\x46\x5a\xff\xfd\xb8\xde\x3c\x9c\xce\x9b\xd1\x66\xc2\xe7\x80\xec\xc0\x6e\x19\x21\x1f\xb8\x9f\xa6\xda\x85\x95\xfa\x71\x52\x8a\xa5\xa2\x30\xae\x88\x15\xd3\x0b\x9f\xcf\x17\x26\xdb\x9b\xce\xa9\x1b\xb6\xe4\xb6\xe7\x75\xb4\x52\x4b\xce\x8d\xaf\x2c\x1c\x97\xd3\xe6\x98\x21\xb2\xb0\xb3\xeb\x21\x52\x56\x0c\x3e\xa3\xae\x03\x45\x33\xf7\xe3\xc7\x4d\xc9\x28\x95\xc8\x23\xae\x62\x3a\x98\xa6\x21\x8a\x2f\xc2\x08\x72\x63\xda\x7d\x9d\xd3\x1c\xc9\x35\x3f\x0b\x12\xeb\x84\xcb\xd7\xe2\x66\xfd\xeb\xfa\xfe\xe3\xe3\xf6\xe3\xe6\xfe\xe1\xf1\xd2\x57\xdc\x25\x4e\xf3\x75\x31\xc6\x1e\x0a\xdd\xf0\x88\x49\x8e\x4f\xa4\x59\xb9\x42\x83\x1c\x41\x26\x4b\xfa\x46\xd0\xa2\xfd\x8b\x4c\x3f\x2d\x07\x45\x3e\xb9\x94\x8a\xb1\x29\x46\x4d\x9c\x6b\xb2\x16\x75\x30\xe4\x62\x45\xdd\xc2\xa5\xd4\xf5\xcc\xc3\xa8\xd1\x08\x7c\x64\x8c\x4a\x3a\x7d\x6a\x6b\x9b\x89\x40\x2f\xd9\x2c\x43\x50\x4a\x06\x8c\xa5\x71\x39\xb2\x8f\x9f\x86\x0e\x20\x8d\xb9\x99\xcf\x02\x83\x40\xfa\x10\x93\xce\xef\x89\x0b\x70\xc6\x4b\x73\xe8\xe3\x92\xf6\x37\x78\xa3\x3f\x53\x16\xbd\xb9\x3b\xf1\xe9\xfa\x21\xcf\xa5\xd2\x5b\x48\x3a\x7b\x56\x37\x93\x29\xa3\xff\x8a\x99\x41\xbd\x6d\x5c\x2d\xbe\x67\x1a\xa3\xd2\x73\x28\x9b\x76\x49\x3a\x07\x1d\xd0\x0c\x19\x90\xc0\x00\x07\x90\x74\x76\x61\xab\x30\x02\xcd\x91\x01\x69\xf4\x02\x07\x1c\x80\x66\x70\x21\xb0\x28\xe4\x6f\x21\x33\xb0\x07\x08\x52\xf6\x2b\x24\x85\x5d\x5f\x8b\x18\xdf\x4c\x8f\x20\xdf\xf8\x96\xc2\x60\xf2\xa4\x1b\xd8\x5e\x01\xff\x01\x27\x2d\x60\x0b\x49\x6f\x61\x02\xf8\x7d\x34\xfb\x00\x92\xd6\x21\x17\x26\x80\x6d\x94\x58\xe3\xa3\x5d\xfc\x06\x6c\x86\x25\xac\x89\xc5\x3b\xa8\xc5\xa4\xf0\x13\x17\x42\x07\xeb\x23\x52\xb8\x9b\xe7\x45\xf7\xcf\x6d\x70\x0a\x63\xc0\xb2\x8a\x25\xbc\xc6\xa6\xf0\xed\xf1\x58\x42\x55\xc5\x17\xb7\x07\x48\x61\x3e\x6d\x50\xc9\xba\xee\x01\xd2\x1a\x42\xbd\xaf\xa3\xab\xdc\x8d\x9e\xc7\x0c\x93\x37\xe3\x01\xac\xc9\x41\x70\x45\x72\x03\x96\x76\xa7\x67\x5c\xc8\xd8\xe4\x45\xf4\xfd\xf9\x00\x92\xc2\xee\x03\xc9\xb8\x7b\x80\x34\x3b\xd0\xfb\x78\x37\x38\xc7\xa6\xf0\x7d\xa9\xb1\x8e\x56\xd9\x06\xa7\xaf\xaf\x27\x70\x54\x0b\xdf\x1a\xbe\x62\xd2\xf9\xb5\x45\x10\xdc\xba\x8d\x40\x49\xb7\x8f\xb5\x8d\x67\x6e\x83\xe7\x79\x4f\x96\xbf\x21\x27\xb7\x18\xe0\x77\x19\xb5\x5f\x7f\x62\x3e\xe3\xf5\x00\x73\x7e\x99\xac\x90\x3d\x39\xb0\xaf\x39\x65\xe4\xed\xa8\x47\x5d\x33\x8a\x3e\x3d\x8c\x20\xff\xd3\x07\x88\xd7\x26\xef\xbf\x00\x00\x00\xff\xff\x28\xbc\x22\x48\x7f\x21\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8575, mode: os.FileMode(436), modTime: time.Unix(1647037196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
