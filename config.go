// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6f\x6b\xdb\x3e\x10\x7e\xfd\xcb\xa7\x10\xf9\x00\xbf\xb2\xb7\x61\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xde\x85\xb3\x7c\x73\xd4\x28\x3a\xef\x74\xee\x92\x6f\x3f\x9c\x3f\x5e\x6c\x27\x8d\x54\x79\xac\x50\x02\xb2\x1e\x3f\xcf\x9d\xee\xb9\x13\x76\xc6\x09\x3a\xf1\xea\xfd\x48\xa9\x67\xca\x76\xbf\x4a\x39\x58\xe3\x44\x8d\xb3\xca\xd8\xdc\x23\xbf\x20\x8f\x77\xeb\x05\x2d\x4a\x90\xe5\x44\x8d\x0b\x23\xcb\x2a\xfb\x5f\xd3\xfa\x26\x63\x92\x25\xb2\xa5\xc2\xe8\x9b\x1e\xa4\x04\x16\x03\x76\x91\x11\x89\x17\x86\x72\xa2\x84\x2b\xdc\x3d\x63\xfc\x59\x19\xc6\x75\xa3\xa0\xfe\xd3\x20\x58\x10\x6f\x27\xea\xee\xd3\xe3\xe7\xc3\x62\xc9\x54\x22\x8b\x41\x3f\x51\x63\xaf\x19\x44\x2f\xf7\xef\x9f\x8e\xf6\xff\x8c\x79\xe5\x72\x70\x7a\x3b\x51\xf3\xd9\xdd\xd7\x87\xbb\xdb\x87\xa7\xd1\x74\x74\x21\xc2\xeb\x91\xfc\x30\x16\x35\x95\xe6\x18\xc8\x21\x27\xdd\xe5\xd7\xe2\xcb\x18\x61\x45\x95\x34\x4b\x5d\xa1\x1f\xef\xbf\x7c\xb8\xbd\x1f\x29\xe5\x68\xb1\x06\x2f\xc8\x87\xad\x17\x75\x1f\x54\xbc\x20\x7b\x43\x4e\x18\xf4\x2a\xfc\x70\xce\xa1\xfe\x8d\xfe\x15\x6e\xbd\x10\x63\xa8\xf2\xf6\xfe\x9e\xae\xab\xa5\xf4\x38\x9b\x7f\x9b\xcd\xcf\x16\x93\x80\x18\x72\xe4\xf0\x72\x3d\x1d\xc2\xbc\x16\x54\x0e\x02\x51\x51\x75\x00\x6f\xb4\x43\xe7\x2d\x97\x03\xf8\x2f\xc5\x0e\xfb\x75\x0d\x9c\xb7\xec\xd0\x59\xae\x89\x63\xad\x78\xcc\x1e\x53\x99\xd1\xc6\x6f\x9d\x0e\xce\x5f\x1b\x32\x55\x2a\xbe\x11\x1c\x6d\xcd\xb0\xc6\x48\x3b\x75\x31\x29\xfc\x25\xd3\x66\x1b\x4a\x7c\xb2\x39\xde\x0a\xb3\xef\x4f\xb3\xf9\xc3\xce\xb5\xbd\x52\xc2\x8d\x20\x3b\xb0\x0b\x46\xc8\xb7\xed\x7a\xd2\x54\x39\x99\xa8\x77\x57\x43\xb1\x54\x14\xc6\x15\xa1\xc1\xb4\xb6\xff\xf5\x89\xf0\x8a\x07\x8e\x43\x0f\x91\x23\x67\x5e\x0b\x91\x52\x05\xb8\x41\x5d\x09\x05\x33\xb7\xf7\xf7\xdb\x75\x4f\x4a\x60\x27\x2b\x99\x5e\x4c\x3d\x2a\xc2\x93\xd0\x83\x9c\xa9\x4c\x5f\xe5\x34\x84\xb8\xfa\x71\x84\xb0\x93\xed\x67\x44\x25\x5c\x50\x2e\x4f\x95\x16\xe9\xb4\x89\x36\xd8\x43\x75\x49\x45\x76\xa3\x1e\x64\xb8\x72\x60\xd4\xc4\xb9\x26\x6b\x51\xd7\xc3\x32\x54\xd2\x39\x5c\x8a\x3d\xf6\x3c\x8c\x1a\x4d\x84\x3d\xfb\xa8\xa4\x46\x5d\x59\x5b\x97\x05\xfa\x98\x1a\xec\x82\x52\x14\x30\xae\x8d\xcb\x91\x7d\xf8\x31\x9c\x00\xd2\x98\xeb\xf3\x2c\x50\x22\x42\xef\x62\xd2\xf9\x3d\x71\x01\xce\xf8\x58\x0d\x6d\x5c\x8a\x8e\x0c\xbc\xd1\xcf\x94\x05\x5b\xf3\x64\x7f\x7a\xfc\x90\xe7\xb1\xa1\x37\x90\x74\xf6\xac\xaa\x0f\x33\x8e\xfe\x0f\x66\x80\xe8\x6d\xdd\x64\xc3\xaf\x17\x7d\x54\xba\x86\x75\x7d\xd9\x88\x3d\x83\x13\xd0\x00\x0a\x28\xa2\x01\x76\x20\xe9\xec\x91\x13\xb8\x07\x1a\x42\x01\x69\xf4\x11\x1d\xb0\x03\x1a\xa0\x0b\x81\xc5\x48\xfe\x06\x32\x00\xbb\x80\xc4\xb2\x1f\x21\x29\xec\xfa\x98\xc4\xf0\x3b\x6a\x0f\xf2\xc6\x3b\x3e\x83\xc9\x93\x3e\xf9\xb4\x12\xf8\x0b\x5c\x6c\x02\x1b\x48\xd2\x0d\x5f\xf4\xca\x58\x1b\x6e\x9e\x0e\x60\xb8\x4b\xdd\x9e\x50\xc0\xaf\x82\xf3\xd0\x81\xa4\xe4\x21\x37\x85\x11\xb0\x75\x4e\xad\xf1\xc1\xf3\xe4\x0c\x6c\x00\x33\x69\xe2\x68\x2f\x37\x98\x14\x7e\xe2\x22\xb2\x97\xb6\x11\x49\x27\x00\x7e\x99\x51\xf3\x3d\x27\xe4\x6b\xd5\x09\xe0\x75\xe6\xdf\x01\x00\x00\xff\xff\x18\x72\x1c\x59\x57\x16\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5719, mode: os.FileMode(436), modTime: time.Unix(1602721059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
