// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x61\x8b\xda\x40\x10\xfd\xdc\xfc\x8a\xc5\x1f\xd0\xa3\x5f\x43\x11\xae\x18\x4a\xe9\x61\xc1\xbb\x96\x7e\x93\xcd\x66\x1a\xb7\x26\x3b\xe9\xec\xac\x98\x7f\x5f\xa2\x89\xdc\x26\x6a\x36\xda\x72\x82\x08\x93\x79\xce\x7b\xb3\x6f\x66\x63\xb4\x61\x30\x6c\xc5\xc7\x48\x88\xdf\x98\x1e\x7e\x85\x30\xb2\x84\x58\xcc\x52\xa7\x8b\xcc\x02\xed\x80\x66\x87\x78\x8e\xeb\x4a\xf2\x26\x16\xb3\x5c\xf3\xc6\xa5\xef\x15\x96\x0f\x29\x21\x6f\x80\x0a\xcc\xb5\x7a\x18\x40\x2a\x49\xac\x65\xb1\x4e\x11\xd9\x32\xc9\x2a\x16\x4c\x0e\x0e\xcf\x08\xfe\x38\x4d\x50\x9e\x18\x34\x1f\x25\x19\x72\xa4\x3a\x16\x8b\x2f\xcf\x5f\xdb\x60\x45\x58\x01\xb1\x06\x1b\x8b\x99\x55\x24\x59\x6d\x8e\xff\x3f\x8f\x8e\x5f\x82\xcc\x99\x4c\x1a\x55\xc7\x62\x95\x2c\xbe\x2f\x17\x8f\xcb\x97\x68\x1e\x5d\x50\x38\xae\xe4\x97\x2e\x40\x61\xa5\x3b\x21\x6d\x4f\xfa\xe1\x6b\xfa\x52\x02\xb9\x45\xc7\xa7\x50\x9f\xe8\xe7\xa7\x6f\x9f\x1e\x9f\x22\x21\x0c\xae\x4b\x69\x19\xa8\x4d\xbd\xc8\xbb\x65\xb1\x03\xb2\x1a\x0d\x93\x54\xdb\xf0\xc3\x39\x87\x7a\x1b\xfe\x5b\xa8\x2d\x23\x41\x28\x73\x3f\x7f\xc4\x37\xcf\xc9\xea\x47\xb2\x3a\xe7\x1c\x72\xc6\x74\xc2\xcf\x19\xa7\xd5\x33\xc6\x3e\x93\x2c\x27\xd1\xef\x01\x6e\xf4\xbd\xdf\x84\xcb\xfc\xdf\xdd\x63\xfb\x63\x5c\x49\xca\x3c\xdb\xf7\xc2\x4d\xe1\xa9\x23\xd7\x35\x8f\xb0\x4a\x71\x6f\x6b\xa3\x82\xdb\xe7\x43\xe6\x42\x4c\x1f\xf8\x6e\x7c\x49\x96\x30\x71\x6c\xfa\x98\x7b\xea\x57\x84\xfb\x3a\xb4\xf0\xab\xe4\x11\xcb\x24\x3f\x5f\x92\xd5\xf2\x30\x8a\x03\xdb\xc0\x9e\x81\x8c\x2c\xd6\x04\x32\xab\x7d\xf3\x28\x74\x86\x63\xf1\x61\x94\x77\x81\x79\xae\x4d\x1e\xca\xdc\x4b\xff\xef\x6b\xfe\x8a\xe1\xbb\x9b\x0c\x80\x26\x5e\x64\x1e\xe2\x9e\x23\x87\x3d\x28\xc7\x18\x5c\xd9\xcf\x1f\xee\xe0\x01\x95\xc0\xad\x55\x11\xee\x74\xb3\xff\xc3\x9b\x30\x80\x0c\xd8\x08\x61\x5d\x86\xff\x82\x5c\xf3\x78\x02\xb1\x57\xe9\x77\xbc\x62\x5c\xbe\x2a\xbc\x0a\xf3\x93\xb4\xe0\x81\x69\xfc\x33\x71\xcf\xf4\x20\x37\xf7\x92\x40\x21\x65\x0a\x8b\x02\x14\x6b\x34\xa1\xf5\xcf\xe1\xae\x1b\xff\x6f\x00\x00\x00\xff\xff\x2e\xb6\xbb\xc4\x3f\x0a\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2623, mode: os.FileMode(436), modTime: time.Unix(1593992556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
