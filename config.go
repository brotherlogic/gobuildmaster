// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x3a\x77\xc9\xbf\x1f\x8e\x63\xd7\x6f\x6d\x64\x79\xa6\x85\x12\x38\xdd\x23\x3f\xf7\xa6\x47\xb6\xd1\x86\xc1\xb0\x15\x9f\x16\x42\xfc\xc6\xf0\xf4\x2b\x84\x91\x29\x04\x62\x19\xe6\x3a\x89\x2c\xd0\x33\xd0\xf2\x64\x8f\x71\x9b\x49\xde\x05\x62\x19\x6b\xde\xe5\xe1\x47\x85\xe9\x55\x48\xc8\x3b\xa0\x04\x63\xad\xae\x7a\x90\x4c\x12\x6b\x99\x6c\x43\x44\xb6\x4c\x32\x0b\x04\x53\x0e\xa7\x35\x82\x3f\xb9\x26\x48\x6b\x06\xc5\x9f\x92\x0c\x31\xd2\x31\x10\xb7\x5f\x1f\xbe\x9d\x8d\x19\x61\x06\xc4\x1a\x6c\x20\x96\x56\x91\x64\xb5\x2b\xf7\x5f\x2d\xca\x7f\x82\x28\x37\x91\x34\xea\x18\x88\xcd\xfa\xf6\xc7\xfd\xed\xcd\xfd\xe3\x62\xb5\x78\x25\xc2\xcb\x91\x3c\xe9\x04\x14\x66\xba\x0a\xe4\x9c\x93\xae\xf9\xad\xf8\x42\x02\xb9\xc7\x9c\x6b\x53\x97\xe8\x97\xbb\xef\x9f\x6f\xee\x16\x42\x18\xdc\xa6\xd2\x32\xd0\xd9\xf5\x55\xde\x67\x16\xcf\x40\x56\xa3\x61\x92\x6a\xef\x5e\x9c\x21\xd4\xfb\xf0\x97\x09\x10\xbb\x13\x6f\xb8\xaf\x84\x18\x5f\xed\x76\xd6\xc6\x75\xf4\x00\xe8\x42\xdf\x3e\xac\x37\x3f\xd7\x9b\xa1\xce\xa5\xdc\x98\x6a\x93\xaa\x71\x15\xe6\x86\x03\x71\x7d\x91\xfd\x1e\x8e\x96\x91\xc0\x95\x78\xdb\xff\xbf\x72\x1e\xe8\x81\x4b\xec\x23\xc2\x2c\xc4\x83\x3d\x1a\xe5\x1a\x40\x07\x32\xa5\xf2\x19\xe1\xe1\xe8\xfa\xdc\x86\xf3\x85\xac\xad\x7f\x3d\xae\x37\xf7\xa7\x09\xe8\xe5\x0d\x0e\x0c\x64\x64\xb2\x25\x90\xd1\xd1\xb3\xe6\x25\x45\x02\x05\x7a\x44\xcb\xf6\x51\x93\x72\x97\x27\x49\x91\x07\xb0\x23\x26\xb6\x07\xf2\x62\xe0\x1a\xaa\x92\x14\x2d\xfb\x79\xab\xcd\x45\xce\x3d\xa3\x4f\xd1\x68\x46\xe7\xb8\x5b\xee\xb3\xeb\xdb\x87\x8b\xf4\xe1\x00\x2a\x1f\xc1\xbf\xed\xdf\x17\x80\x5e\x15\x1d\xc7\xbf\xd0\x1c\xf7\xee\x79\xf1\xf6\x90\xf6\x7a\xe4\x8b\x65\xf7\x86\x6d\xba\x7b\x1f\x96\xad\x5d\x56\x75\xc2\x9c\xe7\xfd\x89\x64\x0a\x23\x55\xbd\x8b\x99\x69\xd2\x42\x00\x6a\x8a\x60\x75\x47\x6c\x99\x57\x0b\xcf\x6a\x55\x62\x15\x4a\xb5\xcf\xb3\xb1\x12\xd7\x44\x79\x0e\x1d\x49\x1d\x5d\x7b\xd7\x8d\x40\x21\x45\x0a\x93\x04\x14\x6b\x34\xae\x01\x0c\xe1\xfc\x5b\xbe\xdc\x4d\x46\x91\x7b\xf3\x74\x20\x53\x74\xa2\xdc\x2a\x06\x1e\x31\x75\x5d\xcc\x2c\x37\xf9\xf2\x21\x7f\xa5\x61\xbb\xec\x13\xae\xed\xfe\x79\x3f\x6d\x91\x68\xcb\xae\x61\xb7\x00\x33\xcd\x2b\x41\xaa\x4d\x04\xd4\x8d\xb9\x69\xf5\xd1\x45\xd7\x7c\x5b\xa4\x58\x1a\x6d\x3b\xe7\xc5\xe0\xe2\x9c\x3c\x32\x42\x05\x76\xa8\xf2\xcd\x95\x55\x79\x26\xcc\xc4\x21\xc5\xee\xb1\xd9\xb5\xbf\x9e\x81\x37\x34\xde\x79\xbc\x8b\xd7\x27\x6d\xe2\x01\x06\xcd\xa5\x19\x87\xaf\xa5\x8b\x9d\x22\xd4\x2b\x53\x0f\x3e\x2b\x13\xb0\xe3\x4e\x9e\x1a\x32\xe5\xe0\x53\x55\x27\xb9\x5f\xb3\x7a\x10\x4f\xd5\x4a\x73\xab\xd5\xa4\x0f\x21\xad\x0b\x33\x4b\xbb\x77\xce\x60\x07\x32\x5d\x3a\xc2\xbc\x50\x82\x71\x05\x7c\xc1\x4c\x79\xfe\xb8\x5b\xc7\xbb\xdf\x36\x46\x7d\x06\x70\xff\x06\xe0\xfd\x3e\x52\xbd\x03\xfc\x0b\x00\x00\xff\xff\xb3\x2e\x64\xb6\x4e\x14\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5198, mode: os.FileMode(436), modTime: time.Unix(1580260021, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
