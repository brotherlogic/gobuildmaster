// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xed\x8a\xdb\x30\x10\xfc\xdd\x3c\x85\xc8\x03\xf4\xe8\x5f\x53\x02\x57\x2e\x94\xd2\xe3\x0a\xb9\x6b\xe9\xbf\x20\xcb\x5b\x47\x77\xb2\xd6\x5d\xad\x8e\xe4\xed\x8b\x93\x38\x8d\xed\x7c\x48\x27\x97\x06\x42\x40\xde\xc9\xcc\x48\xb3\x2b\x5b\x6d\x19\x2c\x3b\xf1\x71\x22\xc4\x33\xe6\xdb\x5f\x21\xac\xac\x20\x13\xd3\xdc\x6b\x53\x38\xa0\x57\xa0\xe9\x76\xbd\xc4\x65\x2d\x79\x95\x89\x69\xa9\x79\xe5\xf3\xf7\x0a\xab\x9b\x9c\x90\x57\x40\x06\x4b\xad\x6e\x06\x90\x5a\x12\x6b\x69\x96\x39\x22\x3b\x26\x59\x67\x82\xc9\xc3\xf6\x19\xc1\x6f\xaf\x09\xaa\x83\x82\xe6\xa3\x24\x43\x89\xb4\xc9\xc4\xdd\x97\xc7\xaf\xfb\xc5\x9a\xb0\x06\x62\x0d\x2e\x13\x53\xa7\x48\xb2\x5a\xed\xfe\x7f\x36\xd9\x7d\x09\x0a\x6f\x0b\x69\xd5\x26\x13\x8b\xf9\xdd\xf7\x87\xbb\xdb\x87\xa7\xc9\x6c\x72\xc6\xe1\x75\x27\xbf\xb4\x01\x85\xb5\x6e\x8d\xec\xf7\xa4\xbf\x7c\xc9\x5f\x4e\x20\x5f\xd0\xf3\x61\xa9\x2f\xf4\xf3\xfd\xb7\x4f\xb7\xf7\x13\x21\x2c\x2e\x2b\xe9\x18\x68\x5f\x7a\x56\xf7\x5e\xc5\x2b\x90\xd3\x68\x99\xa4\x7a\x09\x3f\x9c\x53\xa8\xff\xa3\xff\x05\x36\x8e\x91\x20\x54\x79\xb7\xfe\x4a\x6e\x1e\xe7\x8b\x1f\xf3\xc5\xa9\xe4\x90\xb7\xb6\x35\x7e\x2a\x38\x7b\x3f\xd7\xd4\x17\x92\x65\x94\xfc\x1e\xe0\x8d\xb9\xef\x6e\xc2\x79\xfd\xef\x52\x62\xbf\x5b\x57\x92\x8a\x4e\xec\x7b\xcb\x0d\x71\x6c\xcb\xb5\x9b\x47\x58\xe7\xb8\x76\x1b\xab\x82\xb7\xaf\x0b\x99\x09\x11\xdf\xf0\x6d\xfb\x92\xac\x20\xb2\x6d\xfa\x98\x14\xfe\x9a\x70\xbd\x09\x25\x3e\x2a\x1e\xb4\xe2\xd5\x14\xcd\x7f\x3e\xcd\x17\x0f\xdb\xee\x1c\x24\x09\xd6\x0c\x64\xa5\x59\x12\xc8\x62\xd3\xcd\x93\x42\x6f\x39\x13\x1f\xae\x5a\x31\x58\x96\xda\x96\xa1\x66\x3a\xe5\xff\x7c\xf2\x5f\xe8\x81\xf6\x72\x03\xa0\xc8\xbb\xad\x83\x48\x49\x01\xac\x41\x79\xc6\x60\xe6\x6e\xfd\x70\x2c\x0f\xa4\x04\x0e\xb2\x9a\xf0\x55\x37\x57\x42\xf8\x26\x0c\x20\x27\x92\xe9\x7c\x81\x63\x88\x6b\x1e\x47\x08\x3b\x2a\x4f\x78\xeb\x38\x7f\x7b\x74\x18\x66\x07\x6b\xc1\x0d\xd3\xe4\x27\x72\xf4\xf4\x20\x6f\xde\x4b\x02\x85\x54\x28\x34\x06\x14\x6b\xb4\xa1\xfc\xa7\x70\x29\xc1\xdf\xf1\x10\x28\xd0\x11\x8d\x37\x44\x25\x8d\x60\x6f\x4c\x93\x01\x70\x31\xe9\xea\x83\x52\x14\x10\x54\xda\x16\x40\x2e\xfc\x18\x8e\x00\x69\xcc\xcd\x79\x96\xc0\x11\xd6\xfb\x98\x74\x7e\x87\x54\x4a\xab\x5d\xac\x86\x2e\x2e\x45\x47\x2e\x9d\x56\xcf\x98\x07\xf7\xe1\x51\x7d\xba\x7f\x59\x14\xb1\xd6\x0f\x90\x74\xf6\xdc\x37\x87\x19\x47\xff\x17\x33\x82\x7b\xd3\x4c\xd4\xf0\x17\x87\x21\x2a\x5d\x43\xd5\xbc\x46\xc4\x9e\xc1\x11\x68\x04\x05\x18\x31\x00\x7b\x90\x74\xf6\xc8\xbb\x75\x00\x1a\x43\x01\x2a\x70\x11\x13\xb0\x07\x1a\x61\x0a\x49\x03\x91\xfc\x07\xc8\x08\xec\x2c\x39\x96\xbd\x85\x5c\x64\xff\x13\x00\x00\xff\xff\xf0\xbd\xc6\xa7\xd3\x11\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4563, mode: os.FileMode(436), modTime: time.Unix(1595806920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
