// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\x5e\x7f\x85\x90\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xcc\x35\xcd\xd1\x0e\x29\x37\xee\xd7\x17\xf2\x45\xab\x8b\x13\x73\x32\x6a\xbb\xc0\x22\x00\x35\x47\x67\x0e\xc9\x39\x1a\x93\xde\xfa\x88\x3e\x86\xec\xc7\x59\x96\x7d\xa1\xfc\xf0\x37\xcb\x3c\x6c\x71\x9e\xdd\xe4\xb5\x75\x45\x40\xde\x21\xdf\x1c\xc6\x4b\x5a\x55\x10\xd7\xf3\xec\xa6\xb4\x71\x5d\xe7\xdf\x19\xda\xbe\xcf\x99\xe2\x1a\xd9\x51\x69\xcd\xfb\x11\xa4\x02\x8e\x16\xdc\x2a\x27\x8a\x21\x32\x54\xf3\x2c\x72\x8d\x87\x67\x8c\x5f\x6b\xcb\xb8\x6d\x33\x68\xfe\x19\x88\x58\x12\xef\xe7\xd9\xdd\xfd\xe7\x5f\x4f\x83\x15\x53\x85\x1c\x2d\x86\x79\x76\x13\x0c\x43\x34\xeb\xe3\xfb\x6f\x67\xc7\xff\x8c\x45\xed\x0b\xf0\x66\x3f\xcf\x96\x8b\xbb\xdf\x1f\xee\x3e\x3c\x3c\xce\x6e\x67\x2f\x28\xbc\xae\xe4\xc9\x3a\x34\x54\xd9\xb3\x90\xd3\x9c\x0c\x87\x5f\xd3\x97\x33\xc2\x86\xea\xd8\x0e\x0d\x13\xfd\xe5\xe3\x6f\x3f\x7d\xf8\x38\xcb\x32\x4f\xab\x2d\x84\x88\x7c\x0a\x7d\x31\xef\x53\x16\x3b\xe4\x60\xc9\x47\x06\xb3\x49\x5f\x9c\x4b\xa8\xff\x27\xff\x0d\xee\x43\x24\xc6\xd4\xcc\xfb\xf1\xa3\xbc\xae\x6e\xa5\xcf\x8b\xe5\x1f\x8b\xe5\xa5\xcd\xf4\xc4\xb0\xc5\xb8\x66\xc4\x97\xf7\xd3\x49\xe6\x35\x51\x4f\x8e\xaa\x6a\x9f\x2a\xa9\x1b\x3d\xa9\xa0\xce\x7b\x15\x62\x0a\x88\x20\x5a\xa2\x01\xe0\x8d\xb5\x3d\x78\xcb\xcb\x02\xde\x5d\x57\x20\x4b\xbf\x13\xfd\x2f\x78\xd6\x14\xba\xae\x8b\x38\x8e\x1b\xe0\xa2\xe7\x59\x83\xe1\x86\x58\xea\x97\xe7\x39\x65\xaa\x72\x7a\x0e\x7b\x6f\x92\x27\xb6\x0f\xb9\xcd\x32\xb9\x5b\x9f\xd8\xd7\x08\x2e\xae\xcd\x1a\x25\xa6\x37\x02\x69\x32\x80\x62\xd7\x3c\x14\x7d\x12\x87\x18\x0d\xff\xd1\xad\x64\xae\x3f\xc4\x68\xf8\x2b\xa6\xe7\x64\x87\xeb\x04\xcb\x0d\x6e\xf1\xe7\xe3\x62\xf9\x70\xf8\xb8\x8c\x8a\x09\x9f\x23\xb2\x07\xb7\x62\x84\x62\x60\x75\x86\x6a\x1f\xe7\xd9\xf7\x57\xa5\x38\x2a\x4b\xeb\xcb\x54\x31\xbd\x70\xb9\x9c\x37\xf7\x32\xa9\x6e\x97\x23\xb2\xb0\x55\xeb\x21\x34\xbb\x02\x9f\xd1\xd4\x91\x92\x99\xfb\xf1\xe3\x2e\x63\x94\x4a\xe2\x37\xab\x62\xda\xd9\xa6\xc3\x49\x9f\x84\x11\xe4\xc2\xd2\x86\xba\xa0\x29\x92\x6b\x1e\x0b\x12\xeb\x84\xcb\xf7\xdb\x72\xf1\xf3\xe2\xfe\xd3\xe3\xea\xd3\xf2\xfe\xe1\xf1\xd4\x28\xdc\x2a\x97\xb9\xb0\xa1\x72\x90\x5c\xfe\xbd\xf0\x54\x05\x49\x2d\x0e\xf7\x5e\xad\x95\xd5\xd4\x81\xd0\x52\x47\x90\xab\xf2\xde\x09\x3a\xb8\xbf\x91\xe9\x87\xa1\xb6\x83\xaf\x65\x29\xc6\xc6\x68\x88\x0b\x43\xce\xa1\x89\x96\x7c\xaa\xa8\x4b\x38\xcd\xbc\x1e\x79\x18\x0d\x5a\x81\x2b\x8d\x51\xaa\xef\x55\xed\x5c\xb3\x10\x18\x24\xa5\x37\x04\x69\x32\x60\xdc\x5a\x5f\x20\x87\xf4\x65\xe8\x00\x74\xcc\xcd\x7a\x96\x18\x05\xd2\x87\x18\x3d\x7f\x20\x2e\xc1\xdb\x20\xcd\xa1\x8f\x53\xd5\x37\x04\x6b\xbe\x50\x9e\x5c\xdc\x9d\x78\xbd\x7e\x28\x0a\xa9\xf4\x16\xa2\x67\xcf\xeb\x66\x31\x65\xf4\xdf\x30\x13\xa8\x77\x8d\xab\xa5\x77\x59\x63\x94\x3e\x87\x6d\xd3\x60\x49\xd7\xa0\x03\x9a\x20\x03\x12\x18\xe0\x00\xa2\x67\x17\x36\x1e\x23\xd0\x14\x19\x90\xc1\x20\x70\xc0\x01\x68\x02\x17\x02\x87\x42\xfe\x16\x32\x01\x7b\x84\x28\x65\x3f\x43\x34\xec\xe6\x3c\x89\xe9\xad\xf9\x08\xf2\xc6\xdf\x35\x0c\xb6\x50\x1d\xd0\xf6\x26\xf0\x2f\xf0\xd2\x09\x6c\x21\xfa\x16\x26\x42\xd8\x24\xb3\x0f\x20\xba\x7e\xbb\xb4\x11\x5c\xa3\xc4\xd9\x90\xec\xe2\x17\x60\x13\x6c\x61\x43\x2c\xae\xa0\x16\xa3\xe1\x27\x2e\x85\x0e\xd6\x47\x68\xb8\x9b\xf7\x25\xf7\xcf\x6d\xb0\x86\x31\xe2\xb6\x4a\x25\x3c\xc7\x6a\xf8\x36\xb8\xdf\x42\x55\xa5\x4f\x6e\x0f\xa0\x61\x3e\x14\xa8\x64\x5f\xf7\x00\xba\x86\xd0\x6c\xea\xe4\x59\xee\x46\x4f\x63\x86\xea\x62\xdc\x81\xb3\x05\x08\x0e\x5c\x2e\xc0\x74\xa7\x80\xd6\xc7\x9c\x6d\x51\x26\x1f\xaf\x0f\x20\x1a\xf6\x10\x49\xc6\xdd\x03\xe8\xec\xc0\x6c\xd2\xdd\xe0\x18\xab\xe1\xfb\x5a\x63\x9d\xac\xb2\x0d\xd6\xef\xaf\x27\xf0\x54\x0b\x7f\x35\x7c\xc3\xe8\xf9\x8d\x43\x10\x9c\xe1\x8d\x40\xaa\xb3\xcc\xda\xa5\x33\xb7\xc1\xaa\xcf\x3c\x84\x75\x4e\xed\x9d\x4d\xca\x4d\x5b\x0f\x30\xe5\xe5\x61\x85\x1c\xc8\x83\x7b\xcd\xad\x12\xcf\x3b\x03\x9a\x9a\x51\x74\x61\x30\x82\xfc\x47\xd7\x06\xaf\x2d\xde\x3f\x01\x00\x00\xff\xff\x17\x6f\x1a\x4d\x22\x21\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8482, mode: os.FileMode(436), modTime: time.Unix(1640296160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
