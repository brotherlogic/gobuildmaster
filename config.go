// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdd\x8a\xdb\x3c\x10\xbd\xfe\xf2\x14\x22\x0f\xf0\x2d\xbd\x35\x25\xb0\x25\xa1\x94\x2e\x29\x64\xb7\xa5\x77\x41\x96\xa6\x8e\x36\xb6\xc6\x1d\x8d\x42\xfc\xf6\xc5\xf9\x6b\x6c\xe7\x47\x5a\xb5\x34\x10\x02\xe3\x39\x39\x67\x46\x67\x46\xb6\xc6\x32\x58\x76\xe2\xfd\x48\x88\x57\xcc\x77\xbf\x42\x58\x59\x41\x26\xc6\xb9\x37\xa5\x76\x40\x1b\xa0\xf1\x2e\x5e\xe0\xb2\x96\xbc\xca\xc4\xb8\x30\xbc\xf2\xf9\xff\x0a\xab\x87\x9c\x90\x57\x40\x25\x16\x46\x3d\x0c\x20\xb5\x24\x36\xb2\x5c\xe6\x88\xec\x98\x64\x9d\x09\x26\x0f\xbb\x67\x04\x3f\xbd\x21\xa8\x4e\x0a\xda\x8f\x92\x0c\x05\x52\x93\x89\xe9\xa7\xe7\xcf\x87\x60\x4d\x58\x03\xb1\x01\x97\x89\xb1\x53\x24\x59\xad\xf6\xff\x3f\x19\xed\xbf\x04\xda\x5b\x2d\xad\x6a\x32\xb1\x98\x4d\xbf\xce\xa7\x8f\xf3\x97\xd1\x64\x74\xa5\xc2\xfb\x95\xfc\x30\x25\x28\xac\xcd\xb1\x90\x43\x4f\xfa\xe1\x5b\xf5\xe5\x04\x72\x8d\x9e\x4f\xa1\xbe\xd0\x8f\x4f\x5f\x3e\x3c\x3e\x8d\x84\xb0\xb8\xac\xa4\x63\xa0\x43\xea\x55\xdd\x07\x15\x1b\x20\x67\xd0\x32\x49\xb5\x0e\x3f\x9c\x4b\xa8\x7f\xa3\x7f\x0d\x8d\x63\x24\x08\x55\xde\xcd\xbf\xe3\x9b\xe7\xd9\xe2\xdb\x6c\x71\xc9\x39\xe4\xad\x3d\x16\x7e\xc9\x38\x87\x7a\xee\xa9\xd7\x92\x65\x94\xfc\x1e\xe0\x8d\xbe\xef\x36\xe1\xba\xfe\xff\x52\x6c\xbf\x8f\x2b\x49\xba\x63\xfb\x5e\xb8\x25\x8e\x1d\xb9\x63\xf3\x08\xeb\x1c\xb7\xae\xb1\x2a\xb8\x7d\x5d\xc8\x44\x88\xf8\x81\x3f\x8e\x2f\xc9\x0a\x22\xc7\xa6\x8f\x49\xe1\xaf\x09\xb7\x4d\x28\xf1\x59\xf2\x1d\xcb\xcc\xbe\xbf\xcc\x16\xf3\xdd\x28\x0e\x6c\x03\x5b\x06\xb2\xb2\x5c\x12\x48\xdd\x74\xcd\xa3\xd0\x5b\xce\xc4\xbb\xbb\xba\x4b\x2c\x0a\x63\x8b\x50\xe5\x9d\xf4\xbf\xbe\xe6\x6f\x18\xfe\x78\x93\x01\x50\xe4\x45\xd6\x41\xa4\x1c\x39\x6c\x41\x79\xc6\x60\xe6\x6e\xfe\x70\x07\x0f\xa4\x04\x6e\xad\x9a\x70\x63\xda\xfd\x1f\xde\x84\x01\x64\xa0\x46\x08\xe7\x35\xfe\x09\x71\xed\xe3\x08\x61\x67\xe9\x09\xaf\x18\xd7\xaf\x8a\x0e\xc3\xe4\x54\x5a\xf0\xc0\xb4\xfe\x89\xdc\x33\x3d\xc8\x9b\x7b\x49\xa0\x90\xb4\xc2\xb2\x04\xc5\x06\x6d\x28\xff\x25\x5c\x8a\xf1\xf7\x3c\x04\x0a\x4c\xc4\xe0\x0d\x51\x49\xfb\xd6\x97\x65\xeb\x01\x70\x31\xee\xea\x83\x52\x14\x10\x54\xc6\x6a\x20\x17\x7e\x0c\x67\x80\x34\xe6\xf6\x3c\x0b\xe0\x88\xd2\xfb\x98\x74\x7e\x87\x54\x48\x6b\x5c\xac\x86\x2e\x2e\x45\x47\x2e\x9d\x51\xaf\x98\x07\xcf\xe1\x59\x7e\x7a\xfd\x52\xeb\xd8\xd2\x4f\x90\x74\xf6\xdc\xb7\x87\x19\x47\xff\x1b\x73\x93\xff\x57\x00\x00\x00\xff\xff\xcf\xc5\x56\x59\x3c\x0e\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3644, mode: os.FileMode(436), modTime: time.Unix(1595025389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
