// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x42\x7e\xc0\x0e\x1b\x0e\xfb\x10\x0c\x05\x6e\x68\xb0\x0d\x3b\xb4\x87\xb6\x1b\xb6\x7d\x09\x68\x99\x75\xb4\xc8\xa2\x8f\x92\xba\x66\xbf\x7e\x70\xda\xb8\x7e\x4b\x2c\x45\xee\xae\x40\x51\x40\xe6\xa3\x87\x14\xe9\x47\x94\x5c\xa3\x8c\x43\xe3\xac\xf8\xe1\x42\x88\xbf\x29\xdb\xff\x15\xc2\x40\x89\x4b\xb1\xc8\xbc\xd2\xb9\x45\x7e\x44\x5e\xec\xc7\x0b\x5a\x57\xe0\x36\x4b\xb1\x28\x94\xdb\xf8\xec\x1b\x49\xe5\xfb\x8c\xc9\x6d\x90\x35\x15\x4a\xbe\x1f\x40\x2a\x60\xa7\x40\xaf\x33\x22\x67\x1d\x43\xb5\x14\x8e\x3d\xee\x9f\x65\x8c\xb0\x25\xef\x5a\x43\x8c\x5f\xbc\x62\x2c\x1b\xa7\xea\x1f\x09\x0e\x0b\xe2\xdd\x52\x5c\xfd\x72\xf7\xeb\xcb\x60\xc5\x54\x21\x3b\x85\x76\x29\x16\x56\x32\x38\xb9\x79\xa6\xbc\x0c\x99\xe9\xe7\x9b\xbb\xfb\xf5\xfd\x9f\x9f\x57\x63\xd3\x7d\x56\xe2\x43\xc4\x5c\x7f\xdd\x5c\x8f\x4e\x63\xc8\x48\xed\xad\x3b\xac\x45\x3d\x59\xfd\xcb\x98\x7b\x93\x83\x91\xbb\xa5\xb8\x5d\x5d\xfd\x76\x7d\xf5\xf1\xfa\xbe\x33\xfe\xfd\x87\xf6\x93\xcb\x8b\x23\x79\x9a\xce\xc7\x83\xd2\x28\xa9\x52\x07\x17\x5e\x32\xdb\x1f\x8e\xca\x52\x3f\x84\x9f\x3e\xdd\xfc\xf8\xf1\xd3\x85\x10\x86\xd6\x25\xd4\xe1\xbe\x98\x1e\xf5\xfb\xc5\x8b\x47\x64\xab\xc8\x38\x06\xb9\x0d\x2f\xb1\x31\xd4\xd7\xf1\x7f\x8b\x3b\xeb\x88\x31\xd4\xf3\xae\x7d\x7c\xf5\xdf\xad\x6e\x7f\x5f\xdd\x8e\x55\x1a\x70\x41\xe6\x78\x91\xbd\x44\x38\x15\xcf\x83\xa6\xaa\xda\x85\x46\xd3\xb6\x3e\xdb\xf1\xf6\x24\x09\x9e\xe7\xe0\x20\x2a\x15\x3d\xc0\x99\xb2\xd3\x9b\xe5\x78\x00\xef\xa6\x23\x88\x73\xbf\x65\xfd\xff\x28\xec\x48\xa8\x6f\xaa\x8b\x93\xeb\x36\xbd\x48\xcf\xe3\x12\x38\xef\x68\x5f\x6f\x78\x1f\xc9\xb8\x22\x4f\xe5\x6c\x83\xa0\xdd\x46\x6e\x30\x46\xbe\x06\xa0\x4b\x21\x8e\xee\x09\x93\x6f\x2c\x43\x89\x91\xfa\xd9\xc7\xa4\xf0\x57\x4c\x4f\xc1\x82\xd1\x32\x9e\x28\x9c\xd5\x1f\xf7\xab\xdb\xeb\xbd\x26\x0f\x8a\x07\x9f\x1c\xb2\x01\xbd\x66\x84\xbc\xa7\x1c\x92\xbc\x71\x4b\xf1\xed\xa4\xdf\x9a\x8a\x42\x99\x22\xd4\xf3\x8e\xf9\x1b\x76\x2d\x27\x76\x26\xb7\x26\xb3\x7e\x6e\xac\x96\x62\xc1\xb9\xb2\x95\x86\xdd\x62\x5a\x58\xf0\x09\xa5\x77\x14\x5c\x1e\x5d\xfb\xe1\xe6\x39\xa8\x96\x40\x89\xae\x98\x1e\x55\xbd\x71\x87\x57\xea\x00\x32\xb2\xf4\xa7\xd4\xcf\xfa\x9c\xe6\x70\xbc\x7e\x1c\xe1\x74\xcb\x7c\xb2\x56\xde\x45\xec\x95\x32\x6f\x55\x4a\xc2\x4b\x7b\xa8\x9d\xd0\xbd\xe6\xd5\x3c\x85\xb5\x60\x28\x33\x56\x79\x11\xbc\xc9\x75\x11\x29\xdc\x19\x22\x47\xaa\xe4\x00\x72\x7e\xde\xfe\x45\xa6\xef\xfa\xa9\xdb\x4b\x95\x08\xd1\x2a\x46\x49\x9c\x4b\xd2\x1a\xa5\x53\x87\x36\x6f\x3a\x82\x31\x5c\x52\x02\xf7\x3c\x8c\x12\x55\xc4\x81\x70\x88\x4a\xda\x6f\xbc\xd6\x75\x22\xd0\xc6\xbc\x91\x7d\x50\x8a\x07\x8c\xa5\x32\x39\xb2\x0d\x4f\x43\x0b\x90\xc6\x5c\xe7\xb3\x40\x17\x11\x7a\x1f\x93\xce\x6f\x89\x0b\x30\xca\xc6\xfa\xd0\xc5\xa5\xfb\x01\x79\x1e\xeb\x42\x03\x49\x67\xcf\x7c\xbd\xa8\x71\xf4\xaf\x98\x19\xa2\xd7\xb5\xba\x84\x37\x30\x43\x54\xba\x0f\x65\xdd\xbb\xc4\xe6\xa0\x05\x9a\xc1\x03\x8a\x10\xa2\x1e\x24\x9d\x3d\xb2\x2f\x18\x80\xe6\xf0\x80\x24\xda\x08\x25\xea\x81\x66\x50\x03\xd0\x18\xc9\xdf\x40\x66\x60\x77\xe0\x62\xd9\x0f\x90\x14\x76\x79\x58\xc4\xf0\xae\x7a\x00\x39\xf3\xc8\xc0\xa0\xf2\x90\xcb\xc4\xb0\x05\xfc\x07\x4c\xec\x02\x36\x90\xf4\x56\xc2\x81\xdd\x06\xb3\xf7\x20\x69\xfd\x6f\xa1\x1c\xe8\x3a\x12\xad\x6c\xb0\x8a\x8f\xc0\x66\x28\x61\x49\x1c\xfd\x06\x35\x98\x14\x7e\xe2\x22\x52\xc1\xba\x88\x14\xee\x7a\xbe\xe0\x3e\xb6\x31\x4e\x61\x74\x58\x56\xa1\x84\x07\xdb\x14\xbe\x2d\xee\x4a\xa8\xaa\xf0\xc5\xed\x00\x52\x98\xf7\x2f\x68\x4c\x5d\x77\x00\x49\xa7\x2c\x90\x5b\x1f\xbc\xca\x6d\xeb\x79\xc4\x30\xf9\x65\x7c\x04\xad\x72\x88\xb8\x2b\x19\x81\xa5\xdd\xa6\x29\xe3\xe2\xce\xc8\x3d\x48\x0a\xbb\x75\x14\xc7\xdd\x01\xa4\xc9\x81\xdc\x86\xab\xc1\xb3\x6d\x0a\xdf\x17\x8f\x3e\x38\xca\xc6\x38\xbd\xbe\x1e\xc0\x90\x8f\x3c\x35\xbc\x62\xd2\xf9\xa5\x46\x88\xb8\x7e\x1b\x80\x52\x3c\x40\xaf\xc3\x99\x1b\xe3\x79\xce\xab\xf1\x27\xd5\xe4\x16\x03\xec\x26\xa3\xe6\xcb\x43\xc8\xf7\xa8\x0e\xe0\xec\xef\x69\x15\xb2\x25\x03\xfa\x94\x2c\x06\xde\x7b\x5a\x94\x9e\x31\xea\x86\x7f\x00\x79\x8b\x7b\xfe\xa4\x1d\xca\xe4\x12\xca\x2a\xf2\x7f\x1a\x06\xa8\x24\x1f\xbc\xd2\x11\x57\x17\x2d\xf3\x24\x71\x27\x43\x36\x52\xde\xbb\x90\xa4\xee\x0b\xec\x36\xa6\x25\x69\xdb\x9f\xe6\x9d\xfa\x3e\x46\xd2\x07\x77\xd7\x8d\xf1\x49\xca\xff\x02\x00\x00\xff\xff\xee\xd7\xc3\x3c\x33\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9011, mode: os.FileMode(436), modTime: time.Unix(1707235181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
