// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\x5e\x7f\x85\xe0\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x50\xd4\x44\xe2\x9a\xe2\x68\x87\x64\x1a\xf7\xeb\x0b\xf9\xa2\xd5\xc5\x89\x39\x19\xb5\x5d\x60\x11\x80\x9e\xa3\x33\x67\x48\x1e\x8e\x28\x67\x5c\x00\x17\x7c\xf6\xe3\x22\xcb\xbe\x60\x7e\xf8\x9b\x65\x4e\xd5\xb0\xca\x96\x79\x34\xb6\xf0\x40\x4f\x40\xcb\xc3\x78\x89\xdb\x46\x85\x6a\x95\x2d\x4b\x13\xaa\x98\x7f\xa7\xb1\x7e\x9f\x13\x86\x0a\xc8\x62\x69\xf4\xfb\x09\xa4\x51\x14\x8c\xb2\xdb\x1c\x31\xf8\x40\xaa\x59\x65\x81\x22\x1c\x7e\x23\xf8\x1a\x0d\x41\xdd\x65\xd0\xfe\xd3\x2a\x40\x89\xb4\x5f\x65\xb7\x77\x9f\x7f\x3d\x0d\x36\x84\x0d\x50\x30\xe0\x57\xd9\xd2\x6b\x52\x41\x57\xc7\xe7\xdf\x2c\x8e\xff\x09\x8a\xe8\x0a\xe5\xf4\x7e\x95\x6d\xd6\xb7\xbf\xdf\xdf\x7e\xb8\x7f\x58\xdc\x2c\x5e\x50\x78\x5d\xc9\xa3\xb1\xa0\xb1\x31\x67\x21\xa7\x9a\x8c\x87\x5f\xd3\x97\x13\xa8\x1d\xc6\xd0\x0d\x8d\x13\xfd\xe5\xe3\x6f\x3f\x7d\xf8\xb8\xc8\x32\x87\xdb\x5a\xf9\x00\x74\x0a\x7d\x31\xef\x53\x16\x4f\x40\xde\xa0\x0b\xa4\xf4\x2e\x7d\x72\x2e\xa1\xfe\x9f\xfc\x77\xb0\xf7\x01\x09\x52\x33\x1f\xc6\x4f\xf2\xba\xba\x94\x3e\xaf\x37\x7f\xac\x37\x97\x16\xd3\x23\xa9\x1a\x42\x45\x00\x2f\xaf\xa7\x93\xcc\x6b\xa2\x1e\x2d\x36\xcd\x3e\x55\x52\x3f\x7a\x56\x41\xbd\xe7\x0a\xc4\x14\x2a\x28\xd6\x14\x8d\x00\x6f\xdc\xdb\xa3\xa7\xbc\x2c\xe0\xdd\x75\x05\xbc\xf4\x7b\xd1\xff\x82\x67\xcd\xa1\xeb\xba\x88\xe3\xb8\x56\x54\x0c\x3c\x6b\x34\xdc\x12\x73\xfd\xf2\x5c\x53\xc2\x26\xc7\x67\xbf\x77\x3a\xb9\xb0\x43\xc8\x4d\x96\xf1\xdd\xfa\xc4\x5e\x81\xb2\xa1\xd2\x15\x70\x4c\x6f\x02\x92\x64\x70\x74\x0b\x9e\xeb\x8e\x31\x12\xfe\x86\xf0\x39\xd9\x61\x7a\xc1\x7c\x83\x59\xff\xf9\xb0\xde\xdc\x1f\xcc\x7d\xb2\x98\xe1\x39\x00\x39\x65\xb7\x04\xaa\x18\x59\x8d\xc6\xe8\xc2\x2a\xfb\xfe\xaa\x14\x8b\x65\x69\x5c\x99\x2a\x66\x10\xce\x97\xf3\xe6\x5e\x22\xd5\x6d\x72\x00\x62\xb6\x4a\x03\x84\x64\x55\xc0\x33\xe8\x18\x30\x99\x79\x18\x3f\x3d\xe5\x27\xa9\x24\x9e\x19\x0d\xe1\x93\x69\x3b\x8c\xf4\x22\x4c\x20\x17\xa6\xd6\xc7\x02\xe7\x48\xae\xfd\x99\x91\x58\x2f\x9c\xbf\xde\x36\xeb\x9f\xd7\x77\x9f\x1e\xb6\x9f\x36\x77\xf7\x0f\xa7\x83\xfa\x46\x38\xcd\xed\x82\x61\x7a\xcf\x04\x72\x55\xc9\x3b\x46\xab\xf1\x37\x10\xfe\xb0\x1c\x69\x3b\x18\x40\x96\xe2\x00\x04\x1a\xa9\xd0\x68\x2d\xe8\x60\xd0\xa5\x8a\xba\x84\x93\xd4\xf5\xc8\x43\xa0\xc1\x30\xb6\xef\x14\x25\x32\xf6\x68\x6d\x3b\x11\xe0\x39\x6b\x74\x0c\x92\x64\x40\x50\x1b\x57\x00\xf9\xf4\x69\xe8\x01\x64\xcc\xed\x7c\x96\x10\x18\xd2\xc7\x18\x39\xbf\x47\x2a\x95\x33\x9e\x9b\xc3\x10\x27\xda\xdf\xca\x1b\xfd\x05\xf3\xe4\xcd\xdd\x8b\x97\xeb\x57\x45\xc1\x95\xde\x41\xe4\xec\x79\x6c\x27\x93\x47\xff\x0d\x33\x83\x7a\xdb\xba\x5a\x7a\x3b\x32\x45\xc9\x73\xa8\xdb\x4e\x84\x3b\x07\x3d\xd0\x0c\x19\x20\xc3\x00\x47\x10\x39\x3b\xf3\x84\x9e\x80\xe6\xc8\x00\x35\x78\x86\x03\x8e\x40\x33\xb8\x90\xb2\xc0\xe4\xef\x20\x33\xb0\x07\x15\xb8\xec\x67\x88\x84\x5d\x9f\x8b\x98\xde\xc3\x4e\x20\x6f\x7c\x01\x20\x65\x0a\xd1\x4d\xe2\xa0\x80\x7f\x29\xc7\x2d\x60\x07\x11\xbd\x01\x04\xbd\x33\xd6\xa6\x6f\x9e\x11\x60\xbe\x77\x80\x23\x61\x50\x7e\x97\x5c\x87\x11\x44\x52\x87\xc2\x94\x26\x28\xdb\xd6\xd4\x1a\x9f\x7c\x9e\x5c\x80\xcd\xb0\x99\x34\x12\x7b\x2f\x77\x18\x09\x3f\x52\xc9\xf4\xd2\x21\x42\xc2\xdd\x3e\x2f\xb9\x93\xef\x82\x25\x8c\x01\xea\x26\x95\xf0\x1c\x2b\xe1\xdb\xc1\xbe\x56\x4d\x93\x5e\xdc\x01\x40\xc2\x7c\xb0\x0a\xce\xba\x1e\x00\x64\xad\xa9\xde\xc5\xe4\x2a\xf7\xa3\xe7\xb1\x65\xf1\x66\x7c\x52\xd6\x14\x8a\x71\x47\x72\x01\x26\xbb\xb8\x33\x2e\xe4\x64\x8a\x32\xf9\x46\x7a\x04\x91\xb0\xfb\x80\x3c\xee\x01\x40\x66\x07\x7a\x97\xee\x06\xc7\x58\x09\xdf\xd7\x08\x31\x59\x65\x17\x2c\x5f\x5f\x8f\xca\x61\x64\xbe\xbf\x7c\xc3\xc8\xf9\xb5\x05\xc5\xb8\x76\x9b\x80\x44\xcd\x47\xe4\x34\x1e\xe7\x60\xd1\x31\xaf\x7c\x95\x63\xf7\x99\x23\xe5\xe3\xd4\x00\x30\xe7\xf7\xb6\x06\xc8\xa3\x53\xf6\x35\xb7\x4a\xec\x9d\x3c\xe8\x48\xc0\xba\xe3\x9f\x40\xfe\xa3\x9b\xfe\xd7\x26\xef\x9f\x00\x00\x00\xff\xff\xab\xcf\x80\x2b\x55\x20\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8277, mode: os.FileMode(436), modTime: time.Unix(1636834528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
