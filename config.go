// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x42\x7e\xc0\x0e\x1b\x0e\xfb\x10\x0c\x05\x6e\x68\xb0\x0d\x3b\xb4\x87\xb6\x1b\xb6\x7d\x09\x68\x99\x75\xb4\xc8\xa2\x8f\x92\xb2\x66\xbf\x7e\x70\x9a\xb8\x7e\x4b\x2c\x45\xe9\xae\x40\x51\x40\xe6\xa3\x87\x14\xe9\x47\x94\x5c\xa3\x8c\x43\xe3\xac\xf8\xe1\x4a\x88\xbf\x29\xdb\xfd\x15\xc2\x40\x89\x73\x31\xcb\xbc\xd2\xb9\x45\xde\x20\xcf\x76\xe3\x05\x2d\x2b\x70\xab\xb9\x98\x15\xca\xad\x7c\xf6\x8d\xa4\xf2\x7d\xc6\xe4\x56\xc8\x9a\x0a\x25\xdf\x0f\x20\x15\xb0\x53\xa0\x97\x19\x91\xb3\x8e\xa1\x9a\x0b\xc7\x1e\x77\xcf\x32\x46\x58\x93\x77\xad\x21\xc6\x2f\x5e\x31\x96\x8d\x53\xf5\x8f\x04\x87\x05\xf1\x76\x2e\x6e\x7e\x79\xf8\x75\x3f\x58\x31\x55\xc8\x4e\xa1\x9d\x8b\x99\x95\x0c\x4e\xae\x5e\x28\xaf\x43\x66\xfa\xf9\xee\xe1\x71\xf9\xf8\xe7\xe7\xc5\xd8\x74\x9f\x95\xf8\x10\x31\xd7\x5f\x77\xb7\xa3\xd3\x18\x32\x52\x7b\xeb\x0e\x6b\x51\x4f\x56\xff\x32\xe6\xde\xe4\x60\xe4\x76\x2e\xee\x17\x37\xbf\xdd\xde\x7c\xbc\x7d\xec\x8c\x7f\xff\xa1\xfd\xe4\xfa\xea\x48\x9e\xa6\xf3\xf1\xa4\x34\x4a\xaa\xd4\xc1\x85\x7d\x66\xfb\xc3\x51\x59\xea\x87\xf0\xd3\xa7\xbb\x1f\x3f\x7e\xba\x12\xc2\xd0\xb2\x84\x3a\xdc\xbd\xe9\x51\xbf\xf7\x5e\x6c\x90\xad\x22\xe3\x18\xe4\x3a\xbc\xc4\xc6\x50\x5f\xc7\xff\x35\x6e\xad\x23\xc6\x50\xcf\xbb\xf6\xf1\xd5\xff\xb0\xb8\xff\x7d\x71\x3f\x56\x69\xc0\x05\x99\xe3\x45\xb6\x8f\x70\x2a\x9e\x27\x4d\x55\xb5\x0d\x8d\xa6\x6d\x7d\xb6\xe3\xed\x49\x12\x3c\xcf\xc1\x41\x54\x2a\x7a\x80\x33\x65\xa7\x37\xcb\xf1\x00\xde\x4d\x47\x10\xe7\x7e\xcb\xfa\xff\x51\xd8\x91\x50\xdf\x54\x17\x27\xd7\x6d\x7a\x91\x5e\xc6\x25\x70\xde\xd1\xbe\xde\xf0\x2e\x92\x71\x45\x9e\xca\xd9\x0a\x41\xbb\x95\x5c\x61\x8c\x7c\x0d\x40\xd7\x42\x1c\xdd\x13\xa6\x3c\x80\x7c\x53\x3f\x8c\xda\xa2\xfb\x98\x14\xfe\x27\x86\x12\x23\xf5\xbb\x8f\x49\xe1\xaf\x98\x9e\x83\x05\xab\x65\x3c\x51\xb8\x8b\x3f\x1e\x17\xf7\xb7\xbb\x3d\x61\x50\xbc\xf8\xec\x90\x0d\xe8\x25\x23\xe4\x3d\xe5\x92\xe4\x8d\x9b\x8b\x6f\x27\xfd\xd6\x54\x14\xca\x14\xa1\x9e\x77\xcc\xdf\xb0\x6b\x3a\xb1\x33\xba\x25\x99\xe5\x4b\xd1\xcc\xc5\x8c\x73\x65\x2b\x0d\xdb\xd9\xb4\xb0\xe1\x33\x4a\xef\x28\xb8\x3c\xba\xf6\xc3\xcd\x7b\x50\x2d\x81\x5b\x44\xc5\xb4\x51\x75\xe3\x10\x5e\xa9\x03\xc8\xc8\xd2\x9f\x52\x5f\xeb\x73\xba\x84\xe3\xf5\xe3\x08\xa7\x5b\xe6\x93\xb5\xf2\x2e\x62\xaf\x96\x79\xab\x52\x12\x5e\xda\x43\xed\x84\xee\x75\xaf\xe6\x29\xac\x05\x43\x99\xb1\xca\x8b\xe0\x4d\xb6\x8b\x48\xe1\xce\x10\x39\x52\x25\x07\x90\xf3\xf3\xf6\x2f\x32\x7d\xd7\x4f\xdd\x4e\xaa\x44\x88\x56\x31\x4a\xe2\x5c\x92\xd6\x28\x9d\x3a\xb4\x99\xd3\x11\x8c\xe1\x92\x12\xb8\xe3\x61\x94\xa8\x22\x76\xbb\x21\x2a\x69\xbf\xf1\x5a\xd7\x89\x40\x1b\xf3\x46\xf6\x41\x29\x1e\x30\x96\xca\xe4\xc8\x36\x3c\x0d\x2d\x40\x1a\x73\x9d\xcf\x02\x5d\x44\xe8\x7d\x4c\x3a\xbf\x25\x2e\xc0\x28\x1b\xeb\x43\x17\x97\xee\x07\xe4\x79\xac\x0b\x0d\x24\x9d\x3d\xf3\xf5\xa2\xc6\xd1\xbf\x62\x2e\x10\xbd\xae\xd5\x25\xbc\x81\x19\xa2\xd2\x7d\x28\xeb\xde\x25\x36\x07\x2d\xd0\x05\x3c\xa0\x08\x21\xea\x41\xd2\xd9\x23\xfb\x82\x01\xe8\x12\x1e\x90\x44\x1b\xa1\x44\x3d\xd0\x05\xd4\x00\x34\x46\xf2\x37\x90\x0b\xb0\x3b\x70\xb1\xec\x07\x48\x0a\xbb\x3c\x2c\x62\x78\x57\x3d\x80\x9c\x79\x64\x60\x50\x79\xc8\x65\x66\xd8\x02\xfe\x03\x26\x76\x01\x1b\x48\x7a\x2b\xe1\xc0\xae\x83\xd9\x7b\x90\xb4\xfe\xb7\x50\x0e\x74\x1d\x89\x56\x36\x58\xc5\x47\x60\x17\x28\x61\x49\x1c\xfd\x06\x35\x98\x14\x7e\xe2\x22\x52\xc1\xba\x88\x14\xee\x7a\xbe\xe0\x3e\xb6\x31\x4e\x61\x74\x58\x56\xa1\x84\x07\xdb\x14\xbe\x35\x6e\x4b\xa8\xaa\xf0\xc5\xed\x00\x52\x98\x77\x2f\x68\x4c\x5d\x77\x00\x49\xa7\x2c\x90\x6b\x1f\xbc\xca\x6d\xeb\xcb\x88\x61\xf2\xcb\xb8\x01\xad\x72\x88\xb8\x2b\x19\x81\xa5\xdd\xa6\x29\xe3\xe2\xce\xc8\x3d\x48\x0a\xbb\x75\x14\xc7\xdd\x01\xa4\xc9\x81\x5c\x87\xab\xc1\x8b\x6d\x0a\xdf\x17\x8f\x3e\x38\xca\xc6\x38\xbd\xbe\x9e\xc0\x90\x8f\x3c\x35\xbc\x62\xd2\xf9\xa5\x46\x88\xb8\x7e\x1b\x80\x52\x3c\x40\xaf\xc3\x99\x1b\xe3\xcb\x9c\x57\xe3\x4f\xaa\xc9\x2d\x06\xd8\x55\x46\xcd\x97\x8f\x90\xef\x61\x1d\xc0\xd9\xdf\xf3\x2a\x64\x4b\x06\xf4\x29\x59\x0c\xbc\xf7\xb4\x28\x3d\x63\xd4\x0d\xff\x00\xf2\x16\xf7\xfc\x49\x3b\x94\xc9\x25\x94\x55\xe4\xff\x54\x0c\x50\x49\x3e\x78\xa5\x23\xae\x2e\x5a\xe6\x49\xe2\x4e\x86\x6c\xa4\xbc\x77\x21\x49\xdd\x17\xd8\x75\x4c\x4b\xd2\xb6\x3f\xcd\x3b\xf5\x7d\x8c\xa4\x0f\xee\xae\x1b\xe3\x93\x94\xff\x05\x00\x00\xff\xff\xf7\x47\x77\x17\xb3\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9139, mode: os.FileMode(436), modTime: time.Unix(1707181142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
