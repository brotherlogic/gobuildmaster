// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdb\x6a\x1b\x3d\x10\xbe\xfe\xfd\x14\xc2\x0f\xf0\x87\xdc\x9a\x62\x48\x89\x29\xa5\x21\x05\x27\x2d\xbd\x33\x5a\xed\x64\xad\x58\xab\xd9\x8e\xa4\xd4\x7e\xfb\xb2\x76\xbc\xde\x53\x6c\x49\x9b\x25\x35\x98\x05\x69\x3e\xe9\x9b\x83\x66\x46\xd2\x52\x5b\xd0\xd6\xb0\x4f\x13\xc6\x9e\x31\xd9\x7f\x19\xd3\x3c\x87\x19\x9b\xa6\xd2\x08\x7c\x01\xda\x4d\xf7\xa3\x19\xae\x0a\x6e\xd7\x33\x36\xcd\xa4\x5d\xbb\xe4\x7f\x81\xf9\x55\x42\x68\xd7\x40\x0a\x33\x29\xae\x5a\x80\x84\x80\x6f\xd0\xd9\x19\xb3\xe4\x60\xc2\xd8\x9c\xb1\x09\x63\x04\xa9\xd3\x29\xd7\x62\x37\x63\x5f\xee\xbe\x7f\xbe\xb9\x9b\xcc\x27\xe7\x99\x24\x4e\xaa\xd4\x00\xbd\x00\xf9\x72\xe9\x40\x0a\x4e\x56\x72\xb5\x4a\x10\xad\xb1\xc4\x8b\x8a\x56\x49\xe9\xb7\x93\x04\x79\xc5\xa0\xfc\x09\x6e\x21\x43\xda\xcd\xd8\xed\xd7\x87\x6f\xaf\x83\x05\x61\x01\x64\x25\x98\x19\x9b\x1a\x41\xdc\x8a\xf5\x61\xfd\xf9\xe4\xf0\xaf\xab\xb7\x5c\xdc\xfe\xb8\xbf\xbd\xb9\x7f\x7c\x5b\xc3\xcb\x9a\x3c\x49\x05\x02\x0b\x79\x54\xe4\xd5\x26\xed\xe1\x73\xfa\x75\x3d\xd1\xef\x07\xc6\x34\xae\x72\x6e\x2c\xd0\xab\xe8\x25\xcf\xbc\x00\x19\x89\xda\x12\x17\x1b\x7f\xe7\xf4\xa1\x3e\x86\x3f\x57\x40\xd6\x9f\x78\x4d\xbc\x1b\xcc\x1e\xde\x6e\x5a\x2d\x2c\xa2\x7b\x40\x17\xe2\xf6\x61\xb1\xfc\xb9\x58\xf6\x45\x2e\x39\xad\x8f\x8b\x1c\x03\x57\xa0\xd3\x76\xc6\xae\x2f\xb2\xdf\xc0\xce\x58\x24\xf0\x25\xde\x94\x7f\x57\xce\x11\xb9\x24\x25\x2c\x12\xdc\x9a\x9d\x16\xde\x79\xad\x09\x19\xe2\xf9\x82\x70\xeb\x9d\x4f\x6b\xc2\x17\xac\xb6\xf8\xf5\xb8\x58\xde\xef\x4f\x40\xc7\x6e\xb0\xb5\x40\x9a\xab\x15\x01\x4f\x77\x91\x3e\x3f\x50\x24\x10\x20\x03\x42\xb6\x8b\x1a\x64\x3b\xa7\x54\x69\x07\x30\x01\x27\xb6\x03\x8a\x62\xe0\xab\xaa\xe0\x94\x4e\xbb\x76\xab\x86\x4b\x9b\x47\x6a\x9f\xa3\x96\x16\xbd\xf5\x6e\x88\x8f\x5e\xdf\xfe\xbb\x48\x5f\x61\x96\x49\x9d\xf9\xd2\x6f\x88\xff\x03\xf4\x61\x0b\xc2\x05\x98\xbf\x29\xff\x7e\x9d\x50\x59\x32\xfd\x83\xff\x24\x1d\xd1\x99\x54\x19\xab\x9c\xf6\x3f\x6f\x75\xf1\xe8\x5c\xdf\x58\x65\x5e\x19\xcc\x3b\x5d\x3d\x11\xcf\x21\xb0\x29\x69\x63\x46\x4a\x14\x09\x00\xd5\x6b\xf8\xb1\xc5\x6d\x0c\xcf\x27\x91\xde\x3a\xd6\xda\x84\x8b\x8d\x2b\x42\x2b\x74\x1d\x15\x79\xe8\x88\xcb\xf4\x3a\xda\x6f\x04\x02\x29\x15\xa8\x14\x08\x2b\x51\xfb\x2a\xd0\x87\x8b\x0f\xf9\xc3\x6a\x3c\x4d\xfd\x83\xa7\x05\x19\x52\xe6\x0e\x4b\x65\x60\x03\x4e\x5d\x1b\x33\xca\x45\xe4\xb0\xc9\x1f\xae\xad\x99\x76\x09\x57\xe3\xf1\x76\xdf\x2f\xa1\xa4\xb1\xbe\x6a\x37\x00\x23\x9d\x57\x82\x5c\xea\x14\xa8\xad\x73\x7d\x34\xa6\xac\xfb\xda\xdb\x20\x65\x5c\x4b\xd3\xca\x17\xbd\x93\x63\xf2\x28\x08\x05\x98\x3e\xcf\xd7\x67\xe6\x87\x9c\x30\x12\x87\x1c\xdb\x69\xb3\x3d\xfe\xb6\x05\xce\xd4\x78\xef\xed\xcb\x76\xa2\x9f\x40\x6d\x66\x54\x0a\xfb\x0b\x68\xd5\x18\x35\xf3\x55\x6d\x6a\xc4\xf3\xdf\x28\xcd\xad\x38\xa8\x66\x86\xe6\x5e\xc3\x15\x98\xb0\xe4\x57\x41\x86\xe4\x5e\x71\x0c\x66\xff\x4e\xaf\x03\x89\x2c\x9c\xb9\x33\x52\x0c\x7a\x4a\x6a\x5c\x39\x2c\x37\x1b\x6f\x0b\xb6\x20\xc3\xab\x57\xe2\xca\x62\x14\xe6\xc0\x13\x66\xc8\xfe\x61\x8d\xcf\x87\x37\x3c\x41\x0f\x29\xfe\xaf\x28\xd1\x57\x22\xcf\x6b\x48\xc9\xc7\xbb\x39\xab\x84\xe3\x63\x1a\x9c\xf2\x6f\x86\x2a\xe1\xf8\xfd\x0c\x08\x47\x10\xf4\x58\xd3\x81\x8c\xf1\x64\x33\xe0\x60\xa4\x92\x82\xde\xbc\x4e\xe2\x91\x31\x52\xde\x68\x02\xaf\x60\x2d\x48\xec\xc6\xdc\x48\xf1\x8c\x89\x7f\x12\x38\xc9\x0f\x2e\x5c\x96\xdb\xd0\xc2\x75\x84\x9c\xd9\xfb\x6f\x00\x00\x00\xff\xff\xf9\xdd\xb6\x1b\xa9\x19\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6569, mode: os.FileMode(436), modTime: time.Unix(1589934464, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
