// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x3e\x10\x7f\xfd\xcf\xa7\x10\xf9\x00\xff\xd2\xb7\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xde\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x92\xba\xe4\xdb\x0f\xc7\x89\xe3\xa7\x34\x92\x3c\xd3\x15\x4a\xe0\x74\x3f\xf9\x77\x0f\xba\x3b\x49\x49\x65\x40\x19\xcd\x3e\xcc\x18\xfb\x89\xf1\xe1\x97\x31\xc5\x73\x88\xd8\x3c\xb6\x32\x4b\x34\xd0\x2b\xd0\xfc\x20\x4f\x71\x5d\x70\xb3\x89\xd8\x3c\x95\x66\x63\xe3\xff\x05\xe6\x37\x31\xa1\xd9\x00\x65\x98\x4a\x71\xd3\x83\x14\x9c\x8c\xe4\xd9\x3a\x46\x34\xda\x10\x2f\x22\x66\xc8\xc2\x61\x8d\xe0\x97\x95\x04\x79\xcd\xa0\xfc\x13\xdc\x40\x8a\xb4\x8f\xd8\xfd\xe7\xa7\x2f\x47\x61\x41\x58\x00\x19\x09\x3a\x62\x73\x2d\x88\x1b\xb1\xa9\xf6\x5f\xcc\xaa\x7f\x82\xc4\xaa\x84\x2b\xb1\x8f\xd8\x6a\x79\xff\xed\xf1\xfe\xee\xf1\x79\xb6\x98\x5d\xb0\xf0\xba\x25\x2f\x32\x03\x81\x85\x3c\x19\x72\xf4\x49\x57\xfc\x96\x7d\x31\x01\xdf\xa2\x35\xb5\xa8\x4b\xf4\xd3\xc3\xd7\x8f\x77\x0f\x33\xc6\x14\xae\x73\xae\x0d\xd0\x51\xf5\x22\xef\x23\x8b\x57\x20\x2d\x51\x19\xe2\x62\xeb\x1e\x9c\x21\xd4\xfb\xf0\xe7\x19\x90\x71\x27\xde\x50\x5f\x30\xe6\x1f\xed\xb6\xd7\xfc\x32\x7a\x00\x74\x25\x6f\x9f\x96\xab\xef\xcb\xd5\x50\xe6\x92\x55\xea\xb4\xc9\x29\x71\x05\x5a\x65\x22\x76\x7b\x95\xfd\x16\xf6\xda\x20\x81\x2b\xf1\xb6\xfe\x5f\xe5\x3c\x90\x03\xd7\xd8\x27\x84\x45\x8c\x3b\xbd\x57\xc2\xd5\x80\x0e\x64\x4c\xe4\x0b\xc2\xdd\xde\xf5\xbb\x0d\xe5\x2b\x5e\x5b\xfe\x78\x5e\xae\x1e\x0f\x27\xa0\xe7\x37\xd8\x19\x20\xc5\xb3\x35\x01\x4f\xf6\x81\x31\xaf\x28\x12\x08\x90\x1e\x29\xdb\x47\x8d\xf2\x9d\xcd\xb2\xd2\x0f\xa0\x3d\x4e\x6c\x0f\x14\xc4\xc0\xd5\x54\xc1\x29\x99\xf7\xfd\x56\x8b\x4b\x9f\x07\x5a\x9f\xa3\x92\x06\x9d\xed\x6e\xa9\x4f\xde\xdf\xfe\xbb\x4a\x3f\xc3\x34\x95\x2a\x75\xa5\xdf\x52\xff\x07\xe8\xc3\x0e\x84\xf5\x70\x7f\x5b\xbf\xdf\xbf\x7a\x49\xe8\x58\xbd\xca\x96\xe9\x9e\xfc\x67\xed\x80\xc9\xa4\xae\x58\xe5\xb2\xfb\x79\x6b\xaa\x07\xd7\xfa\xd6\x2e\x8b\xda\x61\xce\xe5\xea\x85\x78\x0e\x9e\x43\x49\x17\x33\x51\xa1\x88\x01\xa8\xd9\xc3\x4f\x23\x6e\x4b\xbc\x98\x05\x46\xeb\xd4\x6b\x63\x2e\xb6\xb6\xf0\xed\xd0\x4d\x54\xe0\xa1\x23\x2e\x93\xdb\xe0\xb8\x11\x08\xa4\x44\x60\x96\x81\x30\x12\x95\xab\x01\x43\xb8\xf0\x94\xaf\x76\xe3\x49\xe2\x9e\x3c\x1d\xc8\x98\x36\x57\x6d\x95\x82\xf1\x38\x75\x5d\xcc\x24\x17\x91\xea\x23\xbf\xb9\x32\x7a\xde\x27\x5c\xcb\xc3\xfd\x7e\xd8\x22\x93\xda\xb8\x9a\xdd\x02\x4c\x74\x5e\x09\x72\xa9\x12\xa0\xae\xcd\x4d\x69\x48\x5b\x77\xf5\xb7\x46\x4a\xb9\x92\xba\x53\x2f\x06\x17\xa7\xe4\x51\x10\x0a\xd0\x43\x91\x6f\xae\x2c\xaa\x9a\x30\x11\x87\x1c\xbb\x65\xb3\x2b\xbf\xec\x81\x37\x7a\xbc\xf3\xf1\x2e\x6f\x7f\xf5\x54\xd2\x2e\x16\x8d\xa5\x09\x0f\x5f\xab\x2f\x76\x82\x50\xaf\x8c\x2d\x7c\x9a\x67\xa0\xfd\x2a\x4f\x0d\x19\x53\xf8\xc4\x29\x93\xdc\xc7\xac\x1e\x24\xb0\x6b\xe5\x56\x4b\x31\xea\x1d\xa7\x35\xef\x1b\xae\xb7\xce\x1e\xec\x40\xc6\xb7\x8e\xd8\x96\x9d\xc0\x2f\x80\x67\xcc\x98\xef\xfb\x4d\x1d\xef\x3e\x6d\x78\xbd\x62\xb8\x3f\x61\x04\xdf\x47\x1c\xef\x00\x25\x1f\xe7\xc9\xa8\x56\x0e\xcf\x69\x0d\xc2\x12\x78\xbd\x5c\xf4\x20\x53\xbc\x5f\x8c\x48\xd4\x44\x92\xd7\x03\xd0\x59\xfd\x52\xcc\xfe\x04\x00\x00\xff\xff\x4f\x36\xd0\x38\xc1\x16\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5825, mode: os.FileMode(436), modTime: time.Unix(1583882687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
