// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdb\x6e\xe3\x36\x10\x7d\xde\xfd\x0a\xc2\x1f\xd0\x45\x8b\x45\x1f\x8c\x22\xc0\xb6\x31\xda\xa0\x8b\x24\x70\xdc\xa2\xed\x8b\x31\xa2\x26\x32\xd7\x14\x47\x3b\x24\xdd\xb8\x5f\x5f\xc8\xb7\xe8\xe6\x88\x0c\x9d\x36\x40\x10\x80\x9a\xc3\x33\xc3\x19\x1e\x8e\xa8\x18\x65\x1c\x1a\x67\xc5\x0f\xef\x85\xf8\x42\xd9\xee\xaf\x10\x06\x4a\x9c\x8a\x49\xe6\x95\xce\x2d\xf2\x06\x79\xb2\x1b\x2f\x68\x59\x81\x5b\x4d\xc5\xa4\x50\x6e\xe5\xb3\x6f\x24\x95\x1f\x32\x26\xb7\x42\xd6\x54\x28\xf9\xa1\x07\xa9\x80\x9d\x02\xbd\xcc\x88\x9c\x75\x0c\xd5\x54\x38\xf6\xb8\x7b\x96\x31\xc2\x9a\xbc\x6b\x0c\x31\x7e\xf5\x8a\xb1\x3c\x39\x55\xff\x48\x70\x58\x10\x6f\xa7\xe2\xfa\xe6\xe1\xd7\xc3\x60\xc5\x54\x21\x3b\x85\x76\x2a\x26\x56\x32\x38\xb9\xda\x53\x5e\x85\xcc\xf4\xcb\xdd\xc3\x62\xb9\xf8\xf3\x7e\x36\x34\xdd\xbd\x12\x1f\x23\xe6\xfa\xeb\xee\x76\x70\x1a\x43\x46\x6a\x6f\xdd\x71\x2d\xea\xc9\xea\x5f\xc6\xdc\x9b\x1c\x8c\xdc\x4e\xc5\x7c\x76\xfd\xdb\xed\xf5\xa7\xdb\x45\x6b\xfc\xfb\x8f\xcd\x27\x57\xef\xcf\xe4\x69\x3c\x1f\x8f\x4a\xa3\xa4\x4a\x1d\x5d\x38\x64\xb6\x3b\x1c\x95\xa5\x6e\x08\x3f\x7f\xbe\xfb\xf1\xd3\xe7\xf7\x42\x18\x5a\x96\x50\x87\x7b\x30\x3d\xeb\xf7\xc1\x8b\x0d\xb2\x55\x64\x1c\x83\x5c\x87\x97\xd8\x10\xea\xff\xf1\x7f\x8d\x5b\xeb\x88\x31\xd4\xf3\xb6\x7d\x7c\xf5\x3f\xcc\xe6\xbf\xcf\xe6\x43\x95\x06\x5c\x90\x39\x5f\x64\x87\x08\xc7\xe2\x79\xd4\x54\x55\xdb\xd0\x68\x9a\xd6\xaf\x76\xbc\x39\x49\x82\xe7\x39\x38\x88\x4a\x45\x07\xf0\x4a\xd9\xe9\xcc\x72\x3e\x80\x77\xe3\x11\xc4\xb9\xdf\xb0\xfe\x6f\x14\x76\x20\xd4\x37\xd5\xc5\xd1\x75\x1b\x5f\xa4\xfd\xb8\x04\xce\x5b\xda\xd7\x19\xde\x45\x32\xac\xc8\xa3\x39\x63\xaa\x32\x7a\xb2\x5b\x23\x83\x13\xd7\x86\x5c\x09\x71\xf6\x3c\x18\x63\x5f\x21\x68\xb7\x92\x2b\x8c\x11\xcf\x1e\x28\xc5\x03\xc8\x37\xf5\xc3\xa8\x06\xa1\x8b\x49\xe1\x7f\x64\x28\x31\xf2\xf4\xe8\x62\x52\xf8\x2b\xa6\xa7\x60\xb9\x6c\x18\x8f\x6c\x9b\xd9\x1f\x8b\xd9\xfc\x76\x77\x22\xf5\xb6\x0e\x3e\x39\x64\x03\x7a\xc9\x08\x79\x47\x37\x25\x79\xe3\xa6\xe2\xdb\x51\xbf\x35\x15\x85\x32\x45\xa8\xe7\x2d\xf3\x37\xec\xd9\x5e\x38\x97\xdd\x92\xcc\x72\x5f\x34\x53\x31\xe1\x5c\xd9\x4a\xc3\x76\x32\x2e\xab\xf8\x84\xd2\x3b\x0a\x2e\x8f\xb6\x7d\xbf\x75\xe8\x55\x4b\xe0\x01\x55\x31\x6d\x54\xdd\xb6\x84\x57\x6a\x0f\x32\xb0\xf4\x2f\x69\xbf\xf5\x39\x5d\xc2\xf1\xfa\x71\x84\xd3\x0d\xf3\xf8\x5a\x99\xcf\x7e\x9a\xdd\xdc\x2f\x96\xf7\xf3\x9b\xdb\xc5\xa1\x63\xb8\x4a\xdc\xa5\xc7\x62\x09\x55\xe8\x67\xf3\x14\xd6\x0c\x91\x23\xa5\xa9\x07\x69\x2f\xd6\xbb\x88\xb6\xea\x1f\x64\xfa\x6e\xd2\x59\xbe\x9d\x3e\x88\x10\x81\x60\x94\xc4\xb9\x24\xad\x51\x3a\x75\xec\x2c\xc7\x23\x18\xc2\xa5\x2c\xe2\x9e\x87\x51\xa2\x8a\x38\x62\xfa\xa8\x24\x91\xf7\x5a\xd7\x89\x40\x1b\xb3\x0d\xba\xa0\x14\x0f\x18\x4b\x65\x72\x64\x1b\x9e\x86\x06\x20\x8d\xb9\xce\x67\x81\x2e\x22\xf4\x2e\x26\x9d\xdf\x12\x17\x60\x94\x8d\xf5\xa1\x8d\x4b\xda\xcc\x60\x95\xfc\x42\x59\xf0\x4e\x6e\xd8\xa7\xc7\x0f\x79\x1e\x1b\xfa\x09\x92\xce\x9e\xf9\x3a\x99\x71\xf4\xcf\x98\x0b\x44\xaf\x6b\x55\x0b\xef\x56\xfa\xa8\x74\x1f\xca\xba\x51\x89\xcd\x41\x03\x74\x01\x0f\x28\x42\x00\x3b\x90\x74\xf6\xc8\x26\xa0\x07\xba\x84\x07\x24\xd1\x46\x28\x60\x07\x74\x01\x15\x02\x8d\x91\xfc\x27\xc8\x05\xd8\x1d\xb8\x58\xf6\x23\x24\x85\x5d\x1e\x17\x31\xbc\x85\xee\x41\x5e\xf9\x7e\xc0\xa0\xf2\x90\x7b\xd3\xb0\x05\xfc\x1b\x4c\xec\x02\x9e\x20\xe9\x2d\x8c\x03\xbb\x0e\x66\xef\x40\xd2\x7a\xdf\x42\x39\xd0\x75\x24\x5a\xd9\x60\x15\x1f\x80\x5d\xa0\x84\x25\x71\xf4\x0e\x3a\x61\x52\xf8\x89\x8b\x48\x05\x6b\x23\x52\xb8\xeb\xf9\x82\xfb\xe7\x93\x71\x0a\xa3\xc3\xb2\x0a\x25\x3c\xda\xa6\xf0\xad\x71\x5b\x42\x55\x85\x2f\x6e\x0b\x90\xc2\xbc\xdb\xa0\x31\x75\xdd\x02\xa4\x35\x84\x72\xed\x83\x57\xb9\x69\x7d\x19\x31\x4c\xde\x8c\x1b\xd0\x2a\x87\x88\x8b\x91\x01\x58\xda\xd5\x99\x32\x2e\x63\x95\x17\xc1\x77\xde\x1d\x48\x0a\xbb\x75\x14\xc7\xdd\x02\xa4\xc9\x81\x5c\x87\xab\xc1\xde\x36\x85\xef\xab\x47\x1f\x1c\xe5\xc9\x38\xbd\xbe\x1e\xc1\x90\x8f\x7c\x6b\x78\xc6\xa4\xf3\x4b\x8d\x10\x71\xd7\xd6\x03\xa5\x78\x80\x5e\x87\x33\x9f\x8c\x2f\xf3\x9e\x1c\xff\x86\x9c\xdc\x62\x80\x5d\x65\x74\xfa\xc8\x12\xf2\xe9\xad\x05\x78\xf5\xa7\xc3\x0a\xd9\x92\x01\xfd\x92\x2c\x06\x5e\x72\x5a\x94\x9e\x31\xea\x3a\xbf\x07\x79\x8b\x4b\xfd\xa4\x13\xca\xe4\x12\xca\x2a\xf2\xdf\x37\x7a\xa8\x24\x1f\xbc\xd2\x11\x57\x17\x0d\xf3\x17\x59\xff\x0d\x00\x00\xff\xff\x03\x1f\x5d\xbe\xb5\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8885, mode: os.FileMode(436), modTime: time.Unix(1666169171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
