// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xd1\x8a\xdb\x3a\x10\x7d\xbe\xfe\x0a\x91\x0f\xb8\x4b\x5f\x4d\x09\x6c\x89\x29\xa5\x4b\x0a\xd9\x6d\xe9\x5b\x90\xe5\xa9\xa3\x46\xd6\xb8\xa3\x51\x88\xff\xbe\x38\xb1\xc3\xda\x4e\x62\x79\xdd\xd2\x40\x08\x8c\xe7\x64\xce\x8c\xce\x19\xd9\x6a\xcb\x60\xd9\x89\xf7\x91\x10\x3f\x31\x3d\xfd\x0a\x61\x65\x01\xb1\x58\xa4\x5e\x9b\xcc\x01\x1d\x80\x16\xa7\x78\x8e\xdb\x52\xf2\x2e\x16\x8b\x5c\xf3\xce\xa7\xff\x2b\x2c\x1e\x52\x42\xde\x01\x19\xcc\xb5\x7a\x18\x40\x4a\x49\xac\xa5\xd9\xa6\x88\xec\x98\x64\x19\x0b\x26\x0f\xa7\x67\x04\xbf\xbc\x26\x28\x2e\x0c\xea\x8f\x92\x0c\x39\x52\x15\x8b\xd5\xa7\xe7\xcf\x4d\xb0\x24\x2c\x81\x58\x83\x8b\xc5\xc2\x29\x92\xac\x76\xe7\xff\x5f\x46\xe7\x2f\x41\xe6\x6d\x26\xad\xaa\x62\xb1\x49\x56\x5f\xd7\xab\xc7\xf5\x4b\xb4\x8c\x6e\x74\x38\xde\xc9\x0f\x6d\x40\x61\xa9\xdb\x46\x9a\x99\xf4\xc3\xf7\xfa\x4b\x09\xe4\x1e\x3d\x5f\x42\x7d\xa2\x1f\x9f\xbe\x7c\x78\x7c\x8a\x84\xb0\xb8\x2d\xa4\x63\xa0\x26\xf5\x26\xef\x86\xc5\x01\xc8\x69\xb4\x4c\x52\xed\xc3\x0f\xe7\x1a\xea\xdf\xf0\xdf\x43\xe5\x18\x09\x42\x99\x77\xf3\x47\x74\xf3\x9c\x6c\xbe\x25\x9b\x6b\xca\x21\x6f\x6d\xdb\xf8\x35\xe1\x34\xfd\x8c\xb1\xcf\x24\xcb\x49\xf4\x7b\x80\x37\xea\xbe\x3b\x84\xdb\xfc\xff\x9b\x23\xfb\x73\x5c\x49\xca\x3a\xb2\xef\x85\xeb\xc2\x53\x2d\xd7\x0e\x8f\xb0\x4c\xf1\xe8\x2a\xab\x82\xc7\xd7\x85\x2c\x85\x98\x6e\xf8\xd6\xbe\x24\x0b\x98\x68\x9b\x3e\x66\x4e\xfd\x92\xf0\x58\x85\x16\x7e\x95\x3c\x22\x99\xe4\xfb\x4b\xb2\x59\x9f\xac\x38\x90\x0d\x1c\x19\xc8\x4a\xb3\x25\x90\x59\xd5\x15\x8f\x42\x6f\x39\x16\xef\x46\x79\x1b\xcc\x73\x6d\xf3\x50\xe6\x9d\xf4\xbf\xbe\xe6\xef\x08\xbe\xbd\xc9\x00\x68\xe2\x45\xd6\x41\xcc\x39\x72\x38\x82\xf2\x8c\xc1\x95\xbb\xf9\xc3\x1d\x3c\xa0\x12\xb8\xb5\x4a\xc2\x83\xae\xf7\x7f\xf8\x10\x06\x90\x01\x1b\x21\x9c\xcf\xf0\x4f\x90\xab\x1f\x4f\x20\xf6\x2a\x7d\xc6\x2b\xc6\xed\xab\xa2\x53\x61\x79\x69\x2d\xd8\x30\xb5\x7e\x26\xee\x99\x1e\xe4\xcd\xb3\x24\x50\x48\x99\x42\x63\x40\xb1\x46\x1b\x5a\xff\x1a\x6e\x8e\xf0\xcf\x75\x08\x14\xe8\x09\xc6\x1b\xa2\x66\xed\x5b\x6f\x4c\xad\x01\x70\x53\xd4\xd5\x07\xdd\x65\xf0\x3b\x00\x00\xff\xff\xe7\xf1\xaa\xc3\x44\x0b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2884, mode: os.FileMode(436), modTime: time.Unix(1594162028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
