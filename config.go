package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x8f\xe2\x36\x10\xfe\x7c\xfc\x0a\x8b\x1f\xd0\x53\xfb\x11\x55\x2b\x5d\xbb\xa8\x5a\xf5\x44\x4f\x1c\xad\xfa\x0d\x4d\x9c\xd9\xe0\x8b\xe3\xc9\x8d\x6d\x0a\xfd\xf5\x55\x78\xc9\x92\x04\x16\x7b\x9d\xb6\xb7\xd2\x0a\xc9\xcc\x93\x67\x9e\xf1\xbc\x38\xc6\x28\xe3\xd0\x38\x2b\x7e\x9c\x08\xf1\x85\xb2\xc3\xa7\x10\x06\x2a\x9c\x89\x69\xe6\x95\xce\x2d\xf2\x16\x79\x7a\x58\x2f\x68\x5d\x83\xdb\xcc\xc4\xb4\x50\x6e\xe3\xb3\xef\x24\x55\xef\x33\x26\xb7\x41\xd6\x54\x28\xf9\x7e\x00\xa9\x81\x9d\x02\xbd\xce\x88\x9c\x75\x0c\xf5\x4c\x38\xf6\x78\xf8\x8e\xf1\xab\x57\x8c\x55\xeb\x41\xf3\x27\xc1\x61\x41\xbc\x9f\x89\xc7\xa7\xcf\xbf\x9e\x16\x6b\xa6\x1a\xd9\x29\xb4\x33\x31\xb5\x92\xc1\xc9\xcd\xf1\xf9\x0f\x93\xe3\x3f\x63\xee\x4d\x0e\x46\xee\x67\x62\x39\x7f\xfc\x7d\xf1\xf8\x61\xb1\x9a\x3c\x4c\x6e\x28\xbc\xaf\xe4\x59\x69\x94\x54\xab\xb3\x90\x53\x4c\xfa\xcb\xaf\xe9\xcb\x18\xa1\x24\xef\xda\xa5\xbe\xa3\xbf\x7c\xfc\xed\xa7\x0f\x1f\x27\x42\x18\x5a\x57\x60\x1d\xf2\xc9\xf4\xa6\xdf\x27\x2f\xb6\xc8\x56\x91\x71\x0c\xb2\x0c\xdf\x9c\x6b\xa8\xff\xc7\xff\x12\xf7\xd6\x11\x63\xa8\xe7\x5d\xfb\x81\x5f\x77\x53\xe9\xf3\x7c\xf9\xc7\x7c\x79\x2d\x99\x9e\x19\x2a\x74\x1b\x46\xbc\x9d\x4f\x27\x99\xf7\x44\xe5\xe0\x20\x4a\x55\x0f\xf0\xc6\x72\xe8\x3d\xe5\xb6\x80\x77\xf7\x15\xc4\xb9\xff\x6d\xf8\x7e\xdf\xd1\xe3\xba\x04\xce\x3b\xa5\xdc\x5b\x6e\x88\x63\xdb\xc8\x39\x6e\x4c\x75\x46\x3b\xbb\x37\x32\x38\x78\x5d\xc8\x83\x10\xf1\x4d\xec\xdc\x92\x0e\x29\x1c\xd7\x0a\xfa\x98\x14\xfe\x9a\x69\xb7\x0f\x25\xbe\x30\x8e\x2f\xe3\xf9\x9f\xab\xf9\x72\x71\xe8\x38\x83\x54\xc2\x9d\x43\x36\xa0\xd7\x8c\x90\xef\xbb\xf9\x24\xc9\x1b\x37\x13\xdf\xdf\x95\xa2\xa9\x28\x94\x29\x42\xc5\x74\xcc\xff\xad\x69\x16\x5a\xbc\x19\x22\x47\x0e\xeb\x0e\x22\x25\x05\x70\x87\xd2\x3b\x0a\x66\xee\xda\x0f\xe7\xcc\xc0\x95\xc0\x16\x5c\x33\x6d\x55\x33\xe3\xc2\x83\x30\x80\x5c\x49\x4b\xeb\x73\x1a\xc3\xb9\xe6\xeb\x08\xc7\x2e\xcc\xe3\x6b\x65\x39\xff\x79\xfe\xf4\x69\xb5\xfe\xb4\x7c\x5a\xac\x4e\xb3\xef\x21\x71\x9b\x9b\x84\x89\x6c\x34\x03\xc8\x5d\x25\xef\x22\xa6\xf7\xdf\xc8\xf4\xc3\xb4\xa7\xed\x50\xed\x22\xa4\xdc\x19\x25\x71\x2e\x49\x6b\x94\x4e\x91\x09\x15\x75\x0d\x97\x12\xd7\x23\x0f\xa3\x44\x15\x51\xbe\x43\x54\x52\x17\xf7\x5a\x37\x1b\x81\x36\x26\x47\xfb\xa0\x14\x0f\x18\x2b\x65\x72\x64\x1b\xbe\x0d\x17\x80\x34\xe6\x66\x3f\x0b\x74\x11\xd2\xfb\x98\x74\x7e\x4b\x5c\x80\x51\x36\xd6\x87\x2e\x2e\xa9\xbe\xc1\x2a\xf9\x85\xb2\xe0\xe2\xbe\xb0\x4f\xd7\x0f\x79\x1e\x2b\xbd\x85\xa4\xb3\x67\xbe\xd9\xcc\x38\xfa\x17\xcc\x08\xea\x75\xd3\xd5\xc2\xcf\x1e\x43\x54\xba\x0f\x55\x73\x12\x89\xdd\x83\x0b\xd0\x08\x1e\x50\x44\x03\xec\x41\xd2\xd9\x23\x27\xf4\x00\x34\x86\x07\x24\xd1\x46\x74\xc0\x1e\x68\x84\x2e\x04\x1a\x23\xf9\x5b\xc8\x08\xec\x0e\x5c\x2c\xfb\x19\x92\xc2\x2e\xcf\x41\x0c\x3f\xc3\x0e\x20\x6f\x7c\x01\x60\x50\x79\xd2\x5d\x56\x27\x80\x7f\x81\x89\x0d\x60\x0b\x49\x7a\x03\x70\xb2\x54\x5a\x87\x17\x4f\x0f\x30\xde\x3b\xc0\x91\xd0\x81\x2d\x83\xe3\xd0\x83\xa4\xc4\x21\x57\x85\x72\xa0\x9b\x98\x6a\x65\x83\xe7\xc9\x15\xd8\x08\xc5\x24\x89\xa3\x6b\xb9\xc5\xa4\xf0\x13\x17\x91\xbd\xb4\x8b\x48\xe1\x6e\x9e\x17\x7c\x92\x6f\x8d\x53\x18\x1d\x56\x75\x28\xe1\xd9\x36\x85\xaf\xc4\x7d\x05\x75\x1d\x1e\xdc\x0e\x20\x85\xf9\xd0\x2a\x62\xf2\xba\x03\x48\x3b\x9a\xca\xd2\x07\x47\xf9\xc5\x3a\xbd\x8a\xb6\xa0\x55\x0e\x11\x97\x1b\x57\x60\x69\xd7\x6b\xca\xb8\x8c\x55\x5e\x04\xdf\xcc\xf6\x20\x29\xec\xd6\x51\x1c\x77\x07\x90\x56\xc7\xb2\x0c\x2f\xe3\xa3\x6d\x0a\xdf\x57\x8f\x3e\x58\x65\x6b\x9c\x9e\x5f\xcf\x60\xc8\x47\xbe\x78\xbc\x60\x92\x66\x15\xd8\x4d\x46\xed\xb5\x78\xc8\x0f\x16\x1d\xc0\x98\xbf\xc3\xd4\xc8\x96\x0c\xe8\xfe\x65\xce\x1b\x0e\x00\x16\xa5\x67\x8c\xba\x95\x1e\x40\xfe\xa3\xbb\xe9\xd7\x36\xef\x9f\x00\x00\x00\xff\xff\x7d\x77\x2d\x44\x9c\x1d\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
