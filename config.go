// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x30\x10\xfe\x3c\xff\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x92\xba\xe4\xdf\x0f\xc7\x8d\xeb\xb7\x36\x92\x5c\xd3\x15\x4a\xe0\x74\x8f\xfc\xdc\x8b\xee\x4e\x52\x52\x19\x50\x46\xb3\x4f\x11\x63\xbf\x31\x39\xfe\x32\xa6\x78\x01\x31\x5b\xa4\x52\x0b\x7c\x04\x3a\x2c\x8e\xd2\x0c\x37\x25\x37\xdb\x98\x2d\x32\x69\xb6\x36\xf9\x28\xb0\xb8\x48\x08\xcd\x16\x28\xc7\x4c\x8a\x8b\x1e\x20\x21\xe0\x3b\xb4\x26\x66\x86\x2c\x44\x8c\x2d\x19\x8b\x18\x23\x48\xad\x4a\xb9\x12\x87\x98\x7d\xb9\xf9\xfe\xf9\xea\x26\x5a\x46\xaf\x33\x49\xac\xcc\x53\x0d\xf4\x08\xe4\xca\x65\x00\x29\x39\x19\xc9\xf3\x4d\x82\x68\xb4\x21\x5e\x36\xb4\x2a\x4a\x7f\xac\x24\x28\x1a\x06\xd5\x9f\xe0\x06\x32\xa4\x43\xcc\xae\xbf\xde\x7d\x7b\x12\x96\x84\x25\x90\x91\xa0\x63\xb6\xd0\x82\xb8\x11\xdb\x7a\xff\x65\x54\xff\xb7\xcd\x5b\xaf\xae\x7f\xdc\x5e\x5f\xdd\xde\xbf\x6c\xe1\x79\x4b\x1e\x64\x0e\x02\x4b\x79\x32\xe4\xc9\x27\x7d\xf1\x6b\xf6\x0d\x23\x31\x1e\x07\xc6\x14\x6e\x0a\xae\x0d\xd0\x93\xea\xb9\xc8\x3c\x02\x69\x89\xca\x10\x17\x3b\xf7\xe0\x8c\xa1\xde\x87\x3f\xcf\x81\x8c\x3b\xf1\x96\xfa\x30\x99\x1d\xa2\xdd\xf5\x9a\x5f\x46\x8f\x80\xce\xe4\xed\xdd\x6a\xfd\x73\xb5\x1e\xcb\x5c\xb2\x4a\x9d\x36\x39\x25\xae\x40\xab\x4c\xcc\x2e\xcf\xb2\xdf\xc1\x41\x1b\x24\x70\x25\xde\xd5\x7f\x53\xce\x01\xb5\x24\x25\x2c\x13\xdc\xeb\x83\x12\xce\x75\xad\x0b\x99\x12\xf9\x92\x70\xef\x5c\x4f\x5b\xca\x67\xbc\xb6\xfa\x75\xbf\x5a\xdf\x1e\x4f\xc0\xc0\x6f\xb0\x37\x40\x8a\xe7\x1b\x02\x9e\x1e\x02\x63\x5e\x53\x24\x10\x20\x3d\x52\x76\x88\x9a\xe4\x3b\x9b\xe7\x95\x1f\x40\x7b\x9c\xd8\x01\x28\x88\x81\xab\xa9\x82\x53\xba\x18\xfa\xad\x11\x57\x3e\x0f\xb4\xbe\x40\x25\x0d\x3a\xdb\xdd\x51\x9f\xbd\xbf\x7d\x38\x4b\x3f\xc7\x2c\x93\x2a\x73\xa5\xdf\x51\xff\x0f\xe8\xc3\x1e\x84\xf5\x70\x7f\x57\xff\xed\x26\xa1\xaa\x65\xba\x27\xff\xb3\x76\xc0\x64\xd2\x54\xac\x6a\xd9\xfd\xbc\xb5\xd5\x83\x6b\x7d\x67\x97\x65\xe3\x30\xe7\x72\xf5\x40\xbc\x00\xcf\xa1\xa4\x8f\x99\xa9\x50\x24\x00\xd4\xee\xe1\xa7\x11\xb7\x23\x5e\x46\x81\xd1\x3a\xf5\xda\x84\x8b\x9d\x2d\x7d\x3b\x74\x1b\x15\x78\xe8\x88\xcb\xf4\x32\x38\x6e\x04\x02\x29\x15\x98\xe7\x20\x8c\x44\xe5\x6a\xc0\x18\x2e\x3c\xe5\xeb\xdd\x78\x9a\xba\x27\x4f\x0f\x32\xa5\xcd\xd5\x5b\x65\x60\x3c\x4e\x5d\x1f\x33\xcb\x45\xa4\xfe\xc8\x5f\xae\x8c\x5e\x0c\x09\x37\xf2\x70\xbf\x1f\xb7\xc8\xa5\x36\xae\x66\x77\x00\x33\x9d\x57\x82\x42\xaa\x14\xa8\x6f\x73\x5b\x1a\xd2\xd6\x5d\xfd\xad\x91\x32\xae\xa4\xee\xd5\x8b\xd1\xc5\x39\x79\x94\x84\x02\xf4\x58\xe4\xdb\x2b\xcb\xba\x26\xcc\xc4\xa1\xc0\x7e\xd9\xec\xcb\x5f\xf6\xc0\x2b\x3d\xde\xf9\xf3\xd5\x38\x31\x4e\xa0\xb5\x32\x2b\x85\xe3\x05\xb4\x19\x8c\xba\xf5\xaa\xb5\x34\xe3\xf9\xef\xb4\xe6\x5e\x1e\x34\x2b\x53\x6b\xaf\xe6\x39\x68\xbf\xe2\xd7\x40\xa6\xd4\x5e\x71\x4a\x66\xf7\x49\x6f\x00\x09\x6c\x9c\x85\xd5\x52\x4c\x7a\x4a\xea\x5c\x39\x0c\xd7\x3b\x67\x0f\xf6\x20\xd3\xbb\x57\x62\xab\x66\xe4\x17\xc0\x67\xcc\x94\xef\xfb\x0d\x3e\xef\x3e\xf0\x78\x3d\xa4\xb8\xbf\xa2\x04\x5f\x89\x1c\xaf\x21\x15\x1f\xe7\xe1\xac\x51\x0e\xcf\x69\x0d\xc2\x12\x78\x3d\x9e\x0c\x20\x73\x3c\xa1\x4c\x48\xd4\x54\x92\xd7\x1b\xd4\xb3\xfa\x4b\x31\xfb\x17\x00\x00\xff\xff\xd8\x3e\x3a\x03\xce\x17\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6094, mode: os.FileMode(436), modTime: time.Unix(1585841780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
