package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x99\xdd\x6e\xeb\x36\x0c\xc7\xaf\x9b\xa7\x10\xf2\x00\x2b\xb6\xcb\x60\x08\xd0\xad\xc1\x50\xac\xc8\x8a\x34\x1b\x76\x17\xc8\x32\xeb\xa8\x91\x45\x1f\x8a\xce\x49\xce\xd3\x1f\x38\x1f\x6e\x6c\x27\x8d\x54\xf9\x7c\x14\x28\x0a\x28\xfc\xe5\x4f\x52\x24\x65\xab\x56\x5b\x06\xcb\x4e\xfc\x3e\x10\xe2\x15\x93\xdd\x5f\x21\xac\xcc\x61\x24\x86\x49\xa9\x4d\xea\x80\xd6\x40\xc3\xdd\x7a\x86\x8b\x42\xf2\x72\x24\x86\x99\xe6\x65\x99\xfc\xa2\x30\xbf\x4d\x08\x79\x09\x64\x30\xd3\xea\xb6\x83\x14\x92\x58\x4b\xb3\x48\x10\xd9\x31\xc9\x62\x24\x98\x4a\xd8\x7d\x46\xf0\xa9\xd4\x04\x79\xed\x41\xf5\xa3\x24\x43\x86\xb4\x1d\x89\xfb\x87\xe7\xbf\x0f\x8b\x05\x61\x01\xc4\x1a\xdc\x48\x0c\x9d\x22\xc9\x6a\xb9\xff\xfe\xf1\x60\xff\x4b\x90\x96\x36\x95\x56\x6d\x47\x62\x36\xb9\xff\x77\x7a\x7f\x37\x9d\x0f\xc6\x83\x0b\x11\x5e\x8f\xe4\x45\x1b\x50\x58\xe8\x63\x20\x87\x9c\xb4\x97\xdf\x8b\x2f\x21\x90\x2b\x2c\xb9\x5e\x6a\x3b\xfa\xd7\xe3\x3f\x7f\xdc\x3d\x0e\x84\xb0\xb8\xc8\xa5\x63\xa0\x83\xe9\x45\xbf\x0f\x5e\xac\x81\x9c\x46\xcb\x24\xd5\xca\x7f\x73\xce\x51\x3f\xc6\xff\x15\x6c\x1d\x23\x81\xaf\xe7\x4d\xfb\x8e\x5f\x57\x4b\xe9\x79\x32\xfb\x6f\x32\x3b\x57\x4c\x2f\x24\x73\xe0\x25\x01\x5c\xae\xa7\x43\x98\xd7\x82\x4a\x25\xcb\xa0\xa8\x5a\xc0\x07\xdb\xa1\xf5\x2d\x97\x03\xb8\xb9\x1e\x41\x98\xfb\x3f\x87\xef\xd7\x1d\xdd\xaf\x2b\x49\x69\xa3\x95\x5b\xcb\x95\x70\xe8\x18\x39\xe6\x8d\xb0\x48\x70\xe3\xb6\x56\x79\x27\xaf\x89\x8c\x85\x08\x1f\x62\xc7\x91\xb4\x2b\xe1\xb0\x51\xd0\x66\x62\xf4\x0b\xc2\xcd\xd6\x57\xf8\xc4\x38\xbc\x8d\x27\xff\xcf\x27\xb3\xe9\x6e\xe2\x74\x4a\x09\x36\x0c\x64\xa5\x59\x10\xc8\x74\xdb\xac\x27\x85\xa5\xe5\x91\xf8\xf5\x6a\x28\x06\xb3\x4c\xdb\xcc\x37\x98\x86\xf9\xb7\x3a\xcd\x7c\x9b\x37\x01\xa0\xc0\xc3\xba\x41\xc4\x94\x00\x6c\x40\x95\x8c\xde\xca\x4d\xfb\xee\x39\xd3\x71\xc5\x73\x04\x17\x84\x6b\x5d\x9d\x71\xfe\x49\xe8\x20\x67\xca\xd2\x95\x29\xf6\xe1\x5c\xf5\x71\x80\x63\x27\xe6\xe1\xbd\x32\x9b\xfc\x39\x79\x78\x9a\x2f\x9e\x66\x0f\xd3\xf9\xe1\xec\x1b\x47\x6e\x73\x55\x30\x81\x83\xa6\x83\x5c\x8d\xe4\x26\xe0\xf4\xfe\x02\x84\xbf\x0d\x5b\xb1\xed\xba\x5d\xf8\xb4\x3b\x81\x42\x4a\x15\x1a\x03\x8a\x35\x5a\xdf\xa0\xce\x71\x31\x79\xdd\xeb\x10\x28\xd0\x01\xed\xdb\xa5\xa2\xa6\x78\x69\x4c\xb5\x11\xe0\x42\x6a\xb4\x0d\xc5\x78\x40\x90\x6b\x9b\x02\x39\xff\x6d\x38\x01\xe2\x94\xab\xfd\xcc\x80\x03\x42\x6f\x33\xf1\xfa\x0e\x29\x93\x56\xbb\x50\x1f\x9a\x5c\x54\x7f\x4b\xa7\xd5\x2b\x26\xde\xcd\x7d\x62\x1f\x1f\xbf\x4c\xd3\xd0\xd0\x6b\x24\x5e\x3d\x29\xab\xcd\x0c\x93\x7f\x63\x7a\x88\xde\x54\x53\xcd\xff\xd9\xa3\x4b\xc5\xfb\x90\x57\x4f\x22\xa1\x7b\x70\x02\xf5\xe0\x01\x06\x0c\xc0\x16\x12\xaf\x1e\x78\x42\x77\xa0\x3e\x3c\x40\x05\x2e\x60\x02\xb6\xa0\x1e\xa6\x90\x34\x10\xa8\x5f\x23\x3d\xa8\xb3\xe4\x50\xf5\x23\x12\xa3\xae\x8e\x49\xf4\x7f\x86\xed\x20\x1f\x7c\x01\x20\xa9\xd3\xa8\xbb\xac\x46\x02\x3f\x4b\x1b\x9a\xc0\x1a\x89\x7a\x03\x60\xb5\xd2\xc6\xf8\x37\x4f\x0b\xe8\xef\x1d\x60\x2f\xc8\xd2\xad\xbc\xf3\xd0\x42\x62\xf2\x90\xea\x4c\xb3\x34\x55\x4e\x8d\x76\xde\xe7\xc9\x19\xac\x87\x66\x52\x48\xc1\xbd\x5c\x33\x31\xfa\x48\x59\xe0\x2c\x6d\x12\x31\xda\xd5\xf7\x79\x3f\xc9\xd7\xc6\x31\x8a\x0c\x79\xe1\x2b\x78\xb4\x8d\xd1\x5b\xc1\x36\x97\x45\xe1\x9f\xdc\x06\x10\xa3\xbc\x1b\x15\x21\x75\xdd\x00\xe2\x1e\x4d\xd5\xaa\xf4\xce\xf2\x9b\x75\x7c\x17\xad\xa5\xd1\xa9\x0c\xb8\xdc\x38\x83\xc5\x5d\xaf\x69\xcb\x09\xe9\x34\xf3\xbe\x99\x6d\x21\x31\xea\x8e\x31\x4c\xbb\x01\x44\x4d\x52\xe9\x96\x09\xd6\x97\xb6\x3e\xd7\xe9\x0d\xa0\xcf\xff\x12\x14\x40\x0e\xad\x34\xed\xab\x86\x0f\x1c\x4f\x0e\x54\x49\x10\x74\x67\xda\x41\xbe\xd3\xcd\xe9\x7b\x9b\xf7\x35\x00\x00\xff\xff\x07\xda\x29\x48\x3a\x1c\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
