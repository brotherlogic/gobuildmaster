// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6e\xdb\x3c\x0c\xbd\x6e\x9e\x42\xc8\x03\x7c\xc5\xb7\xcb\x60\x08\xd0\xa1\xc1\x30\xac\xe8\x80\xb4\x1b\x76\x17\xd0\x32\xeb\xa8\x91\x45\x8f\x92\xb3\x64\x4f\x3f\x38\x3f\x6e\xfc\x93\x46\xaa\xbc\xad\x40\x11\x40\xe6\xf1\xe1\xa1\x48\x4a\xa6\x51\xc6\xa1\x71\x56\xbc\x1f\x09\xf1\x4c\xc9\xee\x57\x08\x03\x39\x4e\xc4\x38\x29\x95\x4e\x2d\xf2\x1a\x79\xbc\x5b\xcf\x68\x51\x80\x5b\x4e\xc4\x38\x53\x6e\x59\x26\xff\x49\xca\xaf\x13\x26\xb7\x44\xd6\x94\x29\x79\xdd\x81\x14\xc0\x4e\x81\x5e\x24\x44\xce\x3a\x86\x62\x22\x1c\x97\xb8\x7b\xc6\xf8\xa3\x54\x8c\x79\xed\x41\xf5\x27\xc1\x61\x46\xbc\x9d\x88\xdb\x4f\x0f\x9f\x0f\x8b\x05\x53\x81\xec\x14\xda\x89\x18\x5b\xc9\xe0\xe4\x72\xff\xfe\xe9\x68\xff\xcf\x98\x96\x26\x05\x23\xb7\x13\x31\x9f\xdd\x7e\xbd\xbf\xbd\xb9\x7f\x1c\x4d\x47\x67\x14\x5e\x56\xf2\xa4\x34\x4a\x2a\xd4\x51\xc8\x21\x26\xed\xe5\xd7\xf4\x25\x8c\xb0\xa2\xd2\xd5\x4b\x6d\x47\x3f\xde\x7d\xf9\x70\x73\x37\x12\xc2\xd0\x22\x07\xeb\x90\x0f\xa6\x67\xfd\x3e\x78\xb1\x46\xb6\x8a\x8c\x63\x90\x2b\xff\xcd\xe9\x43\xfd\x1b\xff\x57\xb8\xb5\x8e\x18\x7d\x3d\x6f\xda\x77\xfc\xba\x98\x4a\x0f\xb3\xf9\xb7\xd9\xbc\x2f\x99\x9e\x18\x72\x74\x4b\x46\x3c\x9f\x4f\x07\x99\x97\x44\xa5\xe0\x20\x48\x55\x0b\xf0\xc6\x72\x68\xbd\xe5\xbc\x80\xab\x98\x72\xd8\xaf\x4b\xe0\xb4\x51\x0e\xad\xe5\x8a\x38\xb4\x14\x8f\xd1\x63\x2a\x12\xda\xd8\xad\x91\xde\xf1\x6b\x42\xa6\x42\x84\x37\x82\x63\x59\xef\xd2\x20\xac\x9c\xda\x98\x18\xfe\x82\x69\xb3\xf5\x25\x3e\x31\x0e\x2f\x85\xd9\xf7\xc7\xd9\xfc\x7e\x57\xb5\x9d\x54\xc2\x8d\x43\x36\xa0\x17\x8c\x90\x6e\x9b\xf9\x24\xa9\x34\x6e\x22\xfe\xbf\x28\x45\x53\x96\x29\x93\xf9\x8a\x69\x98\xff\xf1\x13\xe1\x95\x1a\x38\x1e\x7a\x88\x1c\x78\xe6\x35\x10\x31\x59\x80\x1b\x94\xa5\x23\x6f\xe6\xa6\x7d\xb7\x5d\x77\x5c\xf1\xec\x64\x05\xd3\x5a\x55\x47\x85\x7f\x10\x3a\x90\x9e\xcc\xb4\x65\x4a\x43\x38\x57\x3d\x0e\x70\xec\xc4\xbc\xc7\xa9\x88\x0b\xca\xf9\x53\xa5\x41\x3a\xad\xd5\x7a\xd7\x50\x95\x52\x81\xdd\xa8\x03\xb9\xd8\x1a\xae\x02\x04\xfd\x42\xa6\x77\xbd\x72\x84\x8f\x1e\x46\x49\x9c\x4a\xd2\x1a\xa5\x53\x64\x7c\x45\xf5\xe1\x62\x0a\x6c\xcf\xc3\x28\x51\x05\x14\x78\x17\x15\xd5\xea\x4b\xad\xab\x8d\x40\x1b\x92\xc5\x6d\x50\x8c\x07\x8c\xb9\x32\x29\xb2\xf5\xdf\x86\x13\x40\x1c\x73\xb5\x9f\x19\xba\x00\xe9\x6d\x4c\x3c\xbf\x25\xce\xc0\x28\x1b\xea\x43\x13\x17\xe3\x47\x02\x56\xc9\x67\x4a\xbc\x8b\xfb\xc4\x3e\x5e\x3f\xa4\x69\xa8\xf4\x1a\x12\xcf\x9e\x94\xd5\x66\x86\xd1\xbf\x60\x06\x50\xaf\xab\xae\xe6\x7f\x41\xe9\xa2\xe2\x7d\xc8\xab\xeb\x4a\xe8\x1e\x9c\x80\x06\xf0\x80\x02\x1a\x60\x0b\x12\xcf\x1e\x78\x86\x77\x40\x43\x78\x40\x12\x6d\x40\x07\x6c\x81\x06\xe8\x42\xa0\x31\x90\xbf\x86\x0c\xc0\xee\xc0\x85\xb2\x1f\x21\x31\xec\xf2\x18\x44\xff\x5b\x6e\x07\xf2\xc6\xaf\x04\x06\x95\x46\x0d\x8d\x1a\x01\xfc\x09\x26\x34\x80\x35\x24\xea\x1b\xc1\xc9\x95\xd2\xda\xbf\x78\x5a\x80\xe1\xbe\x12\xf6\x84\x0e\xec\xca\x3b\x0e\x2d\x48\x4c\x1c\x52\x95\x29\x07\xba\x8a\xa9\x56\xd6\xfb\x3c\xe9\x81\x0d\x50\x4c\x92\x38\xb8\x96\x6b\x4c\x0c\x3f\x71\x16\xd8\x4b\x9b\x88\x18\xee\xea\x7d\xde\x37\xf9\xda\x38\x86\xd1\x61\x5e\xf8\x12\x1e\x6d\x63\xf8\x56\xb8\xcd\xa1\x28\xfc\x83\xdb\x00\xc4\x30\xef\x5a\x45\x48\x5e\x37\x00\x71\x57\x53\xb9\x2a\xbd\xa3\xfc\x62\x1d\x5f\x45\x6b\xd0\x2a\x85\x80\xf1\x47\x0f\x2c\x6e\x06\xa7\x8c\x4b\x58\xa5\x99\xf7\x04\xb7\x05\x89\xea\x67\x60\x97\x09\xd5\xf3\x55\x9f\xe9\x71\x03\x30\xe4\x50\xbc\x40\xb6\x64\x40\xb7\x3f\xf8\xdf\x70\x48\x58\x94\x25\x63\xd0\x78\xb3\x03\xf9\x4b\x43\xce\xd7\x36\xef\x77\x00\x00\x00\xff\xff\xd1\x9f\x37\x5b\x29\x1b\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6953, mode: os.FileMode(436), modTime: time.Unix(1619747215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
