// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x7f\x6b\xdb\x40\x0c\xfd\x7b\xfe\x14\x87\x3f\xc0\x4a\xff\x35\x23\xd0\xd1\x30\xc6\x4a\x06\x69\x37\xf6\x5f\x38\x9f\xd5\xe4\x96\xf3\xc9\xd3\xe9\xba\xf8\xdb\x8f\xc4\x89\x17\xff\x68\x7d\x76\x16\x56\x28\x05\x59\x4f\x7e\x7a\x7a\xaa\x6c\xb5\x65\xb0\xec\xc4\x87\x48\x88\x9f\x98\x1e\xfe\x0a\x61\x65\x0e\x89\x88\x53\xaf\x4d\xe6\x80\x5e\x80\xe2\x43\x7c\x8d\xab\x42\xf2\x26\x11\xf1\x5a\xf3\xc6\xa7\xef\x15\xe6\x37\x29\x21\x6f\x80\x0c\xae\xb5\xba\xe9\x40\x0a\x49\xac\xa5\x59\xa5\x88\xec\x98\x64\x91\x08\x26\x0f\x87\x67\x04\xbf\xbc\x26\xc8\x6b\x06\xfb\x1f\x25\x19\xd6\x48\x65\x22\xee\x3f\x3f\x7e\x39\x06\x0b\xc2\x02\x88\x35\xb8\x44\xc4\x4e\x91\x64\xb5\xa9\xea\xcf\xa2\xea\x97\x20\xf3\x36\x93\x56\x95\x89\x58\xce\xef\xbf\x2d\xee\xef\x16\x4f\xd1\x2c\x7a\xa5\xc3\xe1\x4e\x9e\xb5\x01\x85\x85\x3e\x35\x72\xd4\xa4\x1d\x7e\xab\xbf\x94\x40\x6e\xd1\x73\x1d\x6a\x13\xfd\xf4\xf0\xf5\xe3\xdd\x43\x24\x84\xc5\x55\x2e\x1d\x03\x1d\x53\x5f\xe5\x7d\x64\xf1\x02\xe4\x34\x5a\x26\xa9\xb6\xe1\xc3\xe9\x43\xfd\x1f\xfe\xd2\x00\x71\x38\xf1\xb3\xf4\x99\x10\xe3\xa7\xdd\x54\x6d\x9c\xa3\x7b\x40\x03\xbe\x7d\x9c\x2f\xbf\xcf\x97\x7d\xce\x25\x6f\xed\xa9\xc8\xc9\xb8\x0a\xbd\xe5\x44\xdc\x0e\xb2\xdf\x42\xe9\x18\x09\x42\x89\x37\xf3\xff\x29\xe7\x1e\x0f\x0c\xb1\xcf\x08\x8b\x14\x77\xae\xb4\x2a\xb4\x81\x16\xe4\x92\xc9\x17\x84\xbb\x32\xf4\xbd\x67\xc9\x03\xaa\xcd\x7f\x3c\xcd\x97\x8b\xc3\x06\x74\x74\x83\x1d\x03\x59\x69\x56\x04\x32\x2b\x27\xce\xbc\xa2\x48\xa0\x40\x8f\xb0\x6c\x17\x75\x91\x76\xde\x98\xbd\x0e\xe0\x46\x6c\x6c\x07\x34\x89\x41\x68\xab\x4a\x52\x16\x77\x75\xab\xc3\x7b\xcd\x27\x76\x9f\xa3\xd5\x8c\xc1\x7d\x37\xd2\xaf\x7e\xdf\xde\x0d\xd2\x87\x1d\x28\x3f\x82\x7f\x33\xbf\x7b\x00\x3a\x53\x0c\x5c\xff\xfd\xcd\x09\x77\xcf\xdf\xec\x09\xa7\xbd\x5e\xf9\xfd\xe3\x70\xc3\x9e\xa7\x4f\xfe\x67\xd9\xa8\x32\xab\x05\x0b\xde\xf7\x67\x92\x39\x8c\xbc\xea\x6d\xcc\x95\x36\x2d\x05\xa0\xf3\x23\x78\xfa\x46\x6c\x84\x67\xd1\xc4\x69\x9d\x8e\x55\x2a\xd5\xd6\x17\x63\x4f\xdc\x39\x6a\xe2\xd2\x91\xd4\xd9\xed\xe4\xb9\x11\x28\xa4\x4c\xa1\x31\xa0\x58\xa3\x0d\x6d\xa0\x0f\x37\xdd\xf2\x55\x35\x99\x65\xe1\xe6\x69\x41\x2e\xb9\x13\x55\xa9\x35\xf0\x88\xad\x6b\x63\xae\xf2\x25\x5f\xbd\xe4\xb7\xb4\xec\xe2\x2e\xe1\x3a\x3e\x5d\xf7\x43\x09\xa3\x1d\x87\xb6\xdd\x00\xbc\xa9\xf9\x9f\x00\x00\x00\xff\xff\xb4\x4a\xf1\x1f\xa1\x0d\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3489, mode: os.FileMode(436), modTime: time.Unix(1577015442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
