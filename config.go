// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x30\x10\xfe\x3c\xff\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x64\x9d\x77\x92\xba\xe4\xdf\x0f\xc7\x8d\xeb\xb7\x36\xb2\x5c\xd3\x15\x4a\x40\xba\x47\x7e\xee\xfd\x24\x2d\xb5\x05\x6d\x0d\xfb\x14\x31\xf6\x1b\x93\xe3\x2f\x63\x9a\xe7\x10\xb3\x45\x2a\x8d\xc0\x47\xa0\xc3\xe2\xb8\x9a\xe1\xa6\xe0\x76\x1b\xb3\x45\x26\xed\xd6\x25\x1f\x05\xe6\x17\x09\xa1\xdd\x02\x29\xcc\xa4\xb8\xe8\x00\x12\x02\xbe\x43\x67\x63\x66\xc9\x41\xc4\xd8\x92\xb1\x88\x31\x82\xd4\xe9\x94\x6b\x71\x88\xd9\x97\x9b\xef\x9f\xaf\x6e\xa2\x65\xf4\x3a\x93\xc4\x49\x95\x1a\xa0\x47\x20\x5f\x2e\x3d\x48\xc1\xc9\x4a\xae\x36\x09\xa2\x35\x96\x78\x51\xd3\x2a\x29\xfd\x71\x92\x20\xaf\x19\x94\x7f\x82\x5b\xc8\x90\x0e\x31\xbb\xfe\x7a\xf7\xed\x69\xb1\x20\x2c\x80\xac\x04\x13\xb3\x85\x11\xc4\xad\xd8\x56\xe7\x2f\xa3\xea\xbf\xa9\xde\x7a\x75\xfd\xe3\xf6\xfa\xea\xf6\xfe\x65\x0d\xcf\x6b\xf2\x20\x15\x08\x2c\xe4\x49\x91\x27\x9b\x74\x97\x5f\xd3\xaf\xef\x89\x61\x3f\x30\xa6\x71\x93\x73\x63\x81\x9e\x44\xcf\x79\xe6\x11\xc8\x48\xd4\x96\xb8\xd8\xf9\x3b\x67\x08\xf5\x3e\xfc\xb9\x02\xb2\xfe\xc4\x1b\xe2\xfd\x60\xf6\xf0\x76\xdb\x6a\xe3\x22\x7a\x00\x74\x26\x6e\xef\x56\xeb\x9f\xab\xf5\x50\xe4\x92\xd3\xfa\x74\xc8\x29\x70\x05\x3a\x6d\x63\x76\x79\x96\xfd\x0e\x0e\xc6\x22\x81\x2f\xf1\xb6\xfc\x9b\x72\x0e\xa8\x25\x29\x61\x91\xe0\xde\x1c\xb4\xf0\xae\x6b\x6d\xc8\x14\xcf\x17\x84\x7b\xef\x7a\xda\x10\x3e\x63\xb5\xd5\xaf\xfb\xd5\xfa\xf6\x98\x01\x3d\xbb\xc1\xde\x02\x69\xae\x36\x04\x3c\x3d\x04\xfa\xbc\xa2\x48\x20\x40\x8e\x08\xd9\x3e\x6a\x92\xed\x9c\x52\xa5\x1d\xc0\x8c\xc8\xd8\x1e\x28\x88\x81\xaf\xaa\x82\x53\xba\xe8\xdb\xad\x5e\x2e\x6d\x1e\xa8\x7d\x8e\x5a\x5a\xf4\xd6\xbb\x25\x3e\x7b\x7f\xfb\x70\x96\xbe\xc2\x2c\x93\x3a\xf3\xa5\xdf\x12\xff\x0f\xe8\xc3\x1e\x84\x1b\x61\xfe\xb6\xfc\xdb\x4d\x42\x65\xcb\xf4\x0f\xfe\x67\xe9\x80\xc9\xa4\xae\x58\xe5\xb6\x7f\xbe\x35\xc5\x83\x6b\x7d\xeb\x94\x65\x6d\x30\xef\x72\xf5\x40\x3c\x87\x91\x43\x49\x17\x33\x53\xa1\x48\x00\xa8\xd9\xc3\x4f\x23\x6e\x6b\x79\x19\x05\x7a\xeb\xd4\x6b\x13\x2e\x76\xae\x18\xdb\xa1\x9b\xa8\xc0\xa4\x23\x2e\xd3\xcb\x60\xbf\x11\x08\xa4\x54\xa0\x52\x20\xac\x44\xed\xab\xc0\x10\x2e\x3c\xe4\xab\xd3\x78\x9a\xfa\x07\x4f\x07\x32\xa5\xcd\x55\x47\x65\x60\x47\x64\x5d\x17\x33\xcb\x45\xa4\xfa\xc8\x5f\xae\xad\x59\xf4\x09\xd7\xeb\xe1\x76\x3f\x1e\xa1\xa4\xb1\xbe\x6a\xb7\x00\x33\xe5\x2b\x41\x2e\x75\x0a\xd4\xd5\xb9\xb9\x1a\xd2\xd6\x7d\xed\x6d\x90\x32\xae\xa5\xe9\xd4\x8b\xc1\xcd\x39\x79\x14\x84\x02\xcc\x90\xe7\x9b\x3b\xcb\xaa\x26\xcc\xc4\x21\xc7\x6e\xd9\xec\xae\xbf\x6c\x81\x57\x7a\xbc\xf7\xe7\xcb\x71\x62\x98\x40\x63\x67\x56\x0a\xc7\x0b\x68\x3d\x18\xb5\xeb\x55\x63\x6b\xc6\xfc\x6f\xb5\xe6\x4e\x1c\xd4\x3b\x53\x6b\xaf\xe1\x0a\xcc\xb8\xe2\x57\x43\xa6\xd4\x5e\x71\x0a\x66\xff\x49\xaf\x07\x09\x6c\x9c\xb9\x33\x52\x4c\x7a\x4a\x6a\x5d\x39\x2c\x37\x3b\x6f\x0b\x76\x20\xd3\xbb\x57\xe2\xca\x66\x34\xce\x81\xcf\x98\x29\xdf\x1f\x37\xf8\xbc\xfb\xc0\x33\xea\x21\xc5\xff\x15\x25\xf8\x4a\xe4\x79\x0d\x29\xf9\x78\x0f\x67\xb5\x70\x78\x4c\x83\x53\xfe\xc3\x50\x2d\x1c\xfe\x3d\x03\xc2\x11\x8c\x7a\xac\xe9\x41\xe6\x78\xb2\x99\x90\x18\xa9\xa4\x51\x6f\x5e\xcf\xe2\x2f\xc5\xc8\xbf\x00\x00\x00\xff\xff\x35\x34\xad\x0c\x3e\x18\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6206, mode: os.FileMode(436), modTime: time.Unix(1586134778, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
