// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x61\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x64\x9d\x77\x92\xba\xe4\xdf\x0f\xc7\x8d\xeb\xb7\x36\x92\x5c\xd3\x15\x4a\x40\xba\x47\x7e\xee\xfd\x24\x2d\xb5\x05\x6d\x0d\xfb\x34\x63\xec\x37\x26\xc7\x5f\xc6\x34\xcf\x61\xc1\xe6\xa9\x34\x02\x1f\x81\x0e\xf3\xe3\x6a\x86\x9b\x82\xdb\xed\x82\xcd\x33\x69\xb7\x2e\xf9\x28\x30\xbf\x48\x08\xed\x16\x48\x61\x26\xc5\x45\x07\x90\x10\xf0\x1d\x3a\xbb\x60\x96\x1c\xcc\x18\x5b\x32\x36\x63\x8c\x20\x75\x3a\xe5\x5a\x1c\x16\xec\xcb\xcd\xf7\xcf\x57\x37\xb3\xe5\xec\x75\x26\x89\x93\x2a\x35\x40\x8f\x40\xbe\x5c\x7a\x90\x82\x93\x95\x5c\x6d\x12\x44\x6b\x2c\xf1\xa2\xa6\x55\x52\xfa\xe3\x24\x41\x5e\x33\x28\xff\x04\xb7\x90\x21\x1d\x16\xec\xfa\xeb\xdd\xb7\xa7\xc5\x82\xb0\x00\xb2\x12\xcc\x82\xcd\x8d\x20\x6e\xc5\xb6\x3a\x7f\x39\xab\xfe\x9b\xea\xad\x57\xd7\x3f\x6e\xaf\xaf\x6e\xef\x5f\xd6\xf0\xbc\x26\x0f\x52\x81\xc0\x42\x9e\x14\x79\xb2\x49\x77\xf9\x35\xfd\xfa\x9e\x18\xf6\x03\x63\x1a\x37\x39\x37\x16\xe8\x49\xf4\x9c\x67\x1e\x81\x8c\x44\x6d\x89\x8b\x9d\xbf\x73\x86\x50\xef\xc3\x9f\x2b\x20\xeb\x4f\xbc\x21\xde\x0f\x66\x0f\x6f\xb7\xad\x16\x16\xd1\x03\xa0\x33\x71\x7b\xb7\x5a\xff\x5c\xad\x87\x22\x97\x9c\xd6\xa7\x43\x4e\x81\x2b\xd0\x69\xbb\x60\x97\x67\xd9\xef\xe0\x60\x2c\x12\xf8\x12\x6f\xcb\xbf\x29\xe7\x88\x5a\x92\x12\x16\x09\xee\xcd\x41\x0b\xef\xba\xd6\x86\x8c\xf1\x7c\x41\xb8\xf7\xae\xa7\x0d\xe1\x33\x56\x5b\xfd\xba\x5f\xad\x6f\x8f\x19\xd0\xb3\x1b\xec\x2d\x90\xe6\x6a\x43\xc0\xd3\x43\xa4\xcf\x2b\x8a\x04\x02\x64\x40\xc8\xf6\x51\xa3\x6c\xe7\x94\x2a\xed\x00\x26\x20\x63\x7b\xa0\x28\x06\xbe\xaa\x0a\x4e\xe9\xbc\x6f\xb7\x7a\xb9\xb4\x79\xa4\xf6\x39\x6a\x69\xd1\x5b\xef\x96\xf8\xe4\xfd\xed\xc3\x59\xfa\x0a\xb3\x4c\xea\xcc\x97\x7e\x4b\xfc\x3f\xa0\x0f\x7b\x10\x2e\xc0\xfc\x6d\xf9\xb7\x9b\x84\xca\x96\xe9\x1f\xfc\xcf\xd2\x11\x93\x49\x5d\xb1\xca\x6d\xff\x7c\x6b\x8a\x47\xd7\xfa\xd6\x29\xcb\xda\x60\xde\xe5\xea\x81\x78\x0e\x81\x43\x49\x17\x33\x51\xa1\x48\x00\xa8\xd9\xc3\x4f\x23\x6e\x6b\x79\x39\x8b\xf4\xd6\xa9\xd7\x26\x5c\xec\x5c\x11\xda\xa1\x9b\xa8\xc8\xa4\x23\x2e\xd3\xcb\x68\xbf\x11\x08\xa4\x54\xa0\x52\x20\xac\x44\xed\xab\xc0\x10\x2e\x3e\xe4\xab\xd3\x78\x9a\xfa\x07\x4f\x07\x32\xa6\xcd\x55\x47\x65\x60\x03\xb2\xae\x8b\x99\xe4\x22\x52\x7d\xe4\x2f\xd7\xd6\xcc\xfb\x84\xeb\xf5\x78\xbb\x1f\x8f\x50\xd2\x58\x5f\xb5\x5b\x80\x89\xf2\x95\x20\x97\x3a\x05\xea\xea\xdc\x5c\x8d\x69\xeb\xbe\xf6\x36\x48\x19\xd7\xd2\x74\xea\xc5\xe0\xe6\x94\x3c\x0a\x42\x01\x66\xc8\xf3\xcd\x9d\x65\x55\x13\x26\xe2\x90\x63\xb7\x6c\x76\xd7\x5f\xb6\xc0\x2b\x3d\xde\xfb\xf3\xe5\x38\x31\x4c\xa0\xb1\x33\x29\x85\xe3\x05\xb4\x1e\x8c\xda\xf5\xaa\xb1\x35\x61\xfe\xb7\x5a\x73\x27\x0e\xea\x9d\xb1\xb5\xd7\x70\x05\x26\xac\xf8\xd5\x90\x31\xb5\x57\x9c\x82\xd9\x7f\xd2\xeb\x41\x22\x1b\x67\xee\x8c\x14\xa3\x9e\x92\x5a\x57\x0e\xcb\xcd\xce\xdb\x82\x1d\xc8\xf8\xee\x95\xb8\xb2\x19\x85\x39\xf0\x19\x33\xe6\xfb\x61\x83\xcf\xbb\x0f\x3c\x41\x0f\x29\xfe\xaf\x28\xd1\x57\x22\xcf\x6b\x48\xc9\xc7\x7b\x38\xab\x85\xe3\x63\x1a\x9c\xf2\x1f\x86\x6a\xe1\xf8\xef\x19\x10\x8e\x20\xe8\xb1\xa6\x07\x99\xe2\xc9\x66\x44\x62\xa4\x92\x82\xde\xbc\x9e\xc5\x23\x63\xa4\xbc\xd1\x04\x5e\xc1\x3a\x90\x97\x3e\xfc\x2f\x00\x00\xff\xff\xa3\x9c\x17\x9c\xb7\x18\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6327, mode: os.FileMode(436), modTime: time.Unix(1587415387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
