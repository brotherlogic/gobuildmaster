// Code generated by go-bindata.
// sources:
// config.pb
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdb\x6e\xe3\x36\x10\x7d\xde\xfd\x0a\xc1\x1f\xd0\x45\x8b\x45\x1f\x8c\x22\xc0\xb6\x31\xda\xa0\x0b\x27\x70\xdc\xa2\xed\x8b\x31\xa2\x26\x32\xd7\x14\x47\x3b\x24\xdd\xb8\x5f\x5f\xc8\x17\x45\x37\x5b\x64\xe8\xb4\x01\x82\x00\xd4\x1c\x9e\x19\xce\xf0\x70\x44\x45\x4b\x6d\x51\x5b\x93\xfc\xf0\x3e\x49\xbe\x50\xba\xff\x9b\x24\x1a\x0a\x9c\x26\x93\xd4\x49\x95\x19\xe4\x2d\xf2\x64\x3f\x9e\xd3\xaa\x04\xbb\x9e\x26\x93\x5c\xda\xb5\x4b\xbf\x11\x54\x7c\x48\x99\xec\x1a\x59\x51\x2e\xc5\x87\x1e\xa4\x04\xb6\x12\xd4\x2a\x25\xb2\xc6\x32\x94\xd3\xc4\xb2\xc3\xfd\xb3\x94\x11\x36\xe4\x6c\x63\x88\xf1\xab\x93\x8c\x45\xed\x54\xf5\x23\xc0\x62\x4e\xbc\x9b\x26\xb7\x77\x8f\xbf\x1e\x07\x4b\xa6\x12\xd9\x4a\x34\xd3\x64\x62\x04\x83\x15\xeb\x03\xe5\x8d\xcf\x4c\xbf\xdc\x3f\x2e\x57\xcb\x3f\x1f\x66\x43\xd3\x3d\xc8\xe4\x63\xc0\x5c\x7f\xdd\xcf\x07\xa7\xd1\xa4\x85\x72\xc6\x9e\xd6\xa2\x9a\xac\xfa\x65\xcc\x9c\xce\x40\x8b\xdd\x34\x59\xcc\x6e\x7f\x9b\xdf\x7e\x9a\x2f\x5b\xe3\xdf\x7f\x6c\x3e\xb9\x79\x7f\x26\x4f\xe3\xf9\x78\x92\x0a\x05\x95\xf2\xe4\xc2\x31\xb3\xdd\xe1\xa0\x2c\x75\x43\xf8\xf9\xf3\xfd\x8f\x9f\x3e\xbf\x4f\x12\x4d\xab\x02\xaa\x70\x8f\xa6\x67\xfd\x3e\x7a\xb1\x45\x36\x92\xb4\x65\x10\x1b\xff\x12\x1b\x42\xfd\x3f\xfe\x6f\x70\x67\x2c\x31\xfa\x7a\xde\xb6\x0f\xaf\xfe\xc7\xd9\xe2\xf7\xd9\x62\xa8\xd2\x80\x73\xd2\xe7\x8b\xec\x18\xe1\x58\x3c\x4f\x8a\xca\x72\xe7\x1b\x4d\xd3\xfa\xd5\x8e\x37\x27\x89\xf0\x3c\x03\x0b\x41\xa9\xe8\x00\x5e\x29\x3b\x9d\x59\xce\x07\xf0\x6e\x3c\x82\x30\xf7\x1b\xd6\xff\x8d\xc2\x0e\x84\xfa\xa6\xba\x38\xba\x6e\xe3\x8b\x74\x18\x17\xc0\x59\x4b\xfb\x3a\xc3\xfb\x48\x86\x15\x79\x34\x67\x4c\x65\x4a\xcf\x66\xa7\x85\x77\xe2\xda\x90\x9b\x24\x39\x7b\x1e\x8c\xb1\xaf\x11\x94\x5d\x8b\x35\x86\x88\x67\x0f\x14\xe3\x01\x64\xdb\xea\x61\x50\x83\xd0\xc5\xc4\xf0\x3f\x31\x14\x18\x78\x7a\x74\x31\x31\xfc\x25\xd3\xb3\xb7\x5c\x36\x8c\x47\xb6\xcd\xec\x8f\xe5\x6c\x31\xdf\x9f\x48\xbd\xad\x83\xcf\x16\x59\x83\x5a\x31\x42\xd6\xd1\x4d\x41\x4e\xdb\x69\xf2\xed\xa8\xdf\x8a\xf2\x5c\xea\xdc\xd7\xf3\x96\xf9\x1b\xf6\x6c\x17\xce\x65\xbb\x22\xbd\x3a\x14\xcd\x34\x99\x70\x26\x4d\xa9\x60\x37\x19\x97\x55\x7c\x46\xe1\x2c\x79\x97\x47\xdb\xbe\xdf\x3a\xf4\xaa\xc5\xf3\x80\x2a\x99\xb6\xb2\x6a\x5b\xfc\x2b\xb5\x07\x19\x58\xfa\x4b\xda\x6f\x5c\x46\xd7\x70\xbc\x7a\x1c\xe0\x74\xc3\x3c\xbc\x56\x16\xb3\x9f\x66\x77\x0f\xcb\xd5\xc3\xe2\x6e\xbe\x3c\x76\x0c\x37\x91\xbb\xf4\x54\x2c\xbe\x0a\xfd\x62\x1e\xc3\x9a\x22\x72\xa0\x34\xf5\x20\xed\xc5\x7a\x17\xd0\x56\xfd\x83\x4c\xdf\x4d\x3a\xcb\xb7\xd7\x87\xc4\x47\x20\x18\x05\x71\x26\x48\x29\x14\x56\x9e\x3a\xcb\xf1\x08\x86\x70\x31\x8b\x78\xe0\x61\x14\x28\x03\x8e\x98\x3e\x2a\x4a\xe4\x9d\x52\x55\x22\xd0\x84\x6c\x83\x2e\x28\xc6\x03\xc6\x42\xea\x0c\xd9\xf8\xa7\xa1\x01\x88\x63\xae\xf2\x99\xa3\x0d\x08\xbd\x8b\x89\xe7\x37\xc4\x39\x68\x69\x42\x7d\x68\xe3\xa2\x36\x33\x18\x29\xbe\x50\xea\xbd\x93\x1b\xf6\xf1\xf1\x43\x96\x85\x86\x5e\x43\xe2\xd9\x53\x57\x25\x33\x8c\xfe\x05\x73\x85\xe8\x55\xa5\x6a\xfe\xdd\x4a\x1f\x15\xef\x43\x51\x35\x2a\xa1\x39\x68\x80\xae\xe0\x01\x05\x08\x60\x07\x12\xcf\x1e\xd8\x04\xf4\x40\xd7\xf0\x80\x04\x9a\x00\x05\xec\x80\xae\xa0\x42\xa0\x30\x90\xbf\x86\x5c\x81\xdd\x82\x0d\x65\x3f\x41\x62\xd8\xc5\x69\x11\xfd\x5b\xe8\x1e\xe4\x95\xef\x07\x0c\x32\xf3\xb9\x37\xf5\x5b\xc0\xbf\x41\x87\x2e\x60\x0d\x89\x6f\x61\x2c\x98\x8d\x37\x7b\x07\x12\xd7\xfb\xe6\xd2\x82\xaa\x22\x51\xd2\x78\xab\xf8\x00\xec\x0a\x25\x2c\x88\x83\x77\x50\x8d\x89\xe1\x27\xce\x03\x15\xac\x8d\x88\xe1\xae\xe6\xf3\xee\x9f\x6b\xe3\x18\x46\x8b\x45\xe9\x4b\x78\xb2\x8d\xe1\xdb\xe0\xae\x80\xb2\xf4\x5f\xdc\x16\x20\x86\x79\xbf\x41\x43\xea\xba\x05\x88\x6b\x08\xc5\xc6\x79\xaf\x72\xd3\xfa\x3a\x62\x18\xbd\x19\xb7\xa0\x64\x06\x01\x17\x23\x03\xb0\xb8\xab\x33\xa9\x6d\xca\x32\xcb\xbd\xef\xbc\x3b\x90\x18\x76\x63\x29\x8c\xbb\x05\x88\x93\x03\xb1\xf1\x57\x83\x83\x6d\x0c\xdf\x57\x87\xce\x3b\xca\xda\x38\xbe\xbe\x9e\x40\x93\x0b\x7c\x6b\x78\xc1\xc4\xf3\x0b\x85\x10\x70\xd7\xd6\x03\xc5\x78\x80\x4e\xf9\x33\xd7\xc6\xd7\x79\x4f\x0e\x7f\x43\x8e\x6e\x31\xc0\xac\x53\xaa\x3f\xb2\xf8\x7c\x7a\x6b\x01\x5e\xfd\xe9\xb0\x44\x36\xa4\x41\x5d\x92\x45\xcf\x4b\x4e\x83\xc2\x31\x06\x5d\xe7\xf7\x20\x6f\x71\xa9\x1f\x75\x42\xe9\x4c\x40\x51\x06\xfe\xfb\x46\x0f\x15\xe5\x83\x93\x2a\xe0\xea\xa2\x61\x1e\x25\xee\xa4\xc9\x04\xca\x7b\x1b\x12\xd5\x7d\x81\xd9\x84\xb4\x24\x4d\xfb\xcb\xbc\x63\x1f\xc3\x48\x38\xef\xee\xba\x36\xbe\x48\xf9\x6f\x00\x00\x00\xff\xff\xe8\xfe\xe8\x9a\x1e\x24\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9246, mode: os.FileMode(420), modTime: time.Unix(1673650454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

