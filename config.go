// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x8a\xdb\x3a\x10\xfd\x7d\xf3\x14\x22\x0f\x70\x97\xfb\x37\x5c\x02\x7b\xd9\x70\x29\x5d\xb6\x90\xdd\x96\xfe\x0b\x63\x79\xea\x68\xa3\x68\xdc\xd1\x78\x9b\xbc\x7d\x71\x3e\xdc\xd8\x4e\x36\x52\xe4\xd2\x40\x08\xc8\x3a\x3e\xe7\x8c\xe6\x43\xc4\x19\x27\xe8\xc4\xab\x7f\x47\x4a\xbd\x52\xb6\xfb\x55\xca\xc1\x1a\x27\x6a\x9c\x55\xc6\xe6\x1e\xf9\x0d\x79\xbc\x5b\x2f\x68\x51\x82\x2c\x27\x6a\x5c\x18\x59\x56\xd9\xdf\x9a\xd6\x77\x19\x93\x2c\x91\x2d\x15\x46\xdf\xf5\x20\x25\xb0\x18\xb0\x8b\x8c\x48\xbc\x30\x94\x13\x25\x5c\xe1\xee\x19\xe3\xf7\xca\x30\xae\x1b\x05\xf5\x47\x83\x60\x41\xbc\x9d\xa8\x87\x0f\xcf\x1f\x0f\x8b\x25\x53\x89\x2c\x06\xfd\x44\x8d\xbd\x66\x10\xbd\xdc\xbf\x7f\x3a\xda\x7f\x19\xf3\xca\xe5\xe0\xf4\x76\xa2\xe6\xb3\x87\xcf\x4f\x0f\xf7\x4f\x2f\xa3\xe9\xe8\x82\xc3\xeb\x4e\xbe\x19\x8b\x9a\x4a\x73\x34\x72\x88\x49\x77\xf9\x3d\x7f\x19\x23\xac\xa8\x92\x66\xa9\x2b\xf4\xff\xc7\x4f\xff\xdd\x3f\x8e\x94\x72\xb4\x58\x83\x17\xe4\xc3\xd6\x8b\xba\x0f\x2a\xde\x90\xbd\x21\x27\x0c\x7a\x15\x7e\x38\xe7\x50\x7f\x46\xff\x0a\xb7\x5e\x88\x31\x54\x79\x7b\x7f\x4f\xd7\xd5\x54\x7a\x9e\xcd\xbf\xcc\xe6\x67\x93\x49\x40\x0c\x39\x72\x78\x39\x9f\x0e\x36\xaf\x99\xca\x41\x20\xca\x55\x07\x70\x63\x39\x74\xde\x72\xd9\xc0\x5f\x29\xe5\xb0\x5f\xd7\xc0\x79\xab\x1c\x3a\xcb\x35\x71\x6c\x29\x1e\xa3\xc7\x54\x66\xb4\xf1\x5b\xa7\x83\xe3\xd7\x86\x4c\x95\x8a\x6f\x04\xc7\xb2\x66\x58\x63\x64\x39\x75\x31\x29\xfc\x25\xd3\x66\x1b\x4a\x7c\xb2\x39\xbe\x14\x66\x5f\x5f\x66\xf3\xa7\x5d\xd5\xf6\x52\x09\x37\x82\xec\xc0\x2e\x18\x21\xdf\xb6\xf3\x49\x53\xe5\x64\xa2\xfe\xb9\x6a\xc5\x52\x51\x18\x57\x84\x9a\x69\x6d\xff\xed\x13\xe1\x9d\x1a\x38\x0e\x3d\x44\x8e\x9c\x79\x2d\x44\x4a\x16\xe0\x06\x75\x25\x14\xcc\xdc\xde\xdf\x6f\xd7\x3d\x29\x81\x9d\xac\x64\x7a\x33\xf5\xa8\x08\x0f\x42\x0f\x72\x26\x33\x7d\x95\xd3\x10\xe2\xea\xc7\x11\xc2\x4e\xb6\x9f\x11\x95\x70\x41\xb9\x3c\x55\x5a\xa4\xd3\xc6\x6d\x70\x0d\xd5\x29\x15\xd9\x8d\x3a\x90\x9b\xc3\xcb\xa8\x89\x73\x4d\xd6\xa2\xae\x27\x63\x28\xff\x39\x5c\x4a\x2d\xec\x79\x18\x35\x9a\x88\x5a\xec\xa3\x92\xba\x72\x65\x6d\x9d\x03\xe8\x63\x12\xae\x0b\x4a\x51\xc0\xb8\x36\x2e\x47\xf6\xe1\xc7\x70\x02\x48\x63\xae\xcf\xb3\x40\x89\xb0\xde\xc5\xa4\xf3\x7b\xe2\x02\x9c\xf1\xb1\x1a\xda\xb8\x14\x1d\x19\x78\xa3\x5f\x29\x0b\xae\xc3\x93\xfd\xe9\xfe\x21\xcf\x63\xad\x37\x90\x74\xf6\xac\xaa\x0f\x33\x8e\xfe\x17\x66\x00\xf7\xb6\xee\xa8\xe1\x77\x89\x3e\x2a\x5d\xc3\xba\xbe\x59\xc4\x9e\xc1\x09\x68\x00\x05\x14\xd1\x00\x3b\x90\x74\xf6\xc8\x71\xdb\x03\x0d\xa1\x80\x34\xfa\x88\x0e\xd8\x01\x0d\xd0\x85\xc0\x62\x24\x7f\x03\x19\x80\x5d\x40\x62\xd9\x8f\x90\x14\x76\x7d\x0c\x62\xf8\x85\xb4\x07\xb9\xf1\x42\xcf\x60\xf2\xa4\xff\x77\x5a\x01\xfc\x01\x2e\x36\x80\x0d\x24\xe9\x3a\x2f\x7a\x65\xac\x0d\x2f\x9e\x16\xe0\xe6\x1b\xdc\xfe\xed\x02\x7e\x15\x6c\xba\x03\x49\x31\x9d\x9b\xc2\x08\xd8\x3a\x80\xd6\xf8\xe0\xe1\x71\x06\x36\x40\xe5\x68\xe2\xe8\xc2\x6d\x30\xef\xf3\xff\x0c\x00\x00\xff\xff\x30\xec\x5d\xde\x3b\x15\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5435, mode: os.FileMode(436), modTime: time.Unix(1599051640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
