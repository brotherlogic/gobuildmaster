// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x30\x10\xfe\x3c\xff\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x92\xba\xe4\xdf\x0f\xc7\x8d\xeb\xb7\x36\x92\x5c\xd3\x15\x4a\x40\xba\x47\x7e\xee\xfd\x24\x25\x95\x01\x65\x34\xfb\x14\x31\xf6\x1b\x93\xe3\x2f\x63\x8a\x17\x10\xb3\x45\x2a\xb5\xc0\x47\xa0\xc3\xe2\xb8\x9a\xe1\xa6\xe4\x66\x1b\xb3\x45\x26\xcd\xd6\x26\x1f\x05\x16\x17\x09\xa1\xd9\x02\xe5\x98\x49\x71\xd1\x03\x24\x04\x7c\x87\xd6\xc4\xcc\x90\x85\x88\xb1\x25\x63\x11\x63\x04\xa9\x55\x29\x57\xe2\x10\xb3\x2f\x37\xdf\x3f\x5f\xdd\x44\xcb\xe8\x75\x26\x89\x95\x79\xaa\x81\x1e\x81\x5c\xb9\x0c\x20\x25\x27\x23\x79\xbe\x49\x10\x8d\x36\xc4\xcb\x86\x56\x45\xe9\x8f\x95\x04\x45\xc3\xa0\xfa\x13\xdc\x40\x86\x74\x88\xd9\xf5\xd7\xbb\x6f\x4f\x8b\x25\x61\x09\x64\x24\xe8\x98\x2d\xb4\x20\x6e\xc4\xb6\x3e\x7f\x19\xd5\xff\x6d\xf5\xd6\xab\xeb\x1f\xb7\xd7\x57\xb7\xf7\x2f\x6b\x78\x5e\x93\x07\x99\x83\xc0\x52\x9e\x14\x79\xb2\x49\x7f\xf9\x35\xfd\x86\x9e\x18\xf7\x03\x63\x0a\x37\x05\xd7\x06\xe8\x49\xf4\x9c\x67\x1e\x81\xb4\x44\x65\x88\x8b\x9d\xbb\x73\xc6\x50\xef\xc3\x9f\xe7\x40\xc6\x9d\x78\x4b\x7c\x18\xcc\x0e\xde\xee\x5a\xcd\x2f\xa2\x47\x40\x67\xe2\xf6\x6e\xb5\xfe\xb9\x5a\x8f\x45\x2e\x59\xa5\x4e\x87\x9c\x02\x57\xa0\x55\x26\x66\x97\x67\xd9\xef\xe0\xa0\x0d\x12\xb8\x12\xef\xca\xbf\x29\xe7\x80\x5a\x92\x12\x96\x09\xee\xf5\x41\x09\xe7\xba\xd6\x85\x4c\xf1\x7c\x49\xb8\x77\xae\xa7\x2d\xe1\x33\x56\x5b\xfd\xba\x5f\xad\x6f\x8f\x19\x30\xb0\x1b\xec\x0d\x90\xe2\xf9\x86\x80\xa7\x87\x40\x9f\xd7\x14\x09\x04\x48\x8f\x90\x1d\xa2\x26\xd9\xce\xe6\x79\x65\x07\xd0\x1e\x19\x3b\x00\x05\x31\x70\x55\x55\x70\x4a\x17\x43\xbb\x35\xcb\x95\xcd\x03\xb5\x2f\x50\x49\x83\xce\x7a\x77\xc4\x67\xef\x6f\x1f\xce\xd2\xcf\x31\xcb\xa4\xca\x5c\xe9\x77\xc4\xff\x03\xfa\xb0\x07\x61\x3d\xcc\xdf\x95\x7f\xbb\x49\xa8\x6a\x99\xee\xc1\xff\x2c\x1d\x30\x99\x34\x15\xab\xda\x76\xcf\xb7\xb6\x78\x70\xad\xef\x9c\xb2\x6c\x0c\xe6\x5c\xae\x1e\x88\x17\xe0\x39\x94\xf4\x31\x33\x15\x8a\x04\x80\xda\x3d\xfc\x34\xe2\x76\x96\x97\x51\xa0\xb7\x4e\xbd\x36\xe1\x62\x67\x4b\xdf\x0e\xdd\x46\x05\x26\x1d\x71\x99\x5e\x06\xfb\x8d\x40\x20\xa5\x02\xf3\x1c\x84\x91\xa8\x5c\x15\x18\xc3\x85\x87\x7c\x7d\x1a\x4f\x53\xf7\xe0\xe9\x41\xa6\xb4\xb9\xfa\xa8\x0c\x8c\x47\xd6\xf5\x31\xb3\x5c\x44\xea\x8f\xfc\xe5\xca\xe8\xc5\x90\x70\xb3\x1e\x6e\xf7\xe3\x11\xb9\xd4\xc6\x55\xed\x0e\x60\xa6\x7c\x25\x28\xa4\x4a\x81\xfa\x3a\xb7\x57\x43\xda\xba\xab\xbd\x35\x52\xc6\x95\xd4\xbd\x7a\x31\xba\x39\x27\x8f\x92\x50\x80\x1e\xf3\x7c\x7b\x67\x59\xd7\x84\x99\x38\x14\xd8\x2f\x9b\xfd\xf5\x97\x2d\xf0\x4a\x8f\x77\x4e\xef\xea\xf6\xd7\x4c\x25\xdd\x62\xd1\xda\x9a\x31\xf9\x3a\x7d\xb1\xe7\x84\x66\x67\x6a\xe1\xd3\x3c\x07\xed\x57\x79\x1a\xc8\x94\xc2\x27\x4e\x91\xe4\x3e\x66\x0d\x20\x81\x5d\xab\xb0\x5a\x8a\x49\xef\x38\x9d\x79\xdf\x70\xbd\x73\xb6\x60\x0f\x32\xbd\x75\x24\xb6\xea\x04\x7e\x0e\x7c\xc6\x4c\xf9\xbe\xdf\xd4\xf1\xee\xd3\x86\xd7\x2b\x86\xfb\x13\x46\xf0\x7d\xc4\xf1\x0e\x50\xf1\x71\x9e\x8c\x1a\xe1\xf0\x98\xd6\x20\x2c\x81\xd7\xcb\xc5\x00\x32\xc7\xfb\xc5\x84\x40\x4d\x25\x79\x3d\x00\x3d\x8b\xbf\xe4\xb3\x7f\x01\x00\x00\xff\xff\x3e\x17\x16\xda\x4b\x17\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5963, mode: os.FileMode(436), modTime: time.Unix(1585244293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
