// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x8a\xdb\x3a\x10\xfd\x7d\xf3\x14\x22\x0f\x70\x97\xfb\xd7\x5c\x02\x7b\xd9\x70\x29\x5d\xb6\x90\xdd\x96\xfe\x0b\x63\x79\xea\x68\x23\x6b\xdc\xd1\x78\x9b\xbc\x7d\x71\xbe\x1a\xdb\xc9\x46\x8a\x52\x1a\x08\x01\x59\xc7\xe7\x9c\xd1\xcc\x68\x88\x33\x4e\xd0\x89\x57\xff\x8e\x94\x7a\xa5\x7c\xf3\xab\x94\x83\x0a\x33\x35\xce\x1b\x63\x0b\x8f\xfc\x86\x3c\xde\xac\x97\x34\xaf\x41\x16\x99\x1a\x97\x46\x16\x4d\xfe\xb7\xa6\xea\x2e\x67\x92\x05\xb2\xa5\xd2\xe8\xbb\x01\xa4\x06\x16\x03\x76\x9e\x13\x89\x17\x86\x3a\x53\xc2\x0d\x6e\x9e\x31\x7e\x6f\x0c\x63\x75\x50\xd0\x7e\x34\x08\x96\xc4\xeb\x4c\x3d\x7c\x78\xfe\xb8\x5b\xac\x99\x6a\x64\x31\xe8\x33\x35\xf6\x9a\x41\xf4\x62\xfb\xfe\xc9\x68\xfb\x65\x2c\x1a\x57\x80\xd3\xeb\x4c\xcd\xa6\x0f\x9f\x9f\x1e\xee\x9f\x5e\x46\x93\xd1\x19\x87\x97\x9d\x7c\x33\x16\x35\xd5\x66\x6f\x64\x17\x93\xfe\xf2\x7b\xfe\x72\x46\x58\x52\x23\x87\xa5\xbe\xd0\xff\x1f\x3f\xfd\x77\xff\x38\x52\xca\xd1\xbc\x02\x2f\xc8\xbb\xad\x67\x75\xef\x54\xbc\x21\x7b\x43\x4e\x18\xf4\x32\xfc\x70\x4e\xa1\xfe\x8c\xfe\x25\xae\xbd\x10\x63\xa8\xf2\xee\xfe\x81\xae\x8b\xa9\xf4\x3c\x9d\x7d\x99\xce\x4e\x26\x93\x80\x18\x72\xe4\xf0\x7c\x3e\xed\x6c\x5e\x32\x55\x80\x40\x94\xab\x1e\xe0\xca\x72\xe8\xbd\xe5\xbc\x81\xbf\x52\xca\x61\xbb\xae\x81\x8b\x4e\x39\xf4\x96\x5b\xe2\xd8\x52\xdc\x47\x8f\xa9\xce\x69\xe5\xd7\x4e\x07\xc7\xaf\x0b\x99\x28\x15\xdf\x08\xf6\x65\xcd\x50\x61\x64\x39\xf5\x31\x29\xfc\x35\xd3\x6a\x1d\x4a\x7c\xb4\x39\xbe\x14\xa6\x5f\x5f\xa6\xb3\xa7\x4d\xd5\x0e\x52\x09\x57\x82\xec\xc0\xce\x19\xa1\x58\x77\xf3\x49\x53\xe3\x24\x53\xff\x5c\xb4\x62\xa9\x2c\x8d\x2b\x43\xcd\x74\xb6\xff\xf6\x1b\xe1\x9d\x1a\xd8\x5f\x7a\x88\x1c\x79\xe7\x75\x10\x29\x59\x80\x2b\xd4\x8d\x50\x30\x73\x77\xff\xb0\x5d\x0f\xa4\x04\x76\xb2\x9a\xe9\xcd\xb4\x57\x45\x78\x10\x06\x90\x13\x99\xe9\x9b\x82\x6e\x21\xae\x7d\x1c\x21\xec\x68\x7b\xc2\x34\x72\xfe\x0a\xe9\x30\x4c\x0e\xd6\x82\x0b\xa6\xcd\x9f\xc8\xd6\xd3\x83\x5c\x1d\x4b\x46\x4d\x5c\x68\xb2\x16\x75\x7b\x0d\x86\xf2\x9f\xc2\xa5\x24\xfe\x96\x87\x51\xa3\x89\x28\xbc\x21\x2a\xa9\x05\x37\xd6\xb6\x39\x80\x3e\x26\xbb\xfa\xa0\x14\x05\x8c\x95\x71\x05\xb2\x0f\x3f\x86\x23\x40\x1a\x73\x7b\x9e\x25\x4a\x84\xf5\x3e\x26\x9d\xdf\x13\x97\xe0\x8c\x8f\xd5\xd0\xc5\xa5\xe8\xc8\xc1\x1b\xfd\x4a\x79\x70\x1d\x1e\xed\x4f\xf7\x0f\x45\x11\x6b\xfd\x00\x49\x67\xcf\x9b\xf6\x30\xe3\xe8\x7f\x61\x6e\xe0\xde\xb6\x1d\x35\x7c\x70\x18\xa2\xd2\x35\x54\xed\x18\x11\x7b\x06\x47\xa0\x1b\x28\xa0\x88\x06\xd8\x83\xa4\xb3\x47\xde\xad\x03\xd0\x2d\x14\x90\x46\x1f\xd1\x01\x7b\xa0\x1b\x74\x21\xb0\x18\xc9\x7f\x80\xdc\x80\x5d\x40\x62\xd9\xf7\x90\x14\x76\xbd\x0f\x62\xf8\xf4\x39\x80\x5c\x39\xbd\x57\x8d\x37\x3a\xe9\xdf\x9c\x4e\x04\x7f\x80\x8b\x8d\xe0\x01\x92\x34\xbc\x8b\x5e\x1a\x6b\xc3\xab\xa7\x03\xb8\x7a\x84\xdb\xbe\x5d\xc0\x2f\x83\x4d\xf7\x20\xef\x9b\xfe\x19\x00\x00\xff\xff\xd8\x37\x1d\x2f\x23\x14\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5155, mode: os.FileMode(436), modTime: time.Unix(1598137168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
