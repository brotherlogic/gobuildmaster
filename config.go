// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x3a\x75\xc9\xbf\x1f\x8e\x13\xd7\x6f\xad\x65\x7b\xde\x0a\x25\x70\xba\x47\x7a\xee\x4d\x8f\x12\xa3\x0d\x83\x61\x2b\x3e\x2c\x84\xf8\x89\xe1\xe9\x53\x08\x23\x53\x08\xc4\x32\x74\x3a\x89\x2c\xd0\x33\xd0\xf2\x64\x8f\x71\x9b\x49\xde\x05\x62\x19\x6b\xde\xb9\xf0\xbd\xc2\xf4\x2a\x24\xe4\x1d\x50\x82\xb1\x56\x57\x2d\x48\x26\x89\xb5\x4c\xb6\x21\x22\x5b\x26\x99\x05\x82\xc9\xc1\x69\x8d\xe0\x97\xd3\x04\x69\xc9\x20\xff\x53\x92\x21\x46\x3a\x06\xe2\xf6\xf3\xc3\x97\xb3\x31\x23\xcc\x80\x58\x83\x0d\xc4\xd2\x2a\x92\xac\x76\xc5\xfe\xab\x45\xf1\x4f\x10\x39\x13\x49\xa3\x8e\x81\xd8\xac\x6f\xbf\xdd\xdf\xde\xdc\x3f\x2e\x56\x8b\x57\x22\xec\x8f\xe4\x49\x27\xa0\x30\xd3\x97\x40\xce\x39\x69\x9a\xdf\x8a\x2f\x24\x90\x7b\x74\x5c\x9a\x9a\x44\x3f\xdd\x7d\xfd\x78\x73\xb7\x10\xc2\xe0\x36\x95\x96\x81\xce\xae\xaf\xf2\x3e\xb3\x78\x06\xb2\x1a\x0d\x93\x54\x7b\xff\xe2\x74\xa1\xfe\x0f\x7f\x99\x00\xb1\x3f\xf1\x8a\xfb\x4a\x88\xe1\xd5\xae\x67\x6d\x58\x47\x77\x80\x7a\xfa\xf6\x61\xbd\xf9\xbe\xde\x74\x75\x2e\x39\x63\x2e\x9b\x5c\x1a\x57\xa1\x33\x1c\x88\xeb\x5e\xf6\x7b\x38\x5a\x46\x02\x5f\xe2\x75\xff\xbf\xca\xb9\xa3\x07\xfa\xd8\x47\x84\x59\x88\x07\x7b\x34\xca\x37\x80\x06\x64\x4a\xe5\x33\xc2\xc3\xd1\xf7\xdc\x8a\x73\x4f\xd6\xd6\x3f\x1e\xd7\x9b\xfb\xd3\x04\xb4\xf2\x06\x07\x06\x32\x32\xd9\x12\xc8\xe8\x38\xb2\xe6\x05\x45\x02\x05\x7a\x40\xcb\xb6\x51\x93\x72\xe7\x92\x24\xcf\x03\xd8\x01\x13\xdb\x02\x8d\x62\xe0\x1b\xaa\x92\x14\x2d\xdb\x79\x2b\xcd\x79\xce\x47\x46\x9f\xa2\xd1\x8c\xde\x71\xd7\xdc\x67\xd7\xb7\x77\xbd\xf4\xe1\x00\xca\x0d\xe0\x5f\xf7\x6f\x0b\x40\xab\x8a\x9e\xe3\x9f\x6b\x8e\x7f\xf7\xbc\x78\x8f\x90\xf6\x72\xe4\xf3\x65\xff\x86\xad\xba\x8f\xbe\x2c\x6b\xbb\xac\xca\x84\x79\xcf\xfb\x13\xc9\x14\x06\xaa\x7a\x13\x33\xd3\xa4\x85\x00\x54\x15\xc1\xcb\x1b\xb1\x66\x5e\x2d\x46\x56\xeb\x22\x56\xa1\x54\x7b\x97\x0d\x95\xb8\x2a\x6a\xe4\xd0\x91\xd4\xd1\xf5\xe8\xba\x11\x28\xa4\x48\x61\x92\x80\x62\x8d\xc6\x37\x80\x2e\xdc\xf8\x96\x2f\x76\x93\x51\xe4\xdf\x3c\x0d\xc8\x14\x9d\x28\xb6\x8a\x81\x07\x4c\x5d\x13\x33\xcb\x4b\xbe\x38\xe4\xb7\x34\x6c\x97\x6d\xc2\xa5\x7d\x7c\xde\x4f\x5b\x24\xda\xb2\x6f\xd8\x35\xc0\x4c\xf3\x4a\x90\x6a\x13\x01\x35\x63\xae\x5a\xc7\xe8\xa2\x6f\xbe\x2d\x52\x2c\x8d\xb6\x8d\xfb\xa2\x73\x71\x4e\x1e\x19\xa1\x02\xdb\x55\xf9\xea\xca\xaa\xb8\x13\x66\xe2\x90\x62\xf3\xda\x6c\xda\x5f\xcf\xc0\x1b\x1a\xef\x3d\xde\xf9\xd7\x27\x6d\xe2\x0e\x06\xd5\xa5\x19\x87\xaf\xa6\x8b\x8d\x22\x94\x2b\x53\x2f\x3e\x2b\x13\xb0\xc3\x6e\x9e\x12\x32\xe5\xe2\x53\x97\x4e\xf2\x7f\x66\xb5\x20\x23\x55\x2b\x75\x56\xab\x49\x3f\x84\xd4\x1e\xcc\x2c\xed\xde\x3b\x83\x0d\xc8\x74\xe9\x08\x5d\xae\x04\xc3\x0a\xf8\x82\x99\x72\xfe\xb0\x57\xc7\x3f\x78\x6d\xfc\x09\x00\x00\xff\xff\x02\x88\x45\x99\x98\x13\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5016, mode: os.FileMode(436), modTime: time.Unix(1579739129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
