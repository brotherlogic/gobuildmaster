// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x61\x8b\xda\x40\x10\xfd\x5c\x7f\xc5\xe2\x0f\xe8\xd1\xaf\xa1\x08\x57\x94\x52\x7a\x58\xf0\xae\xa5\xdf\x64\xb3\x99\xc6\xad\x9b\x9d\x74\x76\x56\xcc\xbf\x2f\x51\x23\x26\x51\xb3\x7b\x69\x39\x41\x84\xc9\x3c\xdf\x9b\xd9\x37\xb3\xb1\xda\x32\x58\x76\xe2\xe3\x44\x88\xdf\x98\x1e\x7e\x85\xb0\xb2\x80\x44\x4c\x53\xaf\x4d\xe6\x80\x76\x40\xd3\x43\x3c\xc7\x75\x29\x79\x93\x88\x69\xae\x79\xe3\xd3\xf7\x0a\x8b\x87\x94\x90\x37\x40\x06\x73\xad\x1e\x7a\x90\x52\x12\x6b\x69\xd6\x29\x22\x3b\x26\x59\x26\x82\xc9\xc3\xe1\x19\xc1\x1f\xaf\x09\x8a\xb3\x82\xfa\xa3\x24\x43\x8e\x54\x25\x62\xfe\xe5\xf9\xeb\x29\x58\x12\x96\x40\xac\xc1\x25\x62\xea\x14\x49\x56\x9b\xe3\xff\xcf\x26\xc7\x2f\x41\xe6\x6d\x26\xad\xaa\x12\xb1\x5a\xcc\xbf\x2f\xe7\x8f\xcb\x97\xc9\x6c\x72\xa3\xc2\xe1\x4a\x7e\x69\x03\x0a\x4b\xdd\x14\x72\xea\x49\x37\x7c\xaf\xbe\x94\x40\x6e\xd1\xf3\x39\xd4\x15\xfa\xf9\xe9\xdb\xa7\xc7\xa7\x89\x10\x16\xd7\x85\x74\x0c\x74\x4a\xbd\xa9\xfb\xa4\x62\x07\xe4\x34\x5a\x26\xa9\xb6\xe1\x87\x73\x0d\xf5\x36\xfa\xb7\x50\x39\x46\x82\x50\xe5\xed\xfc\x01\xdf\x3c\x2f\x56\x3f\x16\xab\x6b\xce\x21\x6f\x6d\x53\xf8\x35\xe3\x9c\xea\x19\x52\x9f\x49\x96\x51\xf2\x3b\x80\x57\xfa\xbe\xdd\x84\xdb\xfa\xdf\x8d\xb1\xfd\x31\xae\x24\x65\x2d\xdb\x77\xc2\x35\x71\xec\xc8\x35\xcd\x23\x2c\x53\xdc\xbb\xca\xaa\xe0\xf6\xb5\x21\x33\x21\xe2\x07\xbe\x19\x5f\x92\x05\x44\x8e\x4d\x17\x33\x86\xbf\x24\xdc\x57\xa1\xc4\x17\xc9\x03\x96\x59\xfc\x7c\x59\xac\x96\x87\x51\xec\xd9\x06\xf6\x0c\x64\xa5\x59\x13\xc8\xac\x6a\x9b\x47\xa1\xb7\x9c\x88\x0f\x83\xba\x0d\xe6\xb9\xb6\x79\xa8\xf2\x56\xfa\x7f\x5f\xf3\x77\x0c\xdf\xdc\x64\x00\x14\x79\x91\xb5\x10\x63\x8e\x1c\xf6\xa0\x3c\x63\x30\x73\x3b\xbf\xbf\x83\x7b\x52\x02\xb7\x56\x49\xb8\xd3\xf5\xfe\x0f\x6f\x42\x0f\xd2\x53\x23\x84\xf3\x19\xfe\x0b\x71\xf5\xe3\x08\x61\x17\xe9\x23\x5e\x31\x6e\x5f\x15\x2d\x86\xd9\xb9\xb4\xe0\x81\xa9\xfd\x13\xb9\x67\x3a\x90\x57\xf7\x92\x40\x21\x65\x0a\x8d\x01\xc5\x1a\x6d\x28\xff\x35\xdc\x18\xe3\x1f\x79\x08\x14\xe8\x88\xc1\xeb\xa3\x46\xed\x5b\x6f\x4c\xed\x01\x70\x31\xee\xea\x82\xc6\x28\x20\x28\xb4\xcd\x80\x5c\xf8\x31\x5c\x00\xc6\x31\xd7\xe7\x99\x03\x47\x94\xde\xc5\xdc\xe5\xff\x1b\x00\x00\xff\xff\xfb\x63\x09\x4a\x3e\x0c\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3134, mode: os.FileMode(436), modTime: time.Unix(1594330001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
