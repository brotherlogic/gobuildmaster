// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x96\xe1\x8a\xda\x40\x10\xc7\x3f\xd7\xa7\x18\x7c\x80\x1e\xfd\x1a\x8a\x70\xc5\x50\x4a\x0f\x0b\xde\xb5\xf4\x9b\x6c\x36\xd3\xb8\x35\xd9\x49\x67\x67\xc5\xbc\x7d\x89\x26\x72\x49\xd4\x6c\x6a\x4b\x05\x11\x26\x33\xce\x6f\x66\xff\x33\x1b\x6b\xac\xa0\x15\x07\xef\x67\x00\x3f\x29\x39\xfe\x02\x58\x55\x60\x04\xf3\xc4\x9b\x3c\x75\xc8\x7b\xe4\xf9\xd1\x9e\xd1\xa6\x54\xb2\x8d\x60\x9e\x19\xd9\xfa\xe4\xad\xa6\xe2\x21\x61\x92\x2d\x72\x4e\x99\xd1\x0f\x83\x90\x52\xb1\x18\x95\x6f\x12\x22\x71\xc2\xaa\x8c\x40\xd8\xe3\xf1\x19\xe3\x2f\x6f\x18\x8b\x33\x41\xfd\xd1\x4a\x30\x23\xae\x22\x58\x7e\x7a\xfe\xdc\x18\x4b\xa6\x12\x59\x0c\xba\x08\xe6\x4e\xb3\x12\xbd\x3d\xfd\xff\x62\x76\xfa\x32\xa6\xde\xa6\xca\xea\x2a\x82\x75\xbc\xfc\xba\x5a\x3e\xae\x5e\x66\x8b\xd9\x95\x0a\xc7\x2b\xf9\x61\x72\xd4\x54\x9a\xb6\x90\xa6\x27\x7d\xf3\xad\xfa\x12\x46\xb5\x23\x2f\x67\x53\x1f\xf4\xe3\xd3\x97\x0f\x8f\x4f\x33\x00\x4b\x9b\x42\x39\x41\x6e\x5c\xaf\x72\x37\x14\x7b\x64\x67\xc8\x0a\x2b\xbd\x0b\x3f\x9c\x4b\x51\xff\x87\x7f\x87\x95\x13\x62\x0c\x25\xef\xfa\x8f\xe8\xe6\x39\x5e\x7f\x8b\xd7\x97\x94\xc3\xde\xda\xb6\xf0\x4b\xc2\x69\xea\x19\xa3\x4f\x95\xa8\x49\xf8\xbd\x80\x3f\xd4\x7d\xb7\x09\xd7\xf9\xdf\xdc\x23\xfb\x93\x5d\x2b\x4e\x3b\xb2\xef\x99\xeb\xc4\x53\x47\xae\x6d\x1e\x53\x99\xd0\xc1\x55\x56\x07\xb7\xaf\x1b\xb2\x00\x98\x3e\xf0\xed\xf8\xb2\x2a\x70\xe2\xd8\xf4\x63\xee\xc9\x5f\x32\x1d\xaa\xd0\xc4\xaf\x9c\x47\x24\x13\x7f\x7f\x89\xd7\xab\xe3\x28\x0e\x64\x83\x07\x41\xb6\x2a\xdf\x30\xaa\xb4\xea\x8a\x47\x93\xb7\x12\xc1\xbb\x51\xee\x9c\xb2\xcc\xd8\x2c\x94\xbc\xe3\xfe\xcf\xd7\xfc\x0d\xc1\xb7\x37\x19\x22\x4f\xbc\xc8\x3a\x11\xf7\x1c\x39\x1e\x50\x7b\xa1\xe0\xcc\x5d\xff\xe1\x0e\x1e\xa0\x04\x6e\xad\x92\x69\x6f\xea\xfd\x1f\xde\x84\x41\xc8\x80\x06\xc0\xf9\x94\xfe\x06\x5c\xfd\x78\x02\xd8\x2b\xf7\x3b\x5e\x31\xae\x5f\x15\x9d\x0c\x8b\x73\x69\xc1\x03\x53\xeb\x67\xe2\x9e\xe9\x85\xdc\xe8\xe5\xef\x00\x00\x00\xff\xff\xdb\xce\x04\x51\xb7\x09\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2487, mode: os.FileMode(436), modTime: time.Unix(1593977366, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
