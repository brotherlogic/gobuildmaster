// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x3a\x75\xc9\xbf\x1f\x89\x13\xcf\x6f\xa9\x65\x65\x66\x85\x12\x38\xdd\x23\x3f\xf7\xfa\x38\x31\xda\x30\x18\xb6\xe2\xc3\x4c\x88\x9f\x18\x1f\x3f\x85\x30\x32\x87\x48\xcc\x63\xa7\xb3\xc4\x02\xbd\x02\xcd\x8f\xf6\x14\xd7\x85\xe4\x4d\x24\xe6\xa9\xe6\x8d\x8b\xdf\x2b\xcc\x6f\x62\x42\xde\x00\x65\x98\x6a\x75\xd3\x81\x14\x92\x58\xcb\x6c\x1d\x23\xb2\x65\x92\x45\x24\x98\x1c\x1c\xcf\x08\x7e\x39\x4d\x90\x57\x0c\x0e\x7f\x4a\x32\xa4\x48\xfb\x48\xdc\x7f\x7e\xfa\x72\x32\x16\x84\x05\x10\x6b\xb0\x91\x98\x5b\x45\x92\xd5\xa6\xbc\x7f\x31\x2b\xff\x09\x12\x67\x12\x69\xd4\x3e\x12\xab\xe5\xfd\xb7\xc7\xfb\xbb\xc7\xe7\xd9\x62\x76\x21\xc2\xe1\x48\x5e\x74\x06\x0a\x0b\x7d\x0e\xe4\x94\x93\xb6\xf9\xad\xf8\x62\x02\xb9\x45\xc7\x95\xa9\x4d\xf4\xd3\xc3\xd7\x8f\x77\x0f\x33\x21\x0c\xae\x73\x69\x19\xe8\xe4\x7a\x91\xf7\x89\xc5\x2b\x90\xd5\x68\x98\xa4\xda\xfa\x17\xa7\x0f\xf5\x7f\xf8\xcb\x0c\x88\xfd\x89\xd7\xdc\x17\x42\x8c\xaf\x76\x33\x6b\xe3\x3a\xba\x07\x34\xd0\xb7\x4f\xcb\xd5\xf7\xe5\xaa\xaf\x73\xc9\x19\x73\xbe\xe4\xdc\xb8\x0a\x9d\xe1\x48\xdc\x0e\xb2\xdf\xc2\xde\x32\x12\xf8\x12\x6f\xfa\xff\x53\xce\x3d\x3d\x30\xc4\x3e\x21\x2c\x62\xdc\xd9\xbd\x51\xbe\x01\xb4\x20\xd7\x54\xbe\x20\xdc\xed\x7d\x9f\x5b\x73\x1e\xc8\xda\xf2\xc7\xf3\x72\xf5\x78\x9c\x80\x4e\xde\x60\xc7\x40\x46\x66\x6b\x02\x99\xec\x03\x6b\x5e\x52\x24\x50\xa0\x47\xb4\x6c\x17\x75\x55\xee\x5c\x96\x1d\xf2\x00\x76\xc4\xc4\x76\x40\x41\x0c\x7c\x43\x55\x92\x92\x79\x37\x6f\x95\xf9\x90\xf3\xc0\xe8\x73\x34\x9a\xd1\x3b\xee\x86\xfb\xe4\xfa\xf6\x6e\x90\x3e\xec\x40\xb9\x11\xfc\x9b\xfe\x5d\x01\xe8\x54\xd1\x73\xfc\x0f\x9a\xe3\xdf\x3d\x7f\xbd\x03\xa4\xbd\x1a\xf9\xc3\xb1\x7f\xc3\xd6\xdd\x83\x97\x65\xe3\x96\x45\x95\x30\xef\x79\x7f\x21\x99\xc3\x48\x55\x6f\x63\x26\x9a\xb4\x18\x80\xea\x22\x78\x7e\x47\x6c\x98\x17\xb3\xc0\x6a\x9d\xc5\x2a\x96\x6a\xeb\x8a\xb1\x12\x57\x47\x05\x0e\x1d\x49\x9d\xdc\x06\xd7\x8d\x40\x21\x25\x0a\xb3\x0c\x14\x6b\x34\xbe\x01\xf4\xe1\xc2\x5b\xbe\xbc\x4d\x26\x89\x7f\xf3\xb4\x20\xd7\xe8\x44\x79\x55\x0a\x3c\x62\xea\xda\x98\x49\xde\xe4\xcb\x87\xfc\x96\x86\xed\xbc\x4b\xb8\xb2\x87\xe7\xfd\x78\x45\xa6\x2d\xfb\x86\xdd\x00\x4c\x34\xaf\x04\xb9\x36\x09\x50\x3b\xe6\xba\x35\x44\x17\x7d\xf3\x6d\x91\x52\x69\xb4\x6d\xed\x8b\xde\xc3\x29\x79\x14\x84\x0a\x6c\x5f\xe5\xeb\x27\x8b\x72\x27\x4c\xc4\x21\xc7\xf6\xda\x6c\xdb\x2f\x67\xe0\x0d\x8d\xf7\x1e\xef\xc3\xd7\x27\x6d\xd2\x1e\x06\xf5\xa3\x09\x87\xaf\xa1\x8b\xad\x22\x54\x27\xd7\x2e\x3e\x2b\x33\xb0\xe3\x36\x4f\x05\xb9\x66\xf1\xa9\x73\x27\xf9\xbf\x66\x75\x20\x81\xaa\x95\x3b\xab\x95\xd7\x0f\x21\x7f\x02\x00\x00\xff\xff\xf8\x41\x74\xfd\xea\x11\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4586, mode: os.FileMode(436), modTime: time.Unix(1578074746, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
