// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x42\x7e\xc0\x0e\x1b\x0e\xfb\x10\x0c\x05\x6e\x68\xb0\x0d\x3b\xb4\x87\xb6\x1b\xb6\x7d\x09\x68\x99\x75\x74\x91\x45\x1f\x25\x65\xcd\x7e\xfd\xe0\x34\x71\xfd\x96\x58\x8a\xd2\xad\x40\x51\x40\xe6\xa3\x87\x14\xa9\x47\xb4\x55\xa3\x8c\x43\xe3\xac\xf8\xe1\x4a\x88\x2f\x94\xed\xfe\x0a\x61\xa0\xc4\xb9\x98\x65\x5e\xe9\xdc\x22\x6f\x90\x67\xbb\xf1\x82\x96\x15\xb8\xd5\x5c\xcc\x0a\xe5\x56\x3e\xfb\x46\x52\xf9\x3e\x63\x72\x2b\x64\x4d\x85\x92\xef\x07\x90\x0a\xd8\x29\xd0\xcb\x8c\xc8\x59\xc7\x50\xcd\x85\x63\x8f\xbb\x67\x19\x23\xac\xc9\xbb\xd6\x10\xe3\x57\xaf\x18\xcb\xc6\xa9\xfa\x47\x82\xc3\x82\x78\x3b\x17\x37\xbf\x3c\xfc\xba\x1f\xac\x98\x2a\x64\xa7\xd0\xce\xc5\xcc\x4a\x06\x27\x57\x2f\x94\xd7\x21\x33\xfd\x7c\xf7\xf0\xb8\x7c\xfc\xf3\xf3\x62\x6c\xba\xcf\x4a\x7c\x88\x98\xeb\xaf\xbb\xdb\xd1\x69\x0c\x19\xa9\xbd\x75\x87\xb5\xa8\x27\xab\x7f\x19\x73\x6f\x72\x30\x72\x3b\x17\xf7\x8b\x9b\xdf\x6e\x6f\x3e\xde\x3e\x76\xc6\xbf\xff\xd0\x7e\x72\x7d\x75\x24\x4f\xd3\xf9\x78\x52\x1a\x25\x55\xea\xe0\xc2\x3e\xb3\xfd\xe1\xa8\x2c\xf5\x43\xf8\xe9\xd3\xdd\x8f\x1f\x3f\x5d\x09\x61\x68\x59\x42\x1d\xee\xde\xf4\xa8\xdf\x7b\x2f\x36\xc8\x56\x91\x71\x0c\x72\x1d\x5e\x62\x63\xa8\xff\xc7\xff\x35\x6e\xad\x23\xc6\x50\xcf\xbb\xf6\xf1\xd5\xff\xb0\xb8\xff\x7d\x71\x3f\x56\x69\xc0\x05\x99\xe3\x45\xb6\x8f\x70\x2a\x9e\x27\x4d\x55\xb5\x0d\x8d\xa6\x6d\x7d\xb6\xe3\xed\x49\x12\x3c\xcf\xc1\x41\x54\x2a\x7a\x80\x33\x65\xa7\x37\xcb\xf1\x00\xde\x4d\x47\x10\xe7\x7e\xcb\xfa\xbf\x51\xd8\x91\x50\xdf\x54\x17\x27\xd7\x6d\x7a\x91\x5e\xc6\x25\x70\xde\xd1\xbe\xde\xf0\x2e\x92\x71\x45\x9e\xca\xd9\x0a\x41\xbb\x95\x5c\x61\x8c\x7c\x0d\x40\xd7\x42\x1c\x3d\x13\xa6\x3c\x80\x7c\x53\x3f\x8c\x3a\xa2\xfb\x98\x14\xfe\x27\x86\x12\x23\xf5\xbb\x8f\x49\xe1\xaf\x98\x9e\x83\x05\xab\x65\x3c\x51\xb8\x8b\x3f\x1e\x17\xf7\xb7\xbb\x33\x61\x50\xbc\xf8\xec\x90\x0d\xe8\x25\x23\xe4\x3d\xe5\x92\xe4\x8d\x9b\x8b\x6f\x27\xfd\xd6\x54\x14\xca\x14\xa1\x9e\x77\xcc\xdf\xb0\x6b\x3a\x71\x32\xba\x25\x99\xe5\x4b\xd1\xcc\xc5\x8c\x73\x65\x2b\x0d\xdb\xd9\xb4\xb0\xe1\x33\x4a\xef\x28\xb8\x3c\xba\xf6\xc3\xc3\x7b\x50\x2d\x81\x47\x44\xc5\xb4\x51\x75\xe3\x10\x5e\xa9\x03\xc8\xc8\xd2\x9f\x52\x5f\xeb\x73\xba\x84\xe3\xf5\xe3\x08\xa7\x5b\xe6\x93\xb5\xf2\x2e\xe2\xac\x96\x79\xab\x52\x12\x36\xed\xa1\x76\x42\xcf\xba\x57\xf3\x14\xd6\x82\xa1\xcc\x58\xe5\x45\xf0\x21\xdb\x45\xa4\x70\x67\x88\x1c\xa9\x92\x03\xc8\xf9\x79\xfb\x07\x99\xbe\xeb\xa7\x6e\x27\x55\x22\x44\xab\x18\x25\x71\x2e\x49\x6b\x94\x4e\x1d\xda\xcc\xe9\x08\xc6\x70\x49\x09\xdc\xf1\x30\x4a\x54\x11\xa7\xdd\x10\x95\x74\xde\x78\xad\xeb\x44\xa0\x8d\xd9\x91\x7d\x50\x8a\x07\x8c\xa5\x32\x39\xb2\x0d\x4f\x43\x0b\x90\xc6\x5c\xe7\xb3\x40\x17\x11\x7a\x1f\x93\xce\x6f\x89\x0b\x30\xca\xc6\xfa\xd0\xc5\x25\x6d\x66\xb0\x4a\x7e\xa1\x2c\x78\x27\xb7\xec\xd3\xe3\x87\x3c\x8f\x0d\xbd\x81\xa4\xb3\x67\xbe\x4e\x66\x1c\xfd\x2b\xe6\x02\xd1\xeb\x5a\xd5\xc2\x1b\xa7\x21\x2a\xdd\x87\xb2\xee\x99\x62\x73\xd0\x02\x5d\xc0\x03\x8a\x10\xc0\x1e\x24\x9d\x3d\xb2\x1f\x19\x80\x2e\xe1\x01\x49\xb4\x11\x0a\xd8\x03\x5d\x40\x85\x40\x63\x24\x7f\x03\xb9\x00\xbb\x03\x17\xcb\x7e\x80\xa4\xb0\xcb\xc3\x22\x86\x77\xf3\x03\xc8\x99\xaf\x2a\x0c\x2a\x0f\xf9\x88\x1a\xb6\x80\x7f\x83\x89\x5d\xc0\x06\x92\xde\xc2\x38\xb0\xeb\x60\xf6\x1e\x24\xad\xef\x2e\x94\x03\x5d\x47\xa2\x95\x0d\x56\xf1\x11\xd8\x05\x4a\x58\x12\x47\xef\xa0\x06\x93\xc2\x4f\x5c\x44\x2a\x58\x17\x91\xc2\x5d\xcf\x17\xdc\x3f\x37\xc6\x29\x8c\x0e\xcb\x2a\x94\xf0\x60\x9b\xc2\xb7\xc6\x6d\x09\x55\x15\xbe\xb8\x1d\x40\x0a\xf3\x6e\x83\xc6\xd4\x75\x07\x90\xd6\x10\xca\xb5\x0f\x5e\xe5\xb6\xf5\x65\xc4\x30\x79\x33\x6e\x40\xab\x1c\x22\xbe\xd1\x8c\xc0\xd2\xbe\xe2\x29\xe3\xe2\xde\xcd\x7b\x90\x14\x76\xeb\x28\x8e\xbb\x03\x48\x93\x03\xb9\x0e\x57\x83\x17\xdb\x14\xbe\xaf\x1e\x7d\x70\x94\x8d\x71\x7a\x7d\x3d\x81\x21\x1f\xf9\xd6\xf0\x8a\x49\xe7\x97\x1a\x21\xe2\xb3\xdf\x00\x94\xe2\x01\x7a\x1d\xce\xdc\x18\x5f\xe6\x3d\x39\xfe\x0d\x39\xb9\xc5\x00\xbb\xca\xa8\xb9\x71\x09\xb9\x87\xeb\x00\xce\xbe\x47\xac\x90\x2d\x19\xd0\xa7\x64\x31\xf0\x7b\xab\x45\xe9\x19\xa3\x6e\x16\x06\x90\xb7\xb8\x5f\x48\x3a\xa1\x4c\x2e\xa1\xac\x22\xff\x97\x63\x80\x4a\xf2\xc1\x2b\x1d\xf1\xe9\xa2\x65\x9e\x24\xee\x64\xc8\x46\xca\x7b\x17\x92\xd4\x7d\x81\x5d\xc7\xb4\x24\x6d\xfb\xd3\xbc\x53\xf7\x72\x24\x7d\x70\x77\xdd\x18\x9f\xa4\xfc\x37\x00\x00\xff\xff\x8a\xca\xee\xce\x2b\x24\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9259, mode: os.FileMode(436), modTime: time.Unix(1707178732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
