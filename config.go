// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6f\x6b\xdb\x3e\x10\x7e\xdd\x7c\x0a\x91\x0f\xf0\x2b\xbf\xbd\x0c\x23\xd0\xd1\x30\xc6\x4a\x07\x69\x37\xf6\x2e\x9c\xe5\x9b\xa3\x46\xd6\x79\x27\xb9\x4b\xf6\xe9\x87\x93\xd8\x8b\xff\xa4\x91\x2a\x6f\x2b\x94\x80\xac\xc7\xcf\xf3\x9c\xee\x4e\xb2\x8c\x32\x0e\x8d\xb3\xe2\xed\x44\x88\x27\x4a\xf6\xbf\x42\x18\xc8\x71\x26\xa6\x49\xa9\x74\x6a\x91\x9f\x91\xa7\xfb\xf1\x8c\x56\x05\xb8\xf5\x4c\x4c\x33\xe5\xd6\x65\xf2\x9f\xa4\xfc\x3a\x61\x72\x6b\x64\x4d\x99\x92\xd7\x3d\x48\x01\xec\x14\xe8\x55\x42\xe4\xac\x63\x28\x66\xc2\x71\x89\xfb\x67\x8c\xdf\x4b\xc5\x98\x37\x0a\xaa\x3f\x09\x0e\x33\xe2\xdd\x4c\xdc\x7e\x78\xf8\x78\x1c\x2c\x98\x0a\x64\xa7\xd0\xce\xc4\xd4\x4a\x06\x27\xd7\x87\xf7\xcf\x27\x87\x7f\xc6\xb4\x34\x29\x18\xb9\x9b\x89\xe5\xe2\xf6\xf3\xfd\xed\xcd\xfd\xe3\x64\x3e\x39\xe3\xf0\xb2\x93\x6f\x4a\xa3\xa4\x42\xd5\x46\x8e\x31\xe9\x0e\xbf\xe4\x2f\x61\x84\x0d\x95\xae\x19\xea\x0a\x7d\x7f\xf7\xe9\xdd\xcd\xdd\x44\x08\x43\xab\x1c\xac\x43\x3e\x4e\x3d\xab\xfb\xa8\xe2\x19\xd9\x2a\x32\x8e\x41\x6e\xfc\x17\x67\x08\xf5\x6f\xf4\x6f\x70\x67\x1d\x31\xfa\x2a\x6f\xcf\xef\xe9\xba\x98\x4a\x0f\x8b\xe5\x97\xc5\x72\x30\x99\x1c\x38\x45\x86\x0c\x9e\xcf\xa7\xa3\xcd\x4b\xa6\x52\x70\x10\xe4\xaa\x03\x78\x65\x39\x74\xde\x72\xde\xc0\x55\x4c\x39\x1c\xc6\x25\x70\xda\x2a\x87\xce\x70\x45\x1c\x5a\x8a\x75\xf4\x98\x8a\x84\xb6\x76\x67\xa4\x77\xfc\xda\x90\xb9\x10\xe1\x8d\xa0\x2e\x6b\x86\x1c\x03\xcb\xa9\x8b\x89\xe1\x2f\x98\xb6\x3b\x5f\xe2\x93\xc9\xe1\xa5\xb0\xf8\xfa\xb8\x58\xde\xef\xab\xb6\x97\x4a\xb8\x75\xc8\x06\xf4\x8a\x11\xd2\x5d\x3b\x9f\x24\x95\xc6\xcd\xc4\xff\x17\xad\x68\xca\x32\x65\x32\x5f\x33\xad\xe9\x7f\x7c\x47\x78\xa1\x06\xea\x4d\x0f\x91\x03\xf7\xbc\x16\x22\x26\x0b\x70\x8b\xb2\x74\xe4\xcd\xdc\x9e\xdf\x6f\xd7\x3d\x29\x9e\x9d\xac\x60\x7a\x56\xd5\x56\xe1\x1f\x84\x1e\x64\x20\x33\x6d\x99\xd2\x18\xe2\xaa\xc7\x01\xc2\x4e\xa6\x0f\x88\x8a\x38\xa0\x9c\xdf\x55\x5a\xa4\xf3\xc6\xad\x77\x0d\x55\x29\x15\xd8\x8d\x7a\x90\x8b\xad\xe1\x2a\xc0\xd0\x4f\x64\x7a\x33\x68\x47\xf8\xf8\x61\x94\xc4\xa9\x24\xad\x51\x56\xdb\xad\xaf\xa9\x21\x5c\x4c\x81\x1d\x78\x18\x25\xaa\x80\x02\xef\xa3\xa2\x5a\x7d\xa9\x75\xb5\x10\x68\x43\xb2\xb8\x0b\x8a\x51\xc0\x98\x2b\x93\x22\x5b\xff\x65\x38\x01\xc4\x31\x57\xeb\x99\xa1\x0b\xb0\xde\xc5\xc4\xf3\x5b\xe2\x0c\x8c\xb2\xa1\x1a\xda\xb8\x18\x1d\x09\x58\x25\x9f\x28\xf1\x2e\xee\x93\xf9\xf1\xfe\x21\x4d\x43\xad\x37\x90\x78\xf6\xa4\xac\x16\x33\x8c\xfe\x37\x66\x04\xf7\xba\xea\x6a\xfe\x07\x94\x3e\x2a\x5e\x43\x5e\x1d\x57\x42\xd7\xe0\x04\x34\x82\x02\x0a\x68\x80\x1d\x48\x3c\x7b\xe0\x1e\xde\x03\x8d\xa1\x80\x24\xda\x80\x0e\xd8\x01\x8d\xd0\x85\x40\x63\x20\x7f\x03\x19\x81\xdd\x81\x0b\x65\xaf\x21\x31\xec\xb2\x0e\xa2\xff\x29\xb7\x07\x79\xe5\x57\x02\x83\x4a\xa3\x2e\x8d\x5a\x01\xfc\x01\x26\x34\x80\x0d\x24\xea\x1b\xc1\xc9\x8d\xd2\xda\xbf\x78\x3a\x80\xf1\xbe\x12\x0e\x84\x0e\xec\xc6\x3b\x0e\x1d\x48\x4c\x1c\x52\x95\x29\x07\xba\x8a\xa9\x56\xd6\x7b\x3f\x19\x80\x8d\x50\x4c\x92\x38\xb8\x96\x1b\x4c\x0c\x3f\x71\x16\xd8\x4b\xdb\x88\x18\xee\xea\x7d\xde\x27\xf9\x66\x72\x0c\xa3\xc3\xbc\xf0\x25\xac\xe7\xc6\xf0\x6d\x70\x97\x43\x51\xf8\x07\xb7\x05\x88\xca\x6e\xb0\xeb\x84\x9a\xdb\x36\x9f\xbb\xc4\x16\x60\xcc\x2b\xd2\x02\xd9\x92\x01\xdd\xfd\xfc\x7b\x45\xcb\xb0\x28\x4b\xc6\xa0\xcb\xae\x1e\xe4\x2f\x5d\x79\xbd\xb4\x78\xbf\x02\x00\x00\xff\xff\xa3\x3e\x94\xd0\x37\x19\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6455, mode: os.FileMode(436), modTime: time.Unix(1603723281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
