// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xd1\x4a\xf3\x40\x10\x85\xef\xf3\x14\x43\x1e\xe0\x2f\xff\x6d\x90\x40\xa5\x45\xc4\x52\xa1\x55\x6f\xcb\x64\x3b\x26\x6b\x92\x9d\x38\x3b\x5b\xe8\xdb\x4b\x6b\x5a\x6d\x4d\x6d\x2a\x82\x81\xb0\x70\x76\xe6\xf0\x71\x66\xd6\x59\xa7\xe4\xd4\xc3\x55\x04\xf0\xc2\xd9\xf6\x04\x70\x58\x53\x02\x71\x16\x6c\xb5\xf4\x24\x2b\x92\x78\xab\xe7\xbc\x68\x50\x8b\x04\xe2\xdc\x6a\x11\xb2\x7f\x86\xeb\x41\x26\xac\x05\x49\xc5\xb9\x35\x83\x2f\x2d\x0d\x8a\x5a\xac\x16\x19\xb3\x7a\x15\x6c\x12\x50\x09\xb4\xbd\x13\x7a\x0d\x56\xa8\xde\x13\x6c\x3e\x83\x4a\x39\xcb\x3a\x81\xd1\xed\xfc\xae\x15\x1b\xe1\x86\x44\x2d\xf9\x04\x62\x6f\x04\xd5\x14\xef\xfe\x69\x1f\xa7\xf9\x78\xf6\x34\x9e\x75\x79\x29\xfa\xb2\xb2\x5e\x3f\xcc\x36\xbf\xd0\x32\xb8\x25\x3a\xb3\x4e\x60\x36\x1e\x3d\x4e\x47\xc3\xe9\x43\x94\x46\x27\xe2\x3a\x1f\xcb\xb3\xad\xc8\x70\x63\x77\xa9\xb4\x01\x1f\xcb\xdf\x85\x95\x09\x61\xc9\x41\xf7\xd2\x31\xe8\xcd\xe4\xfe\x7a\x38\x89\x00\x1c\x2f\x6a\xf4\x4a\xd2\x96\x9e\xe4\x6e\x29\x56\x24\xde\xb2\x53\x41\x53\xf6\x9f\x74\x57\xd7\xdf\xf0\x63\x45\xa2\xfd\xc1\x3f\x95\xa7\x00\x97\x4f\xfb\x30\xb5\xcb\x9e\x47\x47\xd3\x8f\x57\x57\x82\x73\x3b\x93\xdd\xe2\x1a\x0e\x4e\x13\xf8\x7f\x96\xbe\xa4\xb5\x57\x16\xea\x0b\x7e\x58\xff\xab\xcc\x1d\x3b\x90\xbe\x05\x00\x00\xff\xff\x7c\x96\xa5\x0f\x98\x04\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1176, mode: os.FileMode(436), modTime: time.Unix(1574726861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
