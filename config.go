// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x3a\x77\xc9\xbf\x1f\x89\x13\xcf\x96\xdd\x44\x96\x67\x56\x28\x85\xd3\x3d\xca\x73\xcf\xbd\xa9\x31\xda\x30\x18\xb6\xe2\xc3\x4c\x88\x9f\x18\x1f\xff\x0a\x61\x64\x0e\x91\x98\xc7\xa5\xce\x12\x0b\xf4\x0a\x34\x3f\xda\x53\x5c\x17\x92\x37\x91\x98\xa7\x9a\x37\x65\xfc\x5e\x61\x7e\x13\x13\xf2\x06\x28\xc3\x54\xab\x9b\x0e\xa4\x90\xc4\x5a\x66\xeb\x18\x91\x2d\x93\x2c\x22\xc1\x54\xc2\xf1\x8c\xe0\x57\xa9\x09\xf2\x9a\xc1\xe1\x47\x49\x86\x14\x69\x1f\x89\xfb\xcf\x4f\x5f\x4e\xc6\x82\xb0\x00\x62\x0d\x36\x12\x73\xab\x48\xb2\xda\x54\xf7\x2f\x66\xd5\x2f\x41\x52\x9a\x44\x1a\xb5\x8f\xc4\x6a\x79\xff\xed\xf1\xfe\xee\xf1\x79\xb6\x98\xbd\x11\xe1\xf5\x48\x5e\x74\x06\x0a\x0b\x7d\x0e\xe4\xa4\x89\x6b\xbe\x14\x5f\x4c\x20\xb7\x58\x72\x6d\x72\x89\x7e\x7a\xf8\xfa\xf1\xee\x61\x26\x84\xc1\x75\x2e\x2d\x03\x9d\x5c\xdf\xe4\x7d\x62\xf1\x0a\x64\x35\x1a\x26\xa9\xb6\xfe\xc9\xe9\x43\xfd\x1f\xfe\x32\x03\x62\x7f\xe2\x0d\xf7\x85\x10\xc3\xb3\xdd\x56\x6d\x58\x45\xf7\x80\xae\xd4\xed\xd3\x72\xf5\x7d\xb9\xea\xab\x5c\x2a\x8d\x39\x5f\x72\x2e\x5c\x85\xa5\xe1\x48\xdc\x5e\x65\xbf\x85\xbd\x65\x24\xf0\x25\xde\xf6\xff\xa7\x9c\x7b\x6a\xe0\x1a\xfb\x84\xb0\x88\x71\x67\xf7\x46\xf9\x06\xe0\x40\xc6\x64\xbe\x20\xdc\xed\x7d\x3f\xb7\xe1\x7c\x45\xb5\xe5\x8f\xe7\xe5\xea\xf1\xd8\x01\x1d\xdd\x60\xc7\x40\x46\x66\x6b\x02\x99\xec\x03\x73\x5e\x51\x24\x50\xa0\x07\x94\x6c\x17\x35\x4a\xbb\x32\xcb\x0e\x3a\x80\x1d\xd0\xb1\x1d\x50\x10\x03\xdf\x50\x95\xa4\x64\xde\xd5\xad\x36\x1f\x34\x0f\x8c\x3e\x47\xa3\x19\xbd\xe3\x6e\xb9\x4f\xbe\xdf\xde\x5d\xa5\x0f\x3b\x50\xe5\x00\xfe\x6d\xff\xee\x02\xe8\x64\xd1\xb3\xfd\x0f\x3b\xc7\xbf\x7a\xfe\x7a\x07\xac\xf6\xba\xe5\x0f\xc7\xfe\x05\xdb\x74\x0f\x1e\x96\xad\x5b\x16\xb5\x60\xde\xfd\xfe\x42\x32\x87\x81\x5b\xdd\xc5\x4c\xd4\x69\x31\x00\x35\x97\xe0\xf9\x8d\xd8\x32\x2f\x66\x81\xd9\x3a\x2f\xab\x58\xaa\x6d\x59\x0c\x5d\x71\x4d\x54\x60\xd3\x91\xd4\xc9\x6d\x70\xde\x08\x14\x52\xa2\x30\xcb\x40\xb1\x46\xe3\x1b\x40\x1f\x2e\xbc\xe4\xab\xdb\x64\x92\xf8\x17\x8f\x03\x19\xb3\x27\xaa\xab\x52\xe0\x01\x5d\xe7\x62\x26\x79\xc9\x57\x1f\xf2\x5b\x1a\xb6\xf3\x2e\xe1\xda\x1e\xae\xfb\xf1\x8a\x4c\x5b\xf6\x0d\xbb\x05\x98\xa8\x5f\x09\x72\x6d\x12\x20\x37\xe6\xa6\x35\x64\x2f\xfa\xea\x6d\x91\x52\x69\xb4\x75\xe6\x45\xef\xe1\x94\x3c\x0a\x42\x05\xb6\x2f\xf3\xcd\x93\x45\x35\x13\x26\xe2\x90\xa3\x3b\x36\x5d\xfb\xdb\x0a\x5c\xd8\xf1\xde\xed\x7d\xf8\xf7\x49\x9b\xb4\x87\x41\xf3\x68\xc2\xe6\x6b\xed\x45\x27\x09\xf5\xc9\xd8\xc1\x67\x65\x06\x76\xd8\xe4\xa9\x21\x63\x06\x9f\x3a\x57\x92\xff\x33\xab\x03\x09\xdc\x5a\x79\x69\xb5\x1a\xf5\x45\x48\xeb\xc1\xcc\xd2\x6e\xbd\x15\x74\x20\x17\x15\xfc\x13\x00\x00\xff\xff\x77\x5a\xd6\x72\x68\x12\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4712, mode: os.FileMode(436), modTime: time.Unix(1578112831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
