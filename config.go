// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6a\x1b\x3d\x10\xbd\xfe\xfc\x14\xc2\x0f\xf0\x85\xde\x9a\x62\x48\x89\x29\xa5\x21\x05\x27\x2d\xbd\x33\xb3\xda\xe9\x5a\xb1\xac\xd9\x8e\x66\x53\xfb\xed\xcb\xfa\x67\xeb\xdd\xb5\x63\x29\xda\xd2\x40\x30\xc8\x3a\x3e\x67\x46\x73\x66\x84\x9c\x71\x82\x4e\xbc\x7a\x3f\x52\xea\x99\xb2\xdd\xa7\x52\x0e\xd6\x38\x51\xe3\xac\x32\x36\xf7\xc8\x2f\xc8\xe3\xdd\x7a\x41\x8b\x12\x64\x39\x51\xe3\xc2\xc8\xb2\xca\xfe\xd7\xb4\xbe\xc9\x98\x64\x89\x6c\xa9\x30\xfa\xa6\x07\x29\x81\xc5\x80\x5d\x64\x44\xe2\x85\xa1\x9c\x28\xe1\x0a\x77\xdf\x31\xfe\xac\x0c\xe3\xba\x51\x50\xff\x69\x10\x2c\x88\xb7\x13\x75\xf7\xe9\xf1\xf3\x61\xb1\x64\x2a\x91\xc5\xa0\x9f\xa8\xb1\xd7\x0c\xa2\x97\xfb\xdf\x9f\x8e\xf6\xff\x8c\x79\xe5\x72\x70\x7a\x3b\x51\xf3\xd9\xdd\xd7\x87\xbb\xdb\x87\xa7\xd1\x74\x74\x21\xc2\xeb\x91\xfc\x30\x16\x35\x95\xe6\x18\xc8\x21\x27\xdd\xe5\xd7\xe2\xcb\x18\x61\x45\x95\x34\x4b\x5d\xa1\x1f\xef\xbf\x7c\xb8\xbd\x1f\x29\xe5\x68\xb1\x06\x2f\xc8\x87\xad\x17\x75\x1f\x54\xbc\x20\x7b\x43\x4e\x18\xf4\x2a\xfc\x70\xce\xa1\xfe\x8d\xfe\x15\x6e\xbd\x10\x63\xa8\xf2\xf6\xfe\x9e\xae\xab\xa5\xf4\x38\x9b\x7f\x9b\xcd\xcf\x16\x93\x80\x18\x72\xe4\xf0\x72\x3d\x1d\xc2\xbc\x16\x54\x0e\x02\x51\x51\x75\x00\x6f\xb4\x43\xe7\x57\x2e\x07\xf0\x5f\x8a\x1d\xf6\xeb\x1a\x38\x6f\xd9\xa1\xb3\x5c\x13\xc7\x5a\xf1\x98\x3d\xa6\x32\xa3\x8d\xdf\x3a\x1d\x9c\xbf\x36\x64\xaa\x54\x7c\x23\x38\xda\x9a\x61\x8d\x91\x76\xea\x62\x52\xf8\x4b\xa6\xcd\x36\x94\xf8\x64\x73\xbc\x15\x66\xdf\x9f\x66\xf3\x87\x9d\x6b\x7b\xa5\x84\x1b\x41\x76\x60\x17\x8c\x90\x6f\xdb\xf5\xa4\xa9\x72\x32\x51\xef\xae\x86\x62\xa9\x28\x8c\x2b\x42\x83\x69\x6d\xff\xeb\x13\xe1\x15\x0f\x1c\x87\x1e\x22\x47\xce\xbc\x16\x22\xa5\x0a\x70\x83\xba\x12\x0a\x66\x6e\xef\xef\xb7\xeb\x9e\x94\xc0\x4e\x56\x32\xbd\x98\x7a\x54\x84\x27\xa1\x07\x39\x53\x99\xbe\xca\x69\x08\x71\xf5\xd7\x11\xc2\x4e\xb6\x9f\x11\x95\x70\x41\xb9\x3c\x55\x5a\xa4\xd3\x26\xda\x60\x0f\xd5\x25\x15\xd9\x8d\x7a\x90\xe1\xca\x81\x51\x13\xe7\x9a\xac\x45\x5d\x0f\xcb\x50\x49\xe7\x70\x29\xf6\xd8\xf3\x30\x6a\x34\x11\xf6\xec\xa3\x92\x1a\x75\x65\x6d\x5d\x16\xe8\x63\x6a\xb0\x0b\x4a\x51\xc0\xb8\x36\x2e\x47\xf6\xe1\xc7\x70\x02\x48\x63\xae\xcf\xb3\x40\x89\x08\xbd\x8b\x49\xe7\xf7\xc4\x05\x38\xe3\x63\x35\xb4\x71\x29\x3a\x32\xf0\x46\x3f\x53\x16\x6c\xcd\x93\xfd\xe9\xf1\x43\x9e\xc7\x86\xde\x40\xd2\xd9\xb3\xaa\x3e\xcc\x38\xfa\x3f\x98\x01\xa2\xb7\x75\x93\x0d\xbf\x5e\xf4\x51\xe9\x1a\xd6\xf5\x65\x23\xf6\x0c\x4e\x40\x03\x28\xa0\x88\x06\xd8\x81\xa4\xb3\x47\x4e\xe0\x1e\x68\x08\x05\xa4\xd1\x47\x74\xc0\x0e\x68\x80\x2e\x04\x16\x23\xf9\x1b\xc8\x00\xec\x02\x12\xcb\x7e\x84\xa4\xb0\xeb\x63\x12\xc3\xef\xa8\x3d\xc8\x1b\xef\xf8\x0c\x26\x4f\x7a\xf2\x69\x25\xf0\x17\xb8\xd8\x04\x36\x90\xa4\x1b\xbe\xe8\x95\xb1\x36\xdc\x3c\x1d\xc0\x70\x97\xba\x3d\xa1\x80\x5f\x05\xe7\xa1\x03\x49\xc9\x43\x6e\x0a\x23\x60\xeb\x9c\x5a\xe3\x83\xe7\xc9\x19\xd8\x00\x66\xd2\xc4\xd1\x5e\x6e\x30\x29\xfc\xc4\x45\x64\x2f\x6d\x23\x92\x4e\x00\xfc\x32\xa3\xe6\x3d\x27\xe4\xb5\xaa\x05\x18\xf2\x11\xae\x44\xf6\xe4\xc0\x1e\xfd\xfd\x7a\x5d\xff\x0e\x00\x00\xff\xff\x3c\x5d\x13\x97\xb5\x16\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5813, mode: os.FileMode(436), modTime: time.Unix(1602723977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
