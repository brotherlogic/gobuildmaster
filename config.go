// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x6a\x1b\x3b\x10\xfd\x7d\xfd\x14\xc2\x0f\x70\xc3\xfd\x6b\x2e\x86\x94\x98\x52\x1a\x52\x70\xd2\xd2\x7f\x66\x56\x3b\x5d\x2b\x96\x35\xdb\xd1\x6c\x6a\xbf\x7d\x59\x7f\x6c\xbd\xbb\x76\x2c\x45\x1b\x1a\x08\x06\x59\xc7\xe7\xcc\x68\xce\x8c\x90\x33\x4e\xd0\x89\x57\xff\x8f\x94\x7a\xa6\x6c\xf7\xa9\x94\x83\x35\x4e\xd4\x38\xab\x8c\xcd\x3d\xf2\x0b\xf2\x78\xb7\x5e\xd0\xa2\x04\x59\x4e\xd4\xb8\x30\xb2\xac\xb2\x7f\x35\xad\x6f\x32\x26\x59\x22\x5b\x2a\x8c\xbe\xe9\x41\x4a\x60\x31\x60\x17\x19\x91\x78\x61\x28\x27\x4a\xb8\xc2\xdd\x77\x8c\x3f\x2b\xc3\xb8\x6e\x14\xd4\x7f\x1a\x04\x0b\xe2\xed\x44\xdd\x7d\x7a\xfc\x7c\x58\x2c\x99\x4a\x64\x31\xe8\x27\x6a\xec\x35\x83\xe8\xe5\xfe\xf7\xa7\xa3\xfd\x3f\x63\x5e\xb9\x1c\x9c\xde\x4e\xd4\x7c\x76\xf7\xf5\xe1\xee\xf6\xe1\x69\x34\x1d\x5d\x88\xf0\x7a\x24\x3f\x8c\x45\x4d\xa5\x39\x06\x72\xc8\x49\x77\xf9\xb5\xf8\x32\x46\x58\x51\x25\xcd\x52\x57\xe8\xc7\xfb\x2f\x1f\x6e\xef\x47\x4a\x39\x5a\xac\xc1\x0b\xf2\x61\xeb\x45\xdd\x07\x15\x2f\xc8\xde\x90\x13\x06\xbd\x0a\x3f\x9c\x73\xa8\xbf\xa3\x7f\x85\x5b\x2f\xc4\x18\xaa\xbc\xbd\xbf\xa7\xeb\x6a\x29\x3d\xce\xe6\xdf\x66\xf3\xb3\xc5\x24\x20\x86\x1c\x39\xbc\x5c\x4f\x87\x30\xaf\x05\x95\x83\x40\x54\x54\x1d\xc0\x1b\xed\xd0\xf9\x95\xcb\x01\xfc\x93\x62\x87\xfd\xba\x06\xce\x5b\x76\xe8\x2c\xd7\xc4\xb1\x56\x3c\x66\x8f\xa9\xcc\x68\xe3\xb7\x4e\x07\xe7\xaf\x0d\x99\x2a\x15\xdf\x08\x8e\xb6\x66\x58\x63\xa4\x9d\xba\x98\x14\xfe\x92\x69\xb3\x0d\x25\x3e\xd9\x1c\x6f\x85\xd9\xf7\xa7\xd9\xfc\x61\xe7\xda\x5e\x29\xe1\x46\x90\x1d\xd8\x05\x23\xe4\xdb\x76\x3d\x69\xaa\x9c\x4c\xd4\x7f\x57\x43\xb1\x54\x14\xc6\x15\xa1\xc1\xb4\xb6\xbf\xfb\x44\x78\xc5\x03\xc7\xa1\x87\xc8\x91\x33\xaf\x85\x48\xa9\x02\xdc\xa0\xae\x84\x82\x99\xdb\xfb\xfb\xed\xba\x27\x25\xb0\x93\x95\x4c\x2f\xa6\x1e\x15\xe1\x49\xe8\x41\xce\x54\xa6\xaf\x72\x1a\x42\x5c\xfd\x75\x84\xb0\x93\xed\x67\x44\x25\x5c\x50\x2e\x4f\x95\x16\xe9\xb4\x89\x36\xd8\x43\x75\x49\x45\x76\xa3\x1e\x64\xb8\x72\x60\xd4\xc4\xb9\x26\x6b\x51\xd7\xc3\x32\x54\xd2\x39\x5c\x8a\x3d\xf6\x3c\x8c\x1a\x4d\x84\x3d\xfb\xa8\xa4\x46\x5d\x59\x5b\x97\x05\xfa\x98\x1a\xec\x82\x52\x14\x30\xae\x8d\xcb\x91\x7d\xf8\x31\x9c\x00\xd2\x98\xeb\xf3\x2c\x50\x22\x42\xef\x62\xd2\xf9\x3d\x71\x01\xce\xf8\x58\x0d\x6d\x5c\x8a\x8e\x0c\xbc\xd1\xcf\x94\x05\x5b\xf3\x64\x7f\x7a\xfc\x90\xe7\xb1\xa1\x37\x90\x74\xf6\xac\xaa\x0f\x33\x8e\xfe\x0f\x66\x80\xe8\x6d\xdd\x64\xc3\xaf\x17\x7d\x54\xba\x86\x75\x7d\xd9\x88\x3d\x83\x13\xd0\x00\x0a\x28\xa2\x01\x76\x20\xe9\xec\x91\x13\xb8\x07\x1a\x42\x01\x69\xf4\x11\x1d\xb0\x03\x1a\xa0\x0b\x81\xc5\x48\xfe\x06\x32\x00\xbb\x80\xc4\xb2\x1f\x21\x29\xec\xfa\x98\xc4\xf0\x3b\x6a\x0f\xf2\xc6\x3b\x3e\x83\xc9\x93\x9e\x7c\x5a\x09\xfc\x05\x2e\x36\x81\x0d\x24\xe9\x86\x2f\x7a\x65\xac\x0d\x37\x4f\x07\x30\xdc\xa5\x6e\x4f\x28\xe0\x57\xc1\x79\xe8\x40\x52\xf2\x90\x9b\xc2\x08\xd8\x3a\xa7\xd6\xf8\xe0\x79\x72\x06\x36\x80\x99\x34\x71\xb4\x97\x1b\x4c\x0a\x3f\x71\x11\xd9\x4b\xdb\x88\xa4\x13\x00\xbf\xcc\xa8\x79\xcf\x09\x79\xad\x6a\x01\x86\x7c\x84\x2b\x91\x3d\x39\xb0\x47\x7f\xa7\xd4\xb5\x47\x5d\x31\x46\xbd\xa7\xf4\x20\xef\xf1\x84\xf2\xda\x51\xfd\x0e\x00\x00\xff\xff\xea\xc7\x61\x84\x87\x17\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6023, mode: os.FileMode(436), modTime: time.Unix(1603201021, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
