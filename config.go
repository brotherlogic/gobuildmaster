// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6b\xdb\x3a\x14\xfe\x7c\xf3\x2b\x44\x7e\xc0\x2d\xfd\x1a\x2e\x81\x5e\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\x3e\x75\xb4\xc8\x3a\xde\x91\xd4\x25\xff\x7e\x38\x6e\x5c\xbf\x35\x91\xe4\x9a\xae\x50\x02\xd2\x79\xe4\xe7\xbc\x1f\x49\x4b\x6d\x41\x5b\xc3\xfe\x9b\x31\xf6\x13\x93\xe3\x2f\x63\x9a\xe7\xb0\x60\xf3\x54\x1a\x81\xcf\x40\x87\xf9\x71\x35\xc3\x4d\xc1\xed\x76\xc1\xe6\x99\xb4\x5b\x97\xfc\x2b\x30\xbf\x4a\x08\xed\x16\x48\x61\x26\xc5\x55\x07\x90\x10\xf0\x1d\x3a\xbb\x60\x96\x1c\xcc\x18\x5b\x32\x36\x63\x8c\x20\x75\x3a\xe5\x5a\x1c\x16\xec\xd3\xdd\xd7\xff\x6f\xee\x66\xcb\xd9\x79\x26\x89\x93\x2a\x35\x40\xcf\x40\xbe\x5c\x7a\x90\x82\x93\x95\x5c\x6d\x12\x44\x6b\x2c\xf1\xa2\xa6\x55\x52\xfa\xe5\x24\x41\x5e\x33\x28\xff\x04\xb7\x90\x21\x1d\x16\xec\xf6\xf3\xc3\x97\x97\xc5\x82\xb0\x00\xb2\x12\xcc\x82\xcd\x8d\x20\x6e\xc5\xb6\x3a\x7f\x39\xab\xfe\x9b\xea\xad\x57\xb7\xdf\xee\x6f\x6f\xee\x1f\xdf\xd6\xf0\xb2\x26\x4f\x52\x81\xc0\x42\x9e\x14\x79\xb1\x49\x77\xf9\x9c\x7e\x7d\x4f\x0c\xfb\x81\x31\x8d\x9b\x9c\x1b\x0b\xf4\x22\x7a\xc9\x33\xcf\x40\x46\xa2\xb6\xc4\xc5\xce\xdf\x39\x43\xa8\x8f\xe1\xcf\x15\x90\xf5\x27\xde\x10\xef\x07\xb3\x87\xb7\xdb\x56\x0b\x8b\xe8\x01\xd0\x85\xb8\x7d\x58\xad\xbf\xaf\xd6\x43\x91\x4b\x4e\xeb\xd3\x21\xa7\xc0\x15\xe8\xb4\x5d\xb0\xeb\x8b\xec\x77\x70\x30\x16\x09\x7c\x89\xb7\xe5\xdf\x95\x73\x44\x2d\x49\x09\x8b\x04\xf7\xe6\xa0\x85\x77\x5d\x6b\x43\xc6\x78\xbe\x20\xdc\x7b\xd7\xd3\x86\xf0\x05\xab\xad\x7e\x3c\xae\xd6\xf7\xc7\x0c\xe8\xd9\x0d\xf6\x16\x48\x73\xb5\x21\xe0\xe9\x21\xd2\xe7\x15\x45\x02\x01\x32\x20\x64\xfb\xa8\x51\xb6\x73\x4a\x95\x76\x00\x13\x90\xb1\x3d\x50\x14\x03\x5f\x55\x05\xa7\x74\xde\xb7\x5b\xbd\x5c\xda\x3c\x52\xfb\x1c\xb5\xb4\xe8\xad\x77\x4b\x7c\xf2\xfe\xf6\xcf\x45\xfa\x0a\xb3\x4c\xea\xcc\x97\x7e\x4b\xfc\x2f\xa0\x0f\x7b\x10\x2e\xc0\xfc\x6d\xf9\xf7\x9b\x84\xca\x96\xe9\x1f\xfc\xaf\xd2\x11\x93\x49\x5d\xb1\xca\x6d\xff\x7c\x6b\x8a\x47\xd7\xfa\xd6\x29\xcb\xda\x60\xde\xe5\xea\x89\x78\x0e\x81\x43\x49\x17\x33\x51\xa1\x48\x00\xa8\xd9\xc3\x4f\x23\x6e\x6b\x79\x39\x8b\xf4\xd6\xa9\xd7\x26\x5c\xec\x5c\x11\xda\xa1\x9b\xa8\xc8\xa4\x23\x2e\xd3\xeb\x68\xbf\x11\x08\xa4\x54\xa0\x52\x20\xac\x44\xed\xab\xc0\x10\x2e\x3e\xe4\xab\xd3\x78\x9a\xfa\x07\x4f\x07\x32\xa6\xcd\x55\x47\x65\x60\x03\xb2\xae\x8b\x99\xe4\x22\x52\x7d\xe4\x37\xd7\xd6\xcc\xfb\x84\xeb\xf5\x78\xbb\x1f\x8f\x50\xd2\x58\x5f\xb5\x5b\x80\x89\xf2\x95\x20\x97\x3a\x05\xea\xea\xdc\x5c\x8d\x69\xeb\xbe\xf6\x36\x48\x19\xd7\xd2\x74\xea\xc5\xe0\xe6\x94\x3c\x0a\x42\x01\x66\xc8\xf3\xcd\x9d\x65\x55\x13\x26\xe2\x90\x63\xb7\x6c\x76\xd7\xdf\xb6\xc0\x99\x1e\xef\xfd\xf9\x72\x9c\x18\x26\xd0\xd8\x99\x94\xc2\xf1\x02\x5a\x0f\x46\xed\x7a\xd5\xd8\x9a\x30\xff\x5b\xad\xb9\x13\x07\xf5\xce\xd8\xda\x6b\xb8\x02\x13\x56\xfc\x6a\xc8\x98\xda\x2b\x4e\xc1\xec\x3f\xe9\xf5\x20\x91\x8d\x33\x77\x46\x8a\x51\x4f\x49\xad\x2b\x87\xe5\x66\xe7\x6d\xc1\x0e\x64\x7c\xf7\x4a\x5c\xd9\x8c\xc2\x1c\xf8\x8a\x19\xf3\xfd\xb0\xc1\xe7\xc3\x07\x9e\xa0\x87\x14\xff\x57\x94\xe8\x2b\x91\xe7\x35\xa4\xe4\xe3\x3d\x9c\xd5\xc2\xf1\x31\x0d\x4e\xf9\x0f\x43\xb5\x70\xfc\xf7\x0c\x08\x47\x10\xf4\x58\xd3\x83\x4c\xf1\x64\x33\x22\x31\x52\x49\x41\x6f\x5e\xaf\xe2\x91\x31\x52\xde\x68\x02\xaf\x60\x1d\xc8\x19\xff\xfd\x09\x00\x00\xff\xff\xc7\xd7\xfb\xa3\xba\x18\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6330, mode: os.FileMode(436), modTime: time.Unix(1587415356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
