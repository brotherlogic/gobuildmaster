// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdb\x6e\xe3\x36\x10\x7d\xde\xfd\x0a\xc2\x1f\xd0\x45\x8b\x45\x1f\x8c\x22\xc0\xb6\x31\xda\xa0\x8b\x24\x70\xdc\xa2\xed\x8b\x41\x51\x13\x99\x6b\x8a\xa3\x1d\x92\x6e\xdc\xaf\x2f\xe4\x5b\x74\x73\x44\x66\x9c\x36\x40\x10\x80\x9a\xc3\x33\xc3\x19\x1e\x8e\xa8\x58\x6d\x3d\x58\xef\xc4\x0f\xef\x85\xf8\x82\xd9\xee\xaf\x10\x56\x96\x30\x15\x93\x2c\x68\x93\x3b\xa0\x0d\xd0\x64\x37\x5e\xe0\xb2\x92\x7e\x35\x15\x93\x42\xfb\x55\xc8\xbe\x51\x58\x7e\xc8\x08\xfd\x0a\xc8\x60\xa1\xd5\x87\x1e\xa4\x92\xe4\xb5\x34\xcb\x0c\xd1\x3b\x4f\xb2\x9a\x0a\x4f\x01\x76\xcf\x32\x02\xb9\xc6\xe0\x1b\x43\x04\x5f\x83\x26\x28\x4f\x4e\xd5\x3f\x4a\x7a\x28\x90\xb6\x53\x71\x7d\xf3\xf0\xeb\x61\xb0\x22\xac\x80\xbc\x06\x37\x15\x13\xa7\x48\x7a\xb5\xda\x53\x5e\xc5\xcc\xf4\xcb\xdd\xc3\x62\xb9\xf8\xf3\x7e\x36\x34\xdd\xbd\x16\x1f\x13\xe6\xfa\xeb\xee\x76\x70\x1a\x8b\x56\x99\xe0\xfc\x71\x2d\xea\xc9\xea\x5f\x82\x3c\xd8\x5c\x5a\xb5\x9d\x8a\xf9\xec\xfa\xb7\xdb\xeb\x4f\xb7\x8b\xd6\xf8\xf7\x1f\x9b\x4f\xae\xde\x9f\xc9\xd3\x78\x3e\x1e\xb5\x01\x85\x95\x3e\xba\x70\xc8\x6c\x77\x38\x29\x4b\xdd\x10\x7e\xfe\x7c\xf7\xe3\xa7\xcf\xef\x85\xb0\xb8\x2c\x65\x1d\xee\xc1\xf4\xac\xdf\x07\x2f\x36\x40\x4e\xa3\xf5\x24\xd5\x3a\xbe\xc4\x86\x50\xff\x8f\xff\x6b\xd8\x3a\x8f\x04\xb1\x9e\xb7\xed\xd3\xab\xff\x61\x36\xff\x7d\x36\x1f\xaa\xb4\x32\xd7\xae\x32\x72\x7b\xbe\xce\x0e\x41\x8e\x85\xf4\x68\xb0\xaa\xb6\xb1\x01\x35\xad\x5f\xed\x7b\x73\x12\x86\xe7\xb9\xf4\x32\x29\x1b\x1d\xc0\x2b\x95\xa7\x33\xcb\xf9\x00\xde\x8d\x47\x90\xe6\x7e\xc3\xfa\xbf\x11\xd9\x81\x50\xdf\x54\x1a\x47\xd7\x6d\x7c\x91\xf6\xe3\x4a\x52\xde\x92\xbf\xce\xf0\x2e\x92\x61\x51\x1e\xcd\x19\x61\x95\xe1\x93\xdb\x5a\x15\x9d\xb8\x36\xe4\x4a\x88\xb3\x47\xc2\x18\xfb\x0a\xa4\xf1\x2b\xb5\x82\x14\xfd\xec\x81\x38\x1e\xc8\x7c\x53\x3f\x4c\xea\x11\xba\x18\x0e\xff\x23\xc9\x12\x12\x0f\x90\x2e\x86\xc3\x5f\x11\x3e\x45\xcb\x65\xc3\x78\x64\xdb\xcc\xfe\x58\xcc\xe6\xb7\xbb\x43\xa9\xb7\x75\xe0\xc9\x03\x59\x69\x96\x04\x32\xef\xe8\xa6\xc2\x60\xfd\x54\x7c\x3b\xea\xb7\xc1\xa2\xd0\xb6\x88\xf5\xbc\x65\xfe\x86\x6d\xdb\x0b\x47\xb3\x5f\xa2\x5d\xee\x8b\x66\x2a\x26\x74\x3c\xf0\xc6\x65\x15\x9e\x40\x05\x8f\xd1\xe5\xd1\xb6\xef\x77\x0f\xbd\x6a\x89\x3c\xa0\x2a\xc2\x8d\xae\x3b\x97\xf8\x4a\xed\x41\x06\x96\xfe\x25\xed\x77\x21\xc7\x4b\x38\x5e\x3f\x4e\x70\xba\x61\x9e\x5e\x2b\xf3\xd9\x4f\xb3\x9b\xfb\xc5\xf2\x7e\x7e\x73\xbb\x38\x74\x0c\x57\xcc\x5d\xda\xea\x8e\x22\x14\xfa\xd9\x9c\xc3\x9a\x01\x50\xa2\x34\xf5\x20\xed\xc5\x7a\x97\xd0\x56\xfd\x03\x84\xdf\x4d\x3a\xcb\xb7\xd3\x07\x11\x23\x10\x04\x0a\x29\x57\x68\x0c\x28\xaf\xd1\xc6\x46\x30\x84\xe3\x2c\xe2\x9e\x87\x40\x81\x4e\x38\x62\xfa\x28\x96\xc8\x07\x63\xea\x44\x80\x4b\xd9\x06\x5d\x10\xc7\x03\x82\x52\xdb\x1c\xc8\xc5\xa7\xa1\x01\xe0\x31\xd7\xf9\x2c\xc0\x27\x84\xde\xc5\xf0\xf9\x1d\x52\x21\xad\x76\xa9\x3e\xb4\x71\xac\xcd\x2c\x9d\x56\x5f\x30\x8b\xde\xc9\x0d\x7b\x7e\xfc\x32\xcf\x53\x43\x3f\x41\xf8\xec\x59\xa8\x93\x99\x46\xff\x8c\xb9\x40\xf4\xa6\x56\xb5\xf8\x6e\xa5\x8f\xe2\xfb\x50\xd6\x8d\x4a\x6a\x0e\x1a\xa0\x0b\x78\x80\x09\x02\xd8\x81\xf0\xd9\x13\x9b\x80\x1e\xe8\x12\x1e\xa0\x02\x97\xa0\x80\x1d\xd0\x05\x54\x48\x1a\x48\xe4\x3f\x41\x2e\xc0\xee\xa5\x4f\x65\x3f\x42\x38\xec\xea\xb8\x88\xf1\x2d\x74\x0f\xf2\xca\xf7\x03\x92\x3a\x8f\xb9\x3a\x8d\x5b\xc0\xbf\xa5\x4d\x5d\xc0\x13\x84\xdf\xc2\x78\xe9\xd6\xd1\xec\x1d\x08\xaf\xf7\x2d\xb4\x97\xa6\x8e\xc4\x68\x17\xad\xe2\x03\xb0\x0b\x94\xb0\x42\x4a\xde\x41\x27\x0c\x87\x1f\xa9\x48\x54\xb0\x36\x82\xc3\x5d\xcf\x17\xdd\x3f\x9f\x8c\x39\x8c\x1e\xca\x2a\x96\xf0\x68\xcb\xe1\x5b\xc3\xb6\x94\x55\x15\xbf\xb8\x2d\x00\x87\x79\xb7\x41\x53\xea\xba\x05\xe0\x35\x84\x6a\x1d\xa2\x57\xb9\x69\x7d\x19\x31\x64\x6f\xc6\x8d\x34\x3a\x97\x09\x17\x23\x03\x30\xde\xd5\x99\xb6\x3e\x23\x9d\x17\xd1\x77\xde\x1d\x08\x87\xdd\x79\x4c\xe3\x6e\x01\x78\x72\xa0\xd6\xf1\x6a\xb0\xb7\xe5\xf0\x7d\x0d\x10\xa2\xa3\x3c\x19\xf3\xeb\xeb\x51\x5a\x0c\x89\x6f\x0d\xcf\x18\x3e\xbf\x32\x20\x13\xee\xda\x7a\x20\x8e\x07\x10\x4c\x3c\xf3\xc9\xf8\x32\xef\xc9\xe9\x6f\xc8\xec\x16\x43\xba\x55\x86\xa7\x8f\x2c\x31\x9f\xde\x5a\x80\x57\x7f\x3a\xac\x80\x1c\x5a\x69\x5e\x92\xc5\xc8\x4b\x4e\x07\x2a\x10\x24\x5d\xe7\xf7\x20\x6f\x71\xa9\xcf\x3a\xa1\x6c\xae\x64\x59\x25\xfe\x07\x47\x0f\xc5\xf2\x21\x68\x93\x70\x75\xd1\x30\x67\x89\x3b\x5a\x74\x89\xf2\xde\x86\xbc\xc8\xfe\x6f\x00\x00\x00\xff\xff\xb3\x47\x2e\xe2\x36\x23\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 9014, mode: os.FileMode(436), modTime: time.Unix(1671242126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
