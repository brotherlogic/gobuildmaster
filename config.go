// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x6f\xe3\x36\x0c\xfe\x7c\xfd\x15\x46\x7e\xc0\x0e\x1b\x86\x7d\x08\x86\x02\xb7\x35\x18\x8a\x1d\xba\x43\xae\x1b\xf6\x2d\xa0\x65\xd6\xd1\x45\x16\x7d\x94\x94\x35\xfb\xf5\x83\xf3\x76\x7e\x49\x6a\xb1\x32\xba\x02\x45\x00\x99\x8f\x1f\x92\xa2\x1e\xd1\x92\xd5\xd6\xa3\xf5\x2e\xfb\xf9\x26\xcb\xbe\x50\xbe\xff\xcd\x32\x0b\x15\xce\xb3\x59\x1e\xb4\x29\x1c\xf2\x16\x79\xb6\x1f\x2f\x69\x55\x83\x5f\xcf\xb3\x59\xa9\xfd\x3a\xe4\xdf\x29\xaa\xde\xe7\x4c\x7e\x8d\x6c\xa8\xd4\xea\xfd\x00\x52\x03\x7b\x0d\x66\x95\x13\x79\xe7\x19\xea\x79\xe6\x39\xe0\xfe\x59\xce\x08\x1b\x0a\xbe\x35\xc4\xf8\x35\x68\xc6\xea\xec\x54\xf3\xa7\xc0\x63\x49\xbc\x9b\x67\x77\xf7\x9f\x7f\x3f\x0e\xd6\x4c\x35\xb2\xd7\xe8\xe6\xd9\xcc\x29\x06\xaf\xd6\x07\xca\xdb\x9b\xc3\x3f\x63\x11\x6c\x01\x56\xed\xe6\xd9\x72\x71\xf7\xe7\xc3\xdd\x87\x87\xc7\xce\xf8\x4f\x3f\xb6\x9f\xdc\xde\x5c\x49\xc7\x78\xd8\x4f\xda\xa0\xa2\x5a\x9f\xa2\x3e\x26\xb0\x3f\x2c\x4a\x46\x3f\x84\xdf\x3e\xfe\xf1\xcb\x87\x8f\x37\x59\x66\x69\x55\x81\xf3\xc8\x47\xd3\xab\x7e\x1f\xbd\xd8\x22\x3b\x4d\xd6\x33\xa8\x4d\xfc\x4c\x5e\x42\xfd\x3f\xfe\x6f\x70\xe7\x3c\x31\xc6\x7a\xde\xb5\x97\x17\xd9\xe7\xc5\xf2\xaf\xc5\xf2\x52\x99\x29\x13\x9c\xff\xe1\x7a\x95\x1d\x43\x1c\x0b\xe8\xc9\x50\x5d\xef\x62\xc3\x69\x5b\x4f\x19\x4c\xfb\xbd\x09\xc1\x14\xe0\x41\x34\x3d\x3d\xc0\x2b\x57\x7c\xef\x2d\xd7\x03\x78\x37\x1e\x81\xcc\xfd\x96\xf5\xdb\x88\xdb\x14\xa1\x8e\xc7\x75\x18\x57\xc0\x45\x47\xc2\x7a\xc3\x0d\xf1\x15\x61\x1d\x4d\x33\x53\x9d\xd3\xb3\xdb\x59\x15\x9d\xeb\x2e\xe4\x36\xcb\xae\xca\xfa\x18\xfb\x1a\xc1\xf8\xb5\x5a\xa3\x44\x03\x07\xa0\x14\x0f\xa0\xd8\x36\x0f\x45\xdb\x69\x1f\x93\xc2\xff\xc4\x50\xa1\x70\x13\xe8\x63\x52\xf8\x6b\xa6\xe7\x68\xd1\x6b\x19\xcb\x17\xd2\xe2\xef\xc7\xc5\xf2\x61\xbf\xd7\x0c\x16\x13\x3e\x7b\x64\x0b\x66\xc5\x08\x45\x4f\xfd\x14\x05\xeb\xe7\xd9\xf7\xa3\xa1\x18\x2a\x4b\x6d\xcb\xd8\x60\x3a\xe6\x6f\xd8\xf4\xb4\x76\x5c\xbf\x22\xbb\x3a\xd4\xd1\x3c\x9b\x71\xa1\x5d\x6d\x60\x37\x1b\x17\xc7\x1c\x91\x85\x2d\x60\x07\x91\x52\x31\xf8\x8c\x2a\x78\x8a\x66\xee\xda\x0f\x1b\x92\x81\x2b\x91\x5b\x5c\xcd\xb4\xd5\x4d\x33\x14\x9f\x84\x01\xe4\xc2\xb4\xbf\xb4\x7b\xb8\x50\xd0\x14\x8e\x37\x8f\x05\x4e\xb7\xcc\xe5\x75\xba\x5c\xfc\xba\xb8\xff\xf4\xb8\xfa\xb4\xbc\x7f\x78\x3c\xf6\x1c\xb7\x89\x25\x70\x2a\xd4\xd8\x0d\xa3\x6d\x1e\x51\x00\xf1\x8e\x34\x55\x2d\x14\xcf\x01\x64\x34\xa5\xef\x04\xed\xdb\xbf\xc8\xd4\x6e\x45\xf7\xb1\xed\x15\x2c\x8b\x91\x30\x46\x45\x5c\x28\x32\x06\x95\xd7\x64\x63\x83\xba\x84\x4b\xc9\xeb\x81\x87\x51\xa1\x16\x68\xcc\x10\x95\xb4\x33\x05\x63\x9a\x89\x40\x27\x59\x2c\x7d\x50\x8a\x07\x8c\x95\xb6\x05\xb2\x8b\x9f\x86\x16\x20\x8d\xb9\x99\xcf\x12\xbd\x20\xf4\x3e\x26\x9d\xdf\x11\x97\x60\xb5\x93\xfa\xd0\xc5\x25\xad\x6f\x70\x5a\x7d\xa1\x3c\x7a\x71\xb7\xec\xd3\xe3\x87\xa2\x90\x86\x7e\x86\xa4\xb3\xe7\xa1\x99\x4c\x19\xfd\x37\xcc\x04\xd1\x9b\x46\xd5\xe2\xfb\xa9\x21\x2a\xdd\x87\xaa\x69\xa5\xa4\x73\xd0\x02\x4d\xe0\x01\x09\x04\xb0\x07\x49\x67\x17\xb6\x0a\x03\xd0\x14\x1e\x90\x42\x27\x50\xc0\x1e\x68\x02\x15\x02\x83\x42\xfe\x33\x64\x02\x76\x0f\x5e\xca\x7e\x82\xa4\xb0\xab\x53\x12\xe3\x1b\xed\x01\xe4\x95\x5f\x30\x0c\xba\x88\x39\xb3\x8d\x4b\xe0\x3f\x60\xa5\x09\x3c\x43\xd2\x5b\x18\x0f\x6e\x13\xcd\xde\x83\xa4\x75\xc8\xa5\xf6\x60\x9a\x48\x8c\x76\xd1\x2a\x7e\x01\x36\x41\x09\x2b\x62\xf1\x0a\x3a\x63\x52\xf8\x89\x4b\xa1\x82\x75\x11\x29\xdc\xcd\xfb\xa2\xfb\xe7\xb3\x71\x0a\xa3\xc7\xaa\x8e\x25\x3c\xd9\xa6\xf0\x6d\x70\x57\x41\x5d\xc7\x27\xb7\x03\x48\x61\xde\x2f\x50\x49\x5d\x77\x00\x69\x0d\xa1\xda\x84\xe8\x2c\xb7\xad\xa7\x11\xc3\xe4\xc5\xb8\x05\xa3\x0b\x10\x1c\x9f\x5c\x80\xa5\x9d\xf7\x69\xeb\x73\xd6\x45\x19\x7d\xb6\xde\x83\xa4\xb0\x3b\x4f\x32\xee\x0e\x20\x4d\x0e\xd4\x26\x5e\x0d\x0e\xb6\x29\x7c\x5f\x03\x86\xe8\x28\xcf\xc6\xe9\xf5\xf5\x04\x96\x82\xf0\xab\xe1\x1b\x26\x9d\x5f\x19\x04\xc1\x89\xdc\x00\x94\x74\x32\x19\x4c\x3c\xf3\xd9\x78\x9a\xef\x64\xf9\x17\x72\x72\x8b\x01\x6e\x9d\xd3\xf9\x66\x28\xe6\x8a\xaf\x03\x98\xf2\xd6\xb2\x46\x76\x64\xc1\xbc\xa4\x94\x91\xa7\xa3\x0e\x55\x60\x14\x5d\x4b\x0c\x20\x6f\x74\x39\x91\xb4\x8f\xd9\x42\x41\x55\x0b\x0f\xf1\x07\xa8\x17\x7d\xf8\x2f\x00\x00\xff\xff\x89\x03\x69\x71\x48\x22\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8776, mode: os.FileMode(436), modTime: time.Unix(1651966846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
