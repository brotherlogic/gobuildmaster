// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x6a\xdb\x40\x0c\xc7\xbf\xe7\x29\x84\x1f\x60\x65\x5f\xcd\x08\x74\xc4\x8c\xb1\x92\x41\xda\x8d\x7d\x0b\xf2\x59\x4b\x6e\xb9\x9c\x6e\x3a\x5d\x89\xdf\x7e\xc4\x4d\xb2\x36\x76\x66\x3b\x1d\x34\x10\x0c\xb2\xfe\xba\xdf\xfd\x25\x61\x6f\xbd\x92\xd7\x08\x1f\x26\x00\xbf\xb8\x6c\x9e\x00\x1e\xb7\x94\x43\x56\x26\xeb\xaa\x48\xf2\x48\x92\x35\xf1\x15\x2f\x03\xea\x3a\x87\x6c\x65\x75\x9d\xca\x77\x86\xb7\x37\xa5\xb0\xae\x49\x1c\xaf\xac\xb9\x69\x49\x02\x8a\x5a\x74\xcb\x92\x59\xa3\x0a\x86\x1c\x54\x12\x35\xef\x84\x7e\x27\x2b\xb4\x3d\x11\xec\x7f\x06\x95\x56\x2c\x75\x0e\xb3\xcf\xf7\x5f\x0e\xc1\x20\x1c\x48\xd4\x52\xcc\x21\x8b\x46\x50\xcd\xfa\xa9\xfe\x74\x48\xa5\xfb\x62\xf1\xbd\x58\x74\xd5\x52\x8c\x1b\x67\xa3\xfe\x2d\xb6\xff\x0b\x55\xc9\x57\xe8\x4d\x9d\xc3\xa2\x98\x7d\x9b\xcf\x6e\xe7\x0f\x93\xe9\xe4\x82\x5d\xfd\xb6\xfc\xb4\x8e\x0c\x07\x7b\x74\xe5\x60\xf0\x79\xf8\x5f\x66\x95\x42\xb8\xe1\xa4\xa7\xd0\x39\xe8\xa7\xbb\xaf\x1f\x6f\xef\x26\x00\x9e\x97\x5b\x8c\x4a\x72\x48\xbd\xc8\x7d\xa0\x78\x24\x89\x96\xbd\x0a\x9a\xcd\xf0\x4e\x77\xa9\xde\x86\x1f\x1d\x89\x0e\x07\x7f\x96\x3e\x05\x18\xdf\xed\x97\xae\x8d\x5b\x8f\x0e\xd1\xd5\xa3\x2b\xc9\xfb\x63\x91\xe3\xe0\x1a\x4e\x5e\x73\x78\xdf\x4b\xbf\xa1\x3a\x2a\x0b\x0d\x05\x7f\x99\xff\x5f\x99\x3b\x66\xa0\x8f\xbe\x12\x0e\x25\xef\x62\xed\xcd\xd0\x0b\x9c\x49\x5e\xd3\xf9\x20\xbc\xab\x87\x9e\xfb\x2c\xb9\xc7\xb5\xe2\xc7\x43\xb1\x98\x37\x1b\xd0\xf2\x8d\x76\x4a\xe2\xd1\x2d\x85\xb0\xaa\xaf\xec\xf9\x13\xa2\x90\x21\x3b\x62\x64\xdb\xaa\x57\x79\x97\x9c\xdb\xfb\x40\x71\xc4\xc6\xb6\x44\x57\x11\x0c\xbd\xaa\x41\xa9\xb2\xb6\x6f\xa7\x70\xf3\xc5\xb9\x70\xf6\x9f\x00\x00\x00\xff\xff\x31\x20\x47\x9d\x50\x07\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1872, mode: os.FileMode(436), modTime: time.Unix(1574744972, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
