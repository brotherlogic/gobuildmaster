package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_pb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x6e\xeb\x36\x0c\xbe\x3e\x79\x0a\x21\x0f\xb0\x83\xed\x32\x18\x02\x74\x6b\x30\x14\x2b\xb2\x22\xcd\x86\xdd\x05\xb2\xcc\x3a\xaa\x65\xd1\xa5\xe8\x2c\xd9\xd3\x0f\xce\x8f\x1b\xdb\x49\x23\x55\xde\x76\x0a\x14\x01\x14\x7e\xfe\xf8\x51\xfc\x91\x15\xab\x2d\x83\x65\x27\x7e\x1c\x09\xf1\x8a\xc9\xfe\x53\x08\x2b\x0b\x98\x88\x71\x52\x69\x93\x3a\xa0\x0d\xd0\x78\xbf\x9e\xe1\xaa\x94\xbc\x9e\x88\x71\xa6\x79\x5d\x25\xdf\x29\x2c\xbe\x26\x84\xbc\x06\x32\x98\x69\xf5\xb5\x07\x29\x25\xb1\x96\x66\x95\x20\xb2\x63\x92\xe5\x44\x30\x55\xb0\xff\x8e\xe0\xad\xd2\x04\x45\xe3\x41\xfd\xa7\x24\x43\x86\xb4\x9b\x88\xfb\x87\xe7\x5f\x8f\x8b\x25\x61\x09\xc4\x1a\xdc\x44\x8c\x9d\x22\xc9\x6a\x7d\x78\xfe\x74\x74\xf8\x27\x48\x2b\x9b\x4a\xab\x76\x13\xb1\x98\xdd\xff\x3e\xbf\xbf\x9b\x2f\x47\xd3\xd1\x15\x85\xb7\x95\xbc\x68\x03\x0a\x4b\x7d\x12\x72\x8c\x49\x77\xf9\x23\x7d\x09\x81\xcc\xb1\xe2\x66\xa9\xeb\xe8\x2f\x8f\xbf\xfd\x74\xf7\x38\x12\xc2\xe2\xaa\x90\x8e\x81\x8e\xa6\x57\xfd\x3e\x7a\xb1\x01\x72\x1a\x2d\x93\x54\xb9\xff\xe6\x5c\x42\xfd\x3f\xfe\xe7\xb0\x73\x8c\x04\xbe\x9e\xb7\xed\x7b\x7e\xdd\x4c\xa5\xe7\xd9\xe2\x8f\xd9\xe2\x52\x32\xbd\x90\x2c\x80\xd7\x04\x70\x3d\x9f\x8e\x32\x6f\x89\x4a\x25\xcb\x20\x55\x1d\xc0\x27\xcb\xa1\xf3\x94\xeb\x02\xbe\xdc\x56\x10\xe6\xfe\xb7\xe1\xfb\x6d\x47\x0f\xeb\x4a\x52\xda\x2a\xe5\xce\x72\x4d\x1c\xda\x46\x4e\x71\x23\x2c\x13\xdc\xba\x9d\x55\xde\xc1\x6b\x43\xa6\x42\x84\x37\xb1\x53\x4b\xda\xa7\x70\x58\x2b\xe8\x62\x62\xf8\x4b\xc2\xed\xce\x97\xf8\xcc\x38\xbc\x8c\x67\x7f\x2e\x67\x8b\xf9\xbe\xe3\xf4\x52\x09\xb6\x0c\x64\xa5\x59\x11\xc8\x74\xd7\xce\x27\x85\x95\xe5\x89\xf8\xfe\xa6\x14\x83\x59\xa6\x6d\xe6\x2b\xa6\x65\xfe\x6f\x4d\x33\xdf\xe2\x4d\x00\x28\x70\x58\xb7\x10\x31\x29\x00\x5b\x50\x15\xa3\x37\x73\xdb\xbe\x3f\x67\x7a\xae\x78\xb6\xe0\x92\x70\xa3\xeb\x19\xe7\x1f\x84\x1e\xe4\x42\x5a\xba\x2a\xc5\x21\x9c\xab\xbf\x0e\x70\xec\xcc\x3c\xbc\x56\x16\xb3\x9f\x67\x0f\x4f\xcb\xd5\xd3\xe2\x61\xbe\x3c\xce\xbe\x69\xe4\x36\xd7\x09\x13\xd8\x68\x7a\x90\x9b\x4a\xbe\x04\x4c\xef\xbf\x81\xf0\x87\x71\x47\xdb\xbe\xda\x85\x4f\xb9\x13\x28\xa4\x54\xa1\x31\xa0\x58\xa3\xf5\x15\x75\x09\x17\x13\xd7\x03\x0f\x81\x02\x1d\x50\xbe\x7d\x54\x54\x17\xaf\x8c\xa9\x37\x02\x5c\x48\x8e\x76\x41\x31\x1e\x10\x14\xda\xa6\x40\xce\x7f\x1b\xce\x00\x71\xcc\xf5\x7e\x66\xc0\x01\xd2\xbb\x98\x78\x7e\x87\x94\x49\xab\x5d\xa8\x0f\x6d\x5c\x54\x7d\x4b\xa7\xd5\x2b\x26\xde\xc5\x7d\x66\x1f\xaf\x5f\xa6\x69\xa8\xf4\x06\x12\xcf\x9e\x54\xf5\x66\x86\xd1\xbf\x63\x06\x50\x6f\xea\xae\xe6\x7f\xf6\xe8\xa3\xe2\x7d\x28\xea\x93\x48\xe8\x1e\x9c\x81\x06\xf0\x00\x03\x1a\x60\x07\x12\xcf\x1e\x38\xa1\x7b\xa0\x21\x3c\x40\x05\x2e\xa0\x03\x76\x40\x03\x74\x21\x69\x20\x90\xbf\x81\x0c\xc0\xce\x92\x43\xd9\x4f\x90\x18\x76\x75\x0a\xa2\xff\x19\xb6\x07\xf9\xe4\x0b\x00\x49\x9d\x46\xdd\x65\xb5\x02\xf8\x97\xb4\xa1\x01\x6c\x20\x51\x6f\x00\xac\x72\x6d\x8c\x7f\xf1\x74\x00\xc3\xbd\x03\x1c\x08\x59\xba\xdc\x3b\x0e\x1d\x48\x4c\x1c\x52\x9d\x69\x96\xa6\x8e\xa9\xd1\xce\x7b\x9e\x5c\x80\x0d\x50\x4c\x0a\x29\xb8\x96\x1b\x4c\x0c\x3f\x52\x16\xd8\x4b\xdb\x88\x18\xee\xfa\x79\xde\x27\xf9\xc6\x38\x86\x91\xa1\x28\x7d\x09\x4f\xb6\x31\x7c\x39\xec\x0a\x59\x96\xfe\xc1\x6d\x01\x62\x98\xf7\xad\x22\x24\xaf\x5b\x80\xb8\xa3\xa9\xca\x2b\xef\x28\xbf\x5b\xc7\x57\xd1\x46\x1a\x9d\xca\x80\xcb\x8d\x0b\xb0\xb8\xeb\x35\x6d\x39\x21\x9d\x66\xde\x37\xb3\x1d\x48\x0c\xbb\x63\x0c\xe3\x6e\x01\xe2\xea\x58\xe5\xfe\x65\x7c\xb0\x8d\xe1\x7b\xab\xa0\xf2\x56\xd9\x18\x47\xcd\x0a\xe9\xd6\x09\x36\xd7\xd2\x3e\x3f\x18\xb4\x00\x43\xfe\x0e\x52\x02\x39\xb4\xd2\x74\x2f\x53\x3e\x31\x80\x1d\xa8\x8a\x20\xe8\x56\xb8\x07\xf9\x8f\xee\x86\x3f\xda\xbc\x7f\x02\x00\x00\xff\xff\xf5\x93\x40\x85\x1c\x1d\x00\x00")

func config_pb() ([]byte, error) {
	return bindata_read(
		_config_pb,
		"config.pb",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config.pb": config_pb,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config.pb": &_bintree_t{config_pb, map[string]*_bintree_t{
	}},
}}
