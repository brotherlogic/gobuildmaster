// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x61\x6b\x9c\x40\x10\x86\xbf\xdf\xaf\x18\xee\x07\x34\xf4\xab\x94\x83\x94\x93\x52\x1a\xae\x70\x49\x4b\xbf\xc9\xba\x4e\x75\xeb\xba\xb3\x9d\x9d\x0d\xe7\xbf\x2f\x67\xbc\x34\x39\x4d\xd4\x5c\xa1\x82\x08\xe3\xbc\xaf\x8f\xef\xcc\x3a\xe3\x04\x9d\x04\xf8\xb0\x02\xf8\x45\x79\xf7\x04\x70\xaa\xc1\x04\xd6\x79\x34\xb6\x08\xc8\xf7\xc8\xeb\xae\x5e\x52\xe6\x95\x54\x09\xac\x4b\x23\x55\xcc\xdf\x69\x6a\xae\x72\x26\xa9\x90\x2d\x95\x46\x5f\x0d\x24\x5e\xb1\x18\x65\xb3\x9c\x48\x82\xb0\xf2\x09\x08\x47\xec\xde\x31\xfe\x8e\x86\xb1\x79\x24\x38\x5e\x5a\x09\x96\xc4\x6d\x02\xdb\xcf\xb7\x5f\xfa\xa2\x67\xf2\xc8\x62\x30\x24\xb0\x0e\x9a\x95\xe8\xea\xc1\x7f\x33\xc7\xe9\x36\xdd\x7f\x4f\xf7\x63\x5e\xa2\x42\x6d\x4d\x90\xbf\x66\xc7\x9b\xb1\x88\xae\x50\x4e\xb7\x09\xec\xd3\xed\xb7\xdd\xf6\x7a\x77\xb7\xda\xac\x5e\x88\x6b\x3a\x96\x9f\xc6\xa2\x26\x6f\x4e\xa9\xf4\x01\x9f\x97\x5f\x0b\x2b\x67\x54\x35\x45\x79\x2c\x9d\x83\x7e\xba\xf9\xfa\xf1\xfa\x66\x05\xe0\x28\x6b\x54\x10\xe4\xbe\xf5\x45\xee\x9e\xe2\x1e\x39\x18\x72\xc2\x4a\xd7\xf3\x27\x3d\xa6\xfa\x3f\xfc\xca\x22\xcb\x7c\xf0\x27\xed\x1b\x80\xe5\xd3\x7e\x9e\xda\xb2\xe3\x31\x22\x7a\xf3\xea\x72\x74\xee\x64\x72\x5a\x5c\x4d\xd1\x49\x02\xef\x27\xe9\x6b\x6c\x83\x10\xe3\x5c\xf0\xe7\xfd\xff\x94\x79\x64\x07\xa6\xe8\x0b\x26\x9f\xd3\x21\xb4\x4e\xcf\xfd\x81\x33\xc9\x25\x93\xf7\x4c\x87\x76\xee\x77\x9f\x34\x4f\xa4\x96\xfe\xb8\x4b\xf7\xbb\xee\x04\x0c\x72\xc3\x83\x20\x3b\x65\x33\x46\x55\xb4\x6f\x9c\xf9\x03\x22\xa3\x46\xb3\x60\x65\x87\xaa\x8b\xb2\x8b\xd6\x1e\x73\xc0\xb0\xe0\xc4\x0e\x44\xaf\x12\xfc\x09\x00\x00\xff\xff\x24\xbb\xde\x97\xd4\x06\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 1748, mode: os.FileMode(436), modTime: time.Unix(1574743287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
