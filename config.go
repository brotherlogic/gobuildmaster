// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdd\x6a\xdb\x4c\x10\xbd\xfe\xf4\x14\x8b\x1f\xe0\x0b\xb9\x15\xc5\x90\x62\x53\x4a\x83\x0b\x4e\x5a\x7a\x67\x56\xbb\x13\x7b\xeb\xd5\x8e\x3a\x3b\x1b\xac\xb7\x2f\xfe\x53\xf5\x97\x68\xa5\x34\xd4\x60\x0c\xa3\x39\xe3\x33\x67\xce\x78\xec\x8c\x63\x70\xec\xc5\x87\x44\x88\x9f\x98\x9d\x3e\x85\x70\x32\x87\x54\xcc\xb2\x60\xac\xf6\x40\xcf\x40\xb3\x53\x7c\x8b\x9b\x42\xf2\x2e\x15\xb3\xad\xe1\x5d\xc8\xfe\x57\x98\xdf\x64\x84\xbc\x03\xb2\xb8\x35\xea\xa6\x03\x29\x24\xb1\x91\x76\x93\x21\xb2\x67\x92\x45\x2a\x98\x02\x9c\x9e\x11\xfc\x0a\x86\x20\xaf\x18\x1c\x5f\x4a\x32\x6c\x91\xca\x54\x2c\x3e\x3f\x7c\xb9\x04\x0b\xc2\x02\x88\x0d\xf8\x54\xcc\xbc\x22\xc9\x6a\x77\xae\x3f\x4f\xce\x6f\x02\x1d\x9c\x96\x4e\x95\xa9\x58\x2f\x17\xdf\x56\x8b\xbb\xd5\x63\x32\x4f\x5e\xe8\x70\xb8\x93\x27\x63\x41\x61\x61\xae\x8d\x5c\x34\x69\x87\x5f\xeb\x2f\x23\x90\x7b\x0c\x5c\x85\xda\x44\x3f\xdd\x7f\xfd\x78\x77\x9f\x08\xe1\x70\x93\x4b\xcf\x40\x97\xd4\x17\x79\x5f\x58\x3c\x03\x79\x83\x8e\x49\xaa\x7d\xfc\x70\xfa\x50\xff\x86\xbf\xb4\x40\x1c\x4f\xbc\x96\x3e\x17\x62\xfc\xb4\x9b\xaa\x8d\x73\x74\x0f\x68\xc0\xb7\x0f\xcb\xf5\xf7\xe5\xba\xcf\xb9\x14\x9c\xbb\x16\xb9\x1a\x57\x61\x70\x9c\x8a\xdb\x41\xf6\x7b\x28\x3d\x23\x41\x2c\xf1\x66\xfe\x5f\xe5\xdc\xe3\x81\x21\xf6\x9a\xb0\xc8\xf0\xe0\x4b\xa7\x62\x1b\x68\x41\xde\x32\xf9\x82\xf0\x50\xc6\x7e\x6f\x2d\x79\x40\xb5\xe5\x8f\xc7\xe5\x7a\x75\xda\x80\x8e\x6e\x70\x60\x20\x27\xed\x86\x40\xea\x72\xe2\xcc\xcf\x14\x09\x14\x98\x11\x96\xed\xa2\xde\xa4\x5d\xb0\xf6\xa8\x03\xf8\x11\x1b\xdb\x01\x4d\x62\x10\xdb\xaa\x92\xa4\x67\x5d\xdd\xaa\xf0\x51\xf3\x89\xdd\xe7\xe8\x0c\x63\x74\xdf\x8d\xf4\x77\xbf\x6f\xff\x0d\xd2\x87\x03\xa8\x30\x82\x7f\x33\xbf\x7b\x00\x3a\x53\x8c\x5c\xff\xe3\xcd\x89\x77\xcf\x9f\xec\x09\xa7\xbd\x5a\xf9\xe3\xe3\x78\xc3\xd6\xd3\x27\xff\x58\x36\xaa\xcc\x2b\xc1\xa2\xf7\xfd\x89\x64\x0e\x23\xaf\x7a\x1b\xf3\x4e\x9b\x96\x01\x50\xfd\x08\x5e\xff\x23\x36\xc2\xf3\x64\xe2\xb4\xae\xc7\x2a\x93\x6a\x1f\x8a\xb1\x27\xae\x8e\x9a\xb8\x74\x24\x8d\xbe\x9d\x3c\x37\x02\x85\xa4\x15\x5a\x0b\x8a\x0d\xba\xd8\x06\xfa\x70\xd3\x2d\x7f\xae\x26\xb5\x8e\x37\x4f\x0b\xf2\xaa\x77\x7e\x07\x00\x00\xff\xff\xf4\x9a\xbb\x14\x2d\x0c\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3117, mode: os.FileMode(436), modTime: time.Unix(1576836547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
