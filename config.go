// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdb\x6a\xdb\x40\x10\x7d\xae\xbf\x62\xf1\x07\x34\xe4\x55\x14\x43\x4a\x4c\x29\x0d\x29\x38\x69\xe9\x9b\x59\xad\x26\xf2\xd6\xab\x1d\x75\x76\x94\x5a\x7f\x5f\x64\xd9\xaa\x6e\xb1\x56\x72\x45\x0d\xc6\x30\x3b\x67\x75\xe6\x7a\x64\xab\x2d\x83\x65\x27\x3e\x2c\x84\xf8\x89\xe1\xf1\x57\x08\x2b\x13\x08\xc4\x32\xcc\xb4\x89\x1c\xd0\x2b\xd0\xf2\x68\x8f\x71\x9b\x4a\xde\x05\x62\x19\x6b\xde\x65\xe1\x7b\x85\xc9\x4d\x48\xc8\x3b\x20\x83\xb1\x56\x37\x1d\x48\x2a\x89\xb5\x34\xdb\x10\x91\x1d\x93\x4c\x03\xc1\x94\xc1\xf1\x8c\xe0\x57\xa6\x09\x92\x8a\x41\xf1\x51\x92\x21\x46\xca\x03\x71\xff\xf9\xe9\xcb\xc9\x98\x12\xa6\x40\xac\xc1\x05\x62\xe9\x14\x49\x56\xbb\xf2\xfe\xd5\xa2\xfc\x12\x44\x99\x8d\xa4\x55\x79\x20\x36\xeb\xfb\x6f\x8f\xf7\x77\x8f\xcf\x8b\xd5\xe2\x8d\x08\x87\x23\x79\xd1\x06\x14\xa6\xfa\x1c\xc8\x29\x27\x6d\xf3\xa5\xf8\x42\x02\xb9\xc7\x8c\x2b\x53\x9b\xe8\xa7\x87\xaf\x1f\xef\x1e\x16\x42\x58\xdc\x26\xd2\x31\xd0\xc9\xf5\x4d\xde\x27\x16\xaf\x40\x4e\xa3\x65\x92\x6a\xef\x5f\x9c\x3e\xd4\xff\xe1\x2f\x0d\x10\xfb\x13\xaf\xb9\xaf\x84\x18\x5f\xed\x66\xd6\xc6\x75\x74\x0f\x68\xa0\x6f\x9f\xd6\x9b\xef\xeb\x4d\x5f\xe7\x52\x66\xed\xf9\x92\x73\xe3\x2a\xcc\x2c\x07\xe2\x76\x90\xfd\x1e\x72\xc7\x48\xe0\x4b\xbc\xe9\xff\x4f\x39\xf7\xf4\xc0\x10\xfb\x88\x30\x0d\xf1\xe0\x72\xab\x7c\x03\x68\x41\xae\xa9\x7c\x4a\x78\xc8\x7d\x9f\x5b\x73\x1e\xc8\xda\xfa\xc7\xf3\x7a\xf3\x78\x9c\x80\x4e\xde\xe0\xc0\x40\x56\x9a\x2d\x81\x8c\xf2\x89\x35\x2f\x29\x12\x28\xd0\x23\x5a\xb6\x8b\xba\x2a\x77\x99\x31\x45\x1e\xc0\x8d\x98\xd8\x0e\x68\x12\x03\xdf\x50\x95\xa4\x68\xd9\xcd\x5b\x65\x2e\x72\x3e\x31\xfa\x04\xad\x66\xf4\x8e\xbb\xe1\x3e\xbb\xbe\xbd\x1b\xa4\x0f\x07\x50\xd9\x08\xfe\x4d\xff\xae\x00\x74\xaa\xe8\x39\xfe\x85\xe6\xf8\x77\xcf\x5f\xef\x09\xd2\x5e\x8d\x7c\x71\xec\xdf\xb0\x75\xf7\xc9\xcb\xb2\x71\xcb\xaa\x4a\x98\xf7\xbc\xbf\x90\x4c\x60\xa4\xaa\xb7\x31\x33\x4d\x5a\x08\x40\x75\x11\x3c\xbf\x23\x36\xcc\xab\xc5\xc4\x6a\x9d\xc5\x2a\x94\x6a\x9f\xa5\x63\x25\xae\x8e\x9a\x38\x74\x24\x75\x74\x3b\xb9\x6e\x04\x0a\x29\x52\x68\x0c\x28\xd6\x68\x7d\x03\xe8\xc3\x4d\x6f\xf9\xf2\x36\x19\x45\xfe\xcd\xd3\x82\x5c\xa3\x13\xe5\x55\x31\xf0\x88\xa9\x6b\x63\x66\x79\x93\x2f\x1f\xf2\x5b\x5a\x76\xcb\x2e\xe1\xca\x3e\x3d\xef\xc7\x2b\x8c\x76\xec\x1b\x76\x03\x30\xd3\xbc\x12\x24\xda\x46\x40\xed\x98\xeb\xd6\x29\xba\xe8\x9b\x6f\x87\x14\x4b\xab\x5d\x6b\x5f\xf4\x1e\xce\xc9\x23\x25\x54\xe0\xfa\x2a\x5f\x3f\x59\x95\x3b\x61\x26\x0e\x09\xb6\xd7\x66\xdb\xfe\x76\x06\x2e\x68\xbc\xf7\x78\x17\x7f\x9f\xb4\x8d\x7b\x18\xd4\x8f\x66\x1c\xbe\x86\x2e\xb6\x8a\x50\x9d\x5c\xbb\xf8\x9c\x34\xe0\xc6\x6d\x9e\x0a\x72\x71\x08\xff\x04\x00\x00\xff\xff\x89\x3b\x74\x27\x26\x11\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 4390, mode: os.FileMode(436), modTime: time.Unix(1578065133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
