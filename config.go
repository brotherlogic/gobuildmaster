// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xed\x8a\xdb\x3a\x10\xfd\x7d\xf3\x14\x22\x0f\x70\x97\xfb\xd7\x5c\x02\x7b\xd9\x70\x29\x5d\xb6\x90\xdd\x96\xfe\x0b\x63\x79\xea\x68\x23\x6b\xdc\xd1\x78\x9b\xbc\x7d\x71\xbe\x1a\xdb\xc9\x46\x8a\x52\x1a\x08\x01\x59\xc7\xe7\x1c\xe9\xcc\x48\xc4\x19\x27\xe8\xc4\xab\x7f\x47\x4a\xbd\x52\xbe\xf9\x55\xca\x41\x85\x99\x1a\xe7\x8d\xb1\x85\x47\x7e\x43\x1e\x6f\xc6\x4b\x9a\xd7\x20\x8b\x4c\x8d\x4b\x23\x8b\x26\xff\x5b\x53\x75\x97\x33\xc9\x02\xd9\x52\x69\xf4\xdd\x00\x52\x03\x8b\x01\x3b\xcf\x89\xc4\x0b\x43\x9d\x29\xe1\x06\x37\xcf\x18\xbf\x37\x86\xb1\x3a\x28\x68\x3f\x1a\x04\x4b\xe2\x75\xa6\x1e\x3e\x3c\x7f\xdc\x0d\xd6\x4c\x35\xb2\x18\xf4\x99\x1a\x7b\xcd\x20\x7a\xb1\x7d\xff\x64\xb4\xfd\x32\x16\x8d\x2b\xc0\xe9\x75\xa6\x66\xd3\x87\xcf\x4f\x0f\xf7\x4f\x2f\xa3\xc9\xe8\x8c\xc3\xcb\x4e\xbe\x19\x8b\x9a\x6a\xb3\x37\xb2\x5b\x93\xfe\xf0\x7b\xfe\x72\x46\x58\x52\x23\x87\xa1\xbe\xd0\xff\x1f\x3f\xfd\x77\xff\x38\x52\xca\xd1\xbc\x02\x2f\xc8\xbb\xa9\x67\x75\xef\x54\xbc\x21\x7b\x43\x4e\x18\xf4\x32\x7c\x73\x4e\xa1\xfe\x8c\xfe\x25\xae\xbd\x10\x63\xa8\xf2\xee\xfc\x0b\xb9\x79\x9e\xce\xbe\x4c\x67\x27\x93\x23\x20\x86\x1c\x39\x3c\x1f\x9e\x9d\xa7\x4b\x0e\x0a\x10\x88\xb2\xd0\x03\x5c\x99\xfd\xde\x5b\xce\x1b\xf8\x2b\x25\xfb\xdb\x71\x0d\x5c\x74\xb2\xdf\x1b\x6e\x89\x63\xeb\x6e\xbf\x7a\x4c\x75\x4e\x2b\xbf\x76\x3a\x78\xfd\xba\x90\x89\x52\xf1\x55\xbf\xaf\x61\x86\x0a\x23\x6b\xa7\x8f\x49\xe1\xaf\x99\x56\xeb\x50\xe2\xa3\xc9\x83\x7a\xbc\x18\xa3\xe9\xd7\x97\xe9\xec\x69\x53\xa2\x83\x28\xe1\x4a\x90\x1d\xd8\x39\x23\x14\xeb\x6e\x9e\x34\x35\x4e\x32\xf5\xcf\x45\x2b\x96\xca\xd2\xb8\x32\xd4\x4c\x67\xfa\x6f\x6f\xff\xef\xd4\xc0\xfe\x84\x43\xe4\xc8\x03\xae\x83\x48\x49\x01\xae\x50\x37\x42\xc1\xcc\xdd\xf9\xc3\xde\x3c\x90\x12\xd8\xc9\x6a\xa6\x37\xd3\x9e\x0b\xe1\x8b\x30\x80\x9c\x48\xa6\x6f\x0a\xba\x85\xb8\xf6\x71\x84\xb0\xa3\xe9\x09\x57\x8f\xf3\x47\x48\x87\x61\x72\xb0\x16\x5c\x30\x6d\x7e\x22\x5b\x4f\x0f\x72\xf5\x5a\x32\x6a\xe2\x42\x93\xb5\xa8\xdb\x63\x30\x94\xff\x14\x2e\x25\xf8\x5b\x1e\x46\x8d\x26\xa2\xf0\x86\xa8\xa4\x16\xdc\x58\xdb\x66\x00\x7d\x4c\xba\xfa\xa0\x14\x05\x8c\x95\x71\x05\xb2\x0f\xdf\x86\x23\x40\x1a\x73\xbb\x9f\x25\x4a\x84\xf5\x3e\x26\x9d\xdf\x13\x97\xe0\x8c\x8f\xd5\xd0\xc5\xa5\xe8\xc8\xc1\x1b\xfd\x4a\x79\x70\x1d\x1e\xcd\x4f\xf7\x0f\x45\x11\x6b\xfd\x00\x49\x67\xcf\x9b\x76\x33\xe3\xe8\x7f\x61\x6e\xe0\xde\xb6\x1d\x35\xfc\xe2\x30\x44\xa5\x6b\xa8\xda\x6b\x44\xec\x1e\x1c\x81\x6e\xa0\x80\x22\x1a\x60\x0f\x92\xce\x1e\x79\xb6\x0e\x40\xb7\x50\x40\x1a\x7d\x44\x07\xec\x81\x6e\xd0\x85\xc0\x62\x24\xff\x01\x72\x03\x76\x01\x89\x65\xdf\x43\x52\xd8\xf5\x7e\x11\xc3\x6f\x9f\x03\xc8\x95\xb7\xf7\xaa\xf1\x46\x27\xfd\x75\xd3\x59\xc1\x1f\xe0\x62\x57\xf0\x00\x49\xba\xbc\x8b\x5e\x1a\x6b\xc3\xab\xa7\x03\xb8\xfa\x0a\xb7\x7d\xbb\x80\x5f\x06\x9b\xee\x41\xde\x37\xfd\x33\x00\x00\xff\xff\x62\x12\xaf\xa9\x10\x14\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5136, mode: os.FileMode(436), modTime: time.Unix(1598137088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
