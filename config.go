// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x6e\xe3\x36\x10\x7d\x5e\x7f\x85\x90\x0f\xe8\xa2\x7d\x34\x8a\x00\xdb\xc6\x28\x82\x2e\xd2\x85\x37\x2d\xfa\x66\x8c\xa8\x89\xcc\x35\xcd\xd1\x0e\x29\x37\xee\xd7\x17\xf2\x45\xab\x8b\x13\x73\x32\x6a\x1b\x20\x30\x40\xcd\xd1\x99\x33\x24\x0f\x47\x92\xb7\x3e\xa2\x8f\x21\xfb\x71\x96\x65\x5f\x28\x3f\xfc\x66\x99\x87\x2d\xce\xb3\x9b\xbc\xb6\xae\x08\xc8\x3b\xe4\x9b\xc3\x78\x49\xab\x0a\xe2\x7a\x9e\xdd\x94\x36\xae\xeb\xfc\x3b\x43\xdb\xf7\x39\x53\x5c\x23\x3b\x2a\xad\x79\x3f\x82\x54\xc0\xd1\x82\x5b\xe5\x44\x31\x44\x86\x6a\x9e\x45\xae\xf1\x70\x8d\xf1\x6b\x6d\x19\xb7\x6d\x06\xcd\x9f\x81\x88\x25\xf1\x7e\x9e\xdd\xdd\x7f\xfe\xf5\x34\x58\x31\x55\xc8\xd1\x62\x98\x67\x37\xc1\x30\x44\xb3\x3e\xde\xff\x76\x76\xfc\x67\x2c\x6a\x5f\x80\x37\xfb\x79\xb6\x5c\xdc\xfd\xfe\x70\xf7\xe1\xe1\x71\x76\x3b\x7b\x41\xe1\x75\x25\x4f\xd6\xa1\xa1\xca\x9e\x85\x9c\x6a\x32\x1c\x7e\x4d\x5f\xce\x08\x1b\xaa\x63\x3b\x34\x4c\xf4\x97\x8f\xbf\xfd\xf4\xe1\xe3\x2c\xcb\x3c\xad\xb6\x10\x22\xf2\x29\xf4\xc5\xbc\x4f\x59\xec\x90\x83\x25\x1f\x19\xcc\x26\x7d\x72\x2e\xa1\xfe\x9f\xfc\x37\xb8\x0f\x91\x18\x53\x33\xef\xc7\x8f\xf2\xba\xba\x94\x3e\x2f\x96\x7f\x2c\x96\x97\x16\xd3\x13\xc3\x16\xe3\x9a\x11\x5f\x5e\x4f\x27\x99\xd7\x44\x3d\x39\xaa\xaa\x7d\xaa\xa4\x6e\xf4\xa4\x82\x3a\xf7\x55\x88\x29\x20\x82\x68\x8a\x06\x80\x37\xee\xed\xc1\x5d\x5e\x16\xf0\xee\xba\x02\x59\xfa\x9d\xe8\x7f\xc1\xb3\xa6\xd0\x75\x5d\xc4\x71\xdc\x00\x17\x3d\xcf\x1a\x0c\x37\xc4\x52\xbf\x3c\xd7\x94\xa9\xca\xe9\x39\xec\xbd\x49\x2e\x6c\x1f\x72\x9b\x65\x72\xb7\x3e\xb1\xaf\x11\x5c\x5c\x9b\x35\x4a\x4c\x6f\x04\xd2\x64\x00\xc5\xae\xb9\x28\x3a\x12\x87\x18\x0d\xff\xd1\xad\x64\xae\x3f\xc4\x68\xf8\x2b\xa6\xe7\x64\x87\xeb\x04\xcb\x0d\x6e\xf1\xe7\xe3\x62\xf9\x70\x38\x5c\x46\x9b\x09\x9f\x23\xb2\x07\xb7\x62\x84\x62\x60\x75\x86\x6a\x1f\xe7\xd9\xf7\x57\xa5\x38\x2a\x4b\xeb\xcb\x54\x31\xbd\x70\xb9\x9c\x37\xf7\x32\xa9\x6e\x97\x23\xb2\xb0\x55\xeb\x21\x34\xab\x02\x9f\xd1\xd4\x91\x92\x99\xfb\xf1\xe3\x2e\x63\x94\x4a\xe2\x99\x55\x31\xed\x6c\xd3\xe1\xa4\x17\x61\x04\xb9\x30\xb5\xa1\x2e\x68\x8a\xe4\x9a\xcb\x82\xc4\x3a\xe1\xf2\xf5\xb6\x5c\xfc\xbc\xb8\xff\xf4\xb8\xfa\xb4\xbc\x7f\x78\x3c\x35\x0a\xb7\xca\x69\x2e\x6c\xa8\x1c\x24\x6f\xff\x5e\x78\xaa\x82\xa4\x16\x87\x7b\xb7\xd6\xca\x6a\xf6\x81\xd0\x52\x47\x90\xab\xf2\xde\x09\x3a\xb8\xbf\x91\xe9\x87\xa1\xb6\x83\xaf\x65\x29\xc6\xc6\x68\x88\x0b\x43\xce\xa1\x89\x96\x7c\xaa\xa8\x4b\x38\x4d\x5d\x8f\x3c\x8c\x06\xad\xc0\x95\xc6\x28\xd5\x79\x55\x3b\xd7\x4c\x04\x06\xc9\xd6\x1b\x82\x34\x19\x30\x6e\xad\x2f\x90\x43\xfa\x34\x74\x00\x3a\xe6\x66\x3e\x4b\x8c\x02\xe9\x43\x8c\x9e\x3f\x10\x97\xe0\x6d\x90\xe6\xd0\xc7\xa9\xf6\x37\x04\x6b\xbe\x50\x9e\xbc\xb9\x3b\xf1\x7a\xfd\x50\x14\x52\xe9\x2d\x44\xcf\x9e\xd7\xcd\x64\xca\xe8\xbf\x61\x26\x50\xef\x1a\x57\x4b\xef\xb2\xc6\x28\x7d\x0e\xdb\xa6\xc1\x92\xce\x41\x07\x34\x41\x06\x24\x30\xc0\x01\x44\xcf\x2e\x6c\x3c\x46\xa0\x29\x32\x20\x83\x41\xe0\x80\x03\xd0\x04\x2e\x04\x0e\x85\xfc\x2d\x64\x02\xf6\x08\x51\xca\x7e\x86\x68\xd8\xcd\xb9\x88\xe9\xad\xf9\x08\xf2\xc6\xe7\x1a\x06\x5b\xa8\x5e\xd0\xf6\x0a\xf8\x17\x78\x69\x01\x5b\x88\xea\xc1\x26\x9a\x8d\x75\x2e\x7d\xf3\x0c\x00\xd3\x3d\xda\x1c\x09\x23\x84\x4d\x72\x1d\x06\x10\x5d\xe7\x5f\xda\x08\xae\xa9\xa9\xb3\x21\xf9\x3c\xb9\x00\x9b\x60\x33\x19\x62\xf1\x5e\x6e\x31\x1a\x7e\xe2\x52\xe8\xa5\x7d\x84\x86\xbb\xb9\x5f\x72\x27\xdf\x06\x6b\x18\x23\x6e\xab\x54\xc2\x73\xac\x86\x6f\x83\xfb\x2d\x54\x55\x7a\x71\x7b\x00\x0d\xf3\xc1\x2a\x24\xeb\xba\x07\xd0\xb5\xa6\x66\x53\x27\x57\xb9\x1b\x3d\x8d\x2d\xab\x37\xe3\x0e\x9c\x2d\x40\xf0\xea\xe7\x02\x4c\xf7\x3e\xd2\xfa\x98\xb3\x2d\xca\xe4\x17\xfd\x03\x88\x86\x3d\x44\x92\x71\xf7\x00\x3a\x3b\x30\x9b\x74\x37\x38\xc6\x6a\xf8\xbe\xd6\x58\x27\xab\x6c\x83\xf5\xeb\xeb\x09\x3c\xd5\xc2\xe7\x97\x6f\x18\x3d\xbf\x71\x08\x82\xb7\x89\x23\x90\xaa\xf9\xa8\x25\x8d\xc7\x39\x58\x75\xcc\x43\x58\xe7\xd4\x7e\x3d\x4a\xf9\xe6\xd7\x03\x4c\xf9\x19\xb3\x42\x0e\xe4\xc1\xbd\xe6\x56\x89\xbd\x53\x40\x53\x33\x8a\x3e\x5d\x8c\x20\xff\xd1\x07\x8c\xd7\x26\xef\x9f\x00\x00\x00\xff\xff\xbe\x99\x62\x7f\xac\x21\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 8620, mode: os.FileMode(436), modTime: time.Unix(1640024587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
