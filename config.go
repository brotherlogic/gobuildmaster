// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdb\x8a\xdb\x30\x10\x7d\x6e\xbe\x42\xe4\x03\xba\xf4\xd5\x94\xc0\x96\x84\x52\xba\xa4\x90\xdd\x96\xbe\x05\x59\x9e\x3a\x6a\x64\x8d\x3b\x1a\x85\xf8\xef\x8b\x73\x23\xb2\x73\x91\xd6\x2d\x1b\x08\x81\xf1\x9c\x9c\x33\xa3\x33\x23\x5b\x6d\x19\x2c\x3b\xf1\x71\x24\xc4\x6f\xcc\x77\xbf\x42\x58\x59\x41\x26\xc6\xb9\xd7\xa6\x70\x40\x1b\xa0\xf1\x2e\x5e\xe2\xb2\x96\xbc\xca\xc4\xb8\xd4\xbc\xf2\xf9\x7b\x85\xd5\x43\x4e\xc8\x2b\x20\x83\xa5\x56\x0f\x3d\x48\x2d\x89\xb5\x34\xcb\x1c\x91\x1d\x93\xac\x33\xc1\xe4\x61\xf7\x8c\xe0\x8f\xd7\x04\xd5\x49\x41\xfb\x51\x92\xa1\x44\x6a\x32\x31\xfd\xf2\xfc\xf5\x10\xac\x09\x6b\x20\xd6\xe0\x32\x31\x76\x8a\x24\xab\xd5\xfe\xff\x27\xa3\xfd\x97\xa0\xf0\xb6\x90\x56\x35\x99\x58\xcc\xa6\xdf\xe7\xd3\xc7\xf9\xcb\x68\x32\xba\x52\xe1\xfd\x4a\x7e\x69\x03\x0a\x6b\x7d\x2c\xe4\xd0\x93\x6e\xf8\x56\x7d\x39\x81\x5c\xa3\xe7\x53\xa8\x2b\xf4\xf3\xd3\xb7\x4f\x8f\x4f\x23\x21\x2c\x2e\x2b\xe9\x18\xe8\x90\x7a\x55\xf7\x41\xc5\x06\xc8\x69\xb4\x4c\x52\xad\xe3\x0f\xe7\x12\xea\x6d\xf4\xaf\xa1\x71\x8c\x04\xb1\xca\xc3\xfc\x3b\xbe\x79\x9e\x2d\x7e\xcc\x16\x97\x9c\x43\xde\xda\x63\xe1\x97\x8c\x73\xa8\xe7\x9e\xfa\x42\xb2\x4c\x92\xdf\x01\xbc\xd2\xf7\x61\x13\xae\xeb\x7f\x37\xc4\xf6\xfb\xb8\x92\x54\x04\xb6\xef\x84\x5b\xe2\xd4\x91\x3b\x36\x8f\xb0\xce\x71\xeb\x1a\xab\xa2\xdb\x17\x42\x26\x42\xa4\x0f\xfc\x71\x7c\x49\x56\x90\x38\x36\x5d\xcc\x10\xfe\x9a\x70\xdb\xc4\x12\x9f\x25\xdf\xb1\xcc\xec\xe7\xcb\x6c\x31\xdf\x8d\x62\xcf\x36\xb0\x65\x20\x2b\xcd\x92\x40\x16\x4d\x68\x1e\x85\xde\x72\x26\x3e\xdc\xd5\x6d\xb0\x2c\xb5\x2d\x63\x95\x07\xe9\xff\x7d\xcd\xdf\x30\xfc\xf1\x26\x03\xa0\xc4\x8b\x2c\x40\x0c\x39\x72\xd8\x82\xf2\x8c\xd1\xcc\x61\x7e\x7f\x07\xf7\xa4\x44\x6e\xad\x9a\x70\xa3\xdb\xfd\x1f\xdf\x84\x1e\xa4\xa7\x46\x08\xe7\x0b\xfc\x17\xe2\xda\xc7\x09\xc2\xce\xd2\x07\xbc\x62\x5c\xbf\x2a\x02\x86\xc9\xa9\xb4\xe8\x81\x69\xfd\x93\xb8\x67\x3a\x90\x57\xf7\x92\x40\x21\x15\x0a\x8d\x01\xc5\x1a\x6d\x2c\xff\x25\xdc\x10\xe3\xef\x79\x08\x14\xe8\x84\xc1\xeb\xa3\x06\xed\x5b\x6f\x4c\xeb\x01\x70\x29\xee\xea\x82\x86\x28\x20\xa8\xb4\x2d\x80\x5c\xfc\x31\x9c\x01\x86\x31\xb7\xe7\x59\x02\x27\x94\xde\xc5\x0c\xe7\x77\x48\xa5\xb4\xda\xa5\x6a\x08\x71\x37\x75\xfc\x0d\x00\x00\xff\xff\xd5\x33\x40\x5d\xc6\x0c\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 3270, mode: os.FileMode(436), modTime: time.Unix(1594429027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
