// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xed\x6a\xdb\x3c\x14\xfe\xfd\xe6\x2a\x44\x2e\xe0\x2d\xfd\x1b\x46\xa0\xa3\x61\x8c\x95\x0e\xd2\x6e\xec\x5f\x90\xe5\x53\x47\x8d\xad\xe3\x1d\x49\x5d\x72\xf7\xc3\x49\xed\xf8\xab\xb1\x24\xd7\x74\x85\x12\x90\xce\x23\x3d\xe7\x43\xe7\xc3\x4a\x2a\x03\xca\x68\xf6\x69\xc6\xd8\x33\x46\xc7\x5f\xc6\x14\xcf\x60\xc1\xe6\xb1\xd4\x02\x5f\x80\x0e\xf3\xe3\x6a\x82\x9b\x9c\x9b\xed\x82\xcd\x13\x69\xb6\x36\xfa\x5f\x60\x76\x15\x11\x9a\x2d\x50\x8a\x89\x14\x57\x2d\x40\x44\xc0\x77\x68\xcd\x82\x19\xb2\x30\x63\x6c\xc9\xd8\x8c\x31\x82\xd8\xaa\x98\x2b\x71\x58\xb0\x2f\x77\xdf\x3f\xdf\xdc\xcd\x96\xb3\xcb\x4c\x22\x2b\xd3\x58\x03\xbd\x00\xb9\x72\xe9\x40\x72\x4e\x46\xf2\x74\x13\x21\x1a\x6d\x88\xe7\x15\xad\x82\xd2\x6f\x2b\x09\xb2\x8a\x41\xf1\x27\xb8\x81\x04\xe9\xb0\x60\xb7\x5f\x1f\xbe\xbd\x2e\xe6\x84\x39\x90\x91\xa0\x17\x6c\xae\x05\x71\x23\xb6\xa7\xf3\x97\xb3\xd3\x7f\x5d\xbd\xf5\xea\xf6\xc7\xfd\xed\xcd\xfd\xe3\xdb\x1a\x0e\x6b\xf2\x24\x53\x10\x98\xcb\x52\x91\x57\x9b\xb4\x97\x2f\xe9\xd7\xf5\x44\xbf\x1f\x18\x53\xb8\xc9\xb8\x36\x40\xaf\xa2\x43\x9e\x79\x01\xd2\x12\x95\x21\x2e\x76\xee\xce\xe9\x43\x7d\x0c\x7f\x9e\x02\x19\x77\xe2\x35\xf1\x6e\x30\x3b\x78\xbb\x69\x35\xbf\x88\xee\x01\x0d\xc4\xed\xc3\x6a\xfd\x73\xb5\xee\x8b\x5c\xb2\x4a\x95\x87\x94\x81\x2b\xd0\x2a\xb3\x60\xd7\x83\xec\x77\x70\xd0\x06\x09\x5c\x89\x37\xe5\xdf\x95\x73\x40\x2e\x89\x09\xf3\x08\xf7\xfa\xa0\x84\x73\x5e\x6b\x42\xc6\x78\x3e\x27\xdc\x3b\xe7\xd3\x9a\xf0\x80\xd5\x56\xbf\x1e\x57\xeb\xfb\xe3\x0b\xe8\xd8\x0d\xf6\x06\x48\xf1\x74\x43\xc0\xe3\x43\xa0\xcf\x4f\x14\x09\x04\x48\x8f\x90\xed\xa2\x46\xd9\xce\xa6\x69\x61\x07\xd0\x1e\x2f\xb6\x03\x0a\x62\xe0\xaa\xaa\xe0\x14\xcf\xbb\x76\xab\x96\x0b\x9b\x07\x6a\x9f\xa1\x92\x06\x9d\xf5\x6e\x88\x4f\x5e\xdf\xfe\x1b\x7e\x76\xdc\x70\xaf\xac\xd1\x02\x04\xaa\xd0\x3a\xe5\xed\xbc\x51\x68\x30\xa0\x42\x8a\x49\x22\x55\xe2\xaa\x40\x43\xfc\x1f\xf0\x00\xec\x41\x58\x8f\x08\x6a\xca\xbf\x5f\x33\x57\x54\x7d\xf7\xf7\x7b\x96\x0e\x68\xae\xaa\xa4\x5b\x6c\xbb\xa7\x8c\xba\x78\x70\xb9\x6a\x9c\xb2\xac\x0c\xe6\x9c\x71\x9f\x88\x67\xe0\xd9\x57\xb5\x31\x13\xe5\xba\x08\x80\xea\x6d\x48\xd9\xa5\x37\x96\x97\xb3\x40\x6f\x95\xed\x42\xc4\xc5\xce\xe6\xbe\x4d\x46\x1d\x15\xf8\xe8\x88\xcb\xf8\x3a\xd8\x6f\x04\x02\x29\x16\x98\xa6\x20\x8c\x44\xe5\xaa\x40\x1f\x2e\x3c\xe4\x4f\xa7\xf1\x38\x76\x0f\x9e\x16\x64\x4c\xa5\x3e\x1d\x95\x80\xf1\x78\x75\x6d\xcc\x24\xb3\xd4\xe9\x92\x3f\x5c\x19\x3d\xef\x12\xae\xd6\xc3\xed\x7e\x3c\x22\x95\xda\xb8\xaa\xdd\x00\x4c\xf4\x5e\x09\x32\xa9\x62\xa0\xb6\xce\xf5\xd5\x90\xce\xc4\xd5\xde\x1a\x29\xe1\x4a\xea\x56\xbe\xe8\xdd\x9c\x92\x47\x4e\x28\x40\xf7\x79\xbe\xbe\xb3\x3c\xe5\x84\x89\x38\x64\xd8\x4e\x9b\xed\xf5\xb7\x2d\x70\xa1\xc6\x3b\x5f\x5f\xb4\x13\xfd\x04\x6a\x3b\x93\x52\x38\xce\xd0\x55\x63\xd4\xcc\x57\xb5\xad\x09\xdf\x7f\xa3\x34\xb7\xe2\xa0\xda\x19\x9b\x7b\x35\x4f\x41\xfb\x25\xbf\x0a\x32\x26\xf7\x8a\x32\x98\xdd\x3b\xbd\x0e\x24\xb0\x70\x66\x56\x4b\x31\xea\x6b\x58\x63\x6a\x32\x5c\xef\x9c\x2d\xd8\x82\x8c\xaf\x5e\x91\x2d\x8a\x91\x9f\x03\xcf\x98\x31\xf7\xfb\x35\x3e\x1f\xde\xf0\x78\x4d\x75\xe3\x27\xba\xc1\x91\xc8\x71\x0c\x29\xf8\x38\x37\x67\x95\x70\x78\x4c\x83\x4d\xdd\x9b\xa1\x4a\x38\xfc\x3e\x0d\xc2\x12\x78\x7d\x6f\xea\x40\xa6\xf8\xea\x34\xe2\x61\xc4\x92\xbc\x3e\xdb\x9d\xc5\x03\x63\xa4\x98\x68\x3c\x47\xb0\x16\x24\xf4\x62\xae\xa5\x78\xc6\xc8\x3d\x09\x9c\xe5\x47\x17\x2e\xc3\x8d\x6f\xe1\x2a\x21\x17\xee\xfe\x1b\x00\x00\xff\xff\xda\xab\x4d\x49\x6c\x1a\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6764, mode: os.FileMode(436), modTime: time.Unix(1590853855, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
