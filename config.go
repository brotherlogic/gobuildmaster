// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x66\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x92\xba\xe4\xdf\x0f\xc7\x89\xeb\xb7\xd6\x92\x3c\xd3\x42\x09\x9c\xee\x91\x9f\x7b\xd3\x23\x5b\x49\x65\x40\x19\xcd\x3e\x2d\x18\xfb\x8d\xf1\xe9\x97\x31\xc5\x73\x88\xd8\x32\xb6\x32\x4b\x34\xd0\x33\xd0\xf2\x64\x4f\x71\x5b\x70\xb3\x8b\xd8\x32\x95\x66\x67\xe3\x8f\x02\xf3\xab\x98\xd0\xec\x80\x32\x4c\xa5\xb8\xea\x41\x0a\x4e\x46\xf2\x6c\x1b\x23\x1a\x6d\x88\x17\x11\x33\x64\xe1\xb4\x46\xf0\xc7\x4a\x82\xbc\x66\x50\xfe\x09\x6e\x20\x45\x3a\x46\xec\xf6\xeb\xc3\xb7\xb3\xb1\x20\x2c\x80\x8c\x04\x1d\xb1\xa5\x16\xc4\x8d\xd8\x55\xfb\xaf\x16\xd5\x3f\x41\x62\x55\xc2\x95\x38\x46\x6c\xb3\xbe\xfd\x71\x7f\x7b\x73\xff\xb8\x58\x2d\x5e\x89\x70\x3c\x92\x27\x99\x81\xc0\x42\x5e\x02\x39\xe7\xa4\x6b\x7e\x2b\xbe\x98\x80\xef\xd1\x9a\xda\xd4\x25\xfa\xe5\xee\xfb\xe7\x9b\xbb\x05\x63\x0a\xb7\x39\xd7\x06\xe8\xec\xfa\x2a\xef\x33\x8b\x67\x20\x2d\x51\x19\xe2\x62\xef\x5e\x9c\x21\xd4\xfb\xf0\xe7\x19\x90\x71\x27\xde\x70\x5f\x31\xe6\x5f\xed\x76\xd6\xfc\x3a\x7a\x00\x34\xd2\xb7\x0f\xeb\xcd\xcf\xf5\x66\xa8\x73\xc9\x2a\x75\xd9\xe4\xd2\xb8\x02\xad\x32\x11\xbb\x1e\x65\xbf\x87\xa3\x36\x48\xe0\x4a\xbc\xed\xff\x5f\x39\x0f\xf4\xc0\x18\xfb\x84\xb0\x88\xf1\xa0\x8f\x4a\xb8\x06\xd0\x81\x4c\xa9\x7c\x41\x78\x38\xba\x3e\xb7\xe1\x3c\x92\xb5\xf5\xaf\xc7\xf5\xe6\xfe\x34\x01\xbd\xbc\xc1\xc1\x00\x29\x9e\x6d\x09\x78\x72\x0c\xac\x79\x45\x91\x40\x80\xf4\x68\xd9\x3e\x6a\x52\xee\x6c\x96\x95\x79\x00\xed\x31\xb1\x3d\x50\x10\x03\xd7\x50\x05\xa7\x64\xd9\xcf\x5b\x6d\x2e\x73\x1e\x18\x7d\x8e\x4a\x1a\x74\x8e\xbb\xe5\x3e\xbb\xbe\x7d\x18\xa5\x0f\x07\x10\xd6\x83\x7f\xdb\xbf\x2f\x00\xbd\x2a\x3a\x8e\x7f\xa9\x39\xee\xdd\xf3\xe2\x1d\x20\xed\xf5\xc8\x97\xcb\xee\x0d\xdb\x74\x0f\x3e\x2c\x5b\xbb\xac\xea\x84\x39\xcf\xfb\x13\xf1\x1c\x3c\x55\xbd\x8b\x99\x69\xd2\x62\x00\x6a\x8a\xe0\xe5\x8e\xd8\x32\xaf\x16\x81\xd5\xba\x88\x55\xcc\xc5\xde\x16\xbe\x12\xd7\x44\x05\x0e\x1d\x71\x99\x5c\x07\xd7\x8d\x40\x20\x25\x02\xb3\x0c\x84\x91\xa8\x5c\x03\x18\xc2\x85\xb7\x7c\xb5\x1b\x4f\x12\xf7\xe6\xe9\x40\xa6\xe8\x44\xb5\x55\x0a\xc6\x63\xea\xba\x98\x59\x6e\xf2\xd5\x43\xfe\x72\x65\xf4\xb2\x4f\xb8\xb6\x87\xe7\xfd\xb4\x45\x26\xb5\x71\x0d\xbb\x05\x98\x69\x5e\x09\x72\xa9\x12\xa0\x6e\xcc\x4d\x6b\x88\x2e\xba\xe6\x5b\x23\xa5\x5c\x49\xdd\x39\x2f\x06\x17\xe7\xe4\x51\x10\x0a\xd0\x43\x95\x6f\xae\xac\xaa\x33\x61\x26\x0e\x39\x76\x8f\xcd\xae\xfd\xf5\x0c\xbc\xa1\xf1\xce\xe3\x5d\xbe\x3e\x49\x95\x0e\x30\x68\x2e\xcd\x38\x7c\x2d\x5d\xec\x14\xa1\x5e\x99\x7a\xf0\x69\x9e\x81\xf6\x3b\x79\x6a\xc8\x94\x83\x4f\x5c\x3a\xc9\xfd\x9a\xd5\x83\x04\xaa\x56\x6e\xb5\x14\x93\x3e\x84\xb4\x2e\xcc\x86\xeb\xbd\x73\x06\x3b\x90\xe9\xd2\x11\xdb\x52\x09\xfc\x0a\xf8\x82\x99\xf2\x7c\xbf\x5b\xc7\xbb\xdf\x36\xbc\x3e\x03\xb8\x7f\x03\x08\x7e\x1f\x71\x7c\x07\x28\xf9\x38\xdf\x8c\x6a\xe7\xf0\x9e\xd6\x20\x2c\x81\xd7\xab\x7f\x0f\x32\xc7\x07\x80\x37\x1b\xf5\x5f\x00\x00\x00\xff\xff\x96\x93\x7f\x58\x92\x15\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5522, mode: os.FileMode(436), modTime: time.Unix(1583109953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
