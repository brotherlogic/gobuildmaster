// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6a\x1b\x3d\x10\xbd\x8e\x9f\x42\xf8\x01\xbe\xf0\xf5\xd2\x14\x43\x4a\x4c\x29\x0d\x29\x38\x69\xe9\x9d\x99\xd5\x4e\xd6\x8a\xb5\x9a\xed\x48\xeb\xda\x7d\xfa\xb2\xfe\xd9\x78\x7f\x1c\x4b\xd1\xb6\x0d\x04\x83\x56\x67\xcf\x9c\xd1\x9c\x91\x56\x46\x19\x87\xc6\x59\xf1\x7e\x24\xc4\x33\x25\xbb\x5f\x21\x0c\xe4\x38\x11\xe3\xa4\x54\x3a\xb5\xc8\x6b\xe4\xf1\x6e\x3c\xa3\x45\x01\x6e\x39\x11\xe3\x4c\xb9\x65\x99\xfc\x27\x29\xbf\x4e\x98\xdc\x12\x59\x53\xa6\xe4\x75\x07\x52\x00\x3b\x05\x7a\x91\x10\x39\xeb\x18\x8a\x89\x70\x5c\xe2\xee\x19\xe3\x8f\x52\x31\xe6\x75\x04\xd5\x9f\x04\x87\x19\xf1\x76\x22\x6e\x3f\x3d\x7c\x3e\x0c\x16\x4c\x05\xb2\x53\x68\x27\x62\x6c\x25\x83\x93\xcb\xfd\xfb\xa7\xa3\xfd\x3f\x63\x5a\x9a\x14\x8c\xdc\x4e\xc4\x7c\x76\xfb\xf5\xfe\xf6\xe6\xfe\x71\x34\x1d\x9d\x51\x78\x59\xc9\x93\xd2\x28\xa9\x50\x47\x21\x87\x9c\xb4\x87\x5f\xd3\x97\x30\xc2\x8a\x4a\x57\x0f\xb5\x03\xfd\x78\xf7\xe5\xc3\xcd\xdd\x48\x08\x43\x8b\x1c\xac\x43\x3e\x4c\x3d\x1b\xf7\x21\x8a\x35\xb2\x55\x64\x1c\x83\x5c\xf9\x2f\x4e\x1f\xea\xdf\xc4\xbf\xc2\xad\x75\xc4\xe8\x1b\x79\x73\x7e\x27\xae\x8b\xa5\xf4\x30\x9b\x7f\x9b\xcd\xfb\x8a\xe9\x89\x21\x47\xb7\x64\xc4\xf3\xf5\x74\x90\x79\x49\x54\x0a\x0e\x82\x54\xb5\x00\x6f\xb4\x43\xeb\x2d\xe7\x05\x5c\xc5\xd8\x61\x3f\x2e\x81\xd3\x86\x1d\x5a\xc3\x15\x71\xa8\x15\x8f\xd9\x63\x2a\x12\xda\xd8\xad\x91\xde\xf9\x6b\x42\xa6\x42\x84\x37\x82\xa3\xad\x77\x65\x10\x66\xa7\x36\x26\x86\xbf\x60\xda\x6c\x7d\x89\x4f\x26\x87\x5b\x61\xf6\xfd\x71\x36\xbf\xdf\xb9\xb6\x53\x4a\xb8\x71\xc8\x06\xf4\x82\x11\xd2\x6d\xb3\x9e\x24\x95\xc6\x4d\xc4\xff\x17\xa5\x68\xca\x32\x65\x32\x5f\x31\x8d\xe9\x7f\x7c\x47\x78\xc5\x03\xc7\x4d\x0f\x91\x03\xf7\xbc\x06\x22\xa6\x0a\x70\x83\xb2\x74\xe4\xcd\xdc\x9c\xdf\x6d\xd7\x9d\x50\x3c\x3b\x59\xc1\xb4\x56\xd5\x56\xe1\x9f\x84\x0e\xa4\xa7\x32\x6d\x99\xd2\x10\xc1\x55\x8f\x03\x02\x3b\x99\xde\x13\x54\xc4\x01\xe5\xfc\xae\xd2\x20\x9d\xd6\x6a\xbd\x3d\x54\x95\x54\x60\x37\xea\x40\x2e\xb6\x86\xab\x00\x41\xbf\x90\xe9\x5d\xaf\x1c\xe1\xa3\x87\x51\x12\xa7\x92\xb4\x46\xe9\x14\x19\x5f\x51\x7d\xb8\x18\x83\xed\x79\x18\x25\xaa\x00\x83\x77\x51\x51\xad\xbe\xd4\xba\x5a\x08\xb4\x21\x55\xdc\x06\xc5\x44\xc0\x98\x2b\x93\x22\x5b\xff\x65\x38\x01\xc4\x31\x57\xeb\x99\xa1\x0b\x90\xde\xc6\xc4\xf3\x5b\xe2\x0c\x8c\xb2\xa1\x31\x34\x71\x31\x71\x24\x60\x95\x7c\xa6\xc4\xdb\xdc\x27\xf3\xe3\xf5\x43\x9a\x86\x4a\xaf\x21\xf1\xec\x49\x59\x2d\x66\x18\xfd\x0b\x66\x00\xf5\xba\xea\x6a\xfe\x07\x94\x2e\x2a\x3e\x86\xbc\x3a\xae\x84\xae\xc1\x09\x68\x80\x08\x28\xa0\x01\xb6\x20\xf1\xec\x81\x7b\x78\x07\x34\x44\x04\x24\xd1\x06\x74\xc0\x16\x68\x80\x2e\x04\x1a\x03\xf9\x6b\xc8\x00\xec\x0e\x5c\x28\xfb\x11\x12\xc3\x2e\x8f\x49\xf4\x3f\xe5\x76\x20\x6f\xfc\x4a\x60\x50\x69\xd4\xa5\x51\x23\x81\x3f\xc1\x84\x26\xb0\x86\x44\x7d\x23\x38\xb9\x52\x5a\xfb\x9b\xa7\x05\x18\xee\x2b\x61\x4f\xe8\xc0\xae\xbc\xf3\xd0\x82\xc4\xe4\x21\x55\x99\x72\xa0\xab\x9c\x6a\x65\xbd\xf7\x93\x1e\xd8\x00\x66\x92\xc4\xc1\x5e\xae\x31\x31\xfc\xc4\x59\x60\x2f\x6d\x22\x62\xb8\xab\xf7\x79\x9f\xe4\xeb\xc9\x31\x8c\x0e\xf3\xc2\x97\xf0\x38\x37\x86\x6f\x85\xdb\x1c\x8a\xc2\x3f\xb9\x0d\x40\x0c\xf3\xae\x55\x84\xd4\x75\x03\x10\x77\x34\x95\xab\xd2\x3b\xcb\x2f\xb3\xe3\x5d\xb4\x06\xad\x52\x08\xb8\xfe\xe8\x81\x45\x75\x14\xb0\xcb\x84\xea\x1b\x4e\x9f\xfb\xdb\x06\x60\xc8\x6b\xe9\x02\xd9\x92\x01\xdd\xfe\xe4\x7e\x43\x9b\xb6\x28\x4b\xc6\xa0\x0b\xc6\x0e\xe4\x2f\x5d\x33\xbe\xb6\x78\xbf\x03\x00\x00\xff\xff\xe1\x1b\x29\x07\xab\x1a\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 6827, mode: os.FileMode(436), modTime: time.Unix(1604864445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
