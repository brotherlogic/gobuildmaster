// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6b\xdb\x30\x10\xfe\xbc\xfc\x0a\x91\x1f\xb0\xd2\xaf\x61\x04\x3a\x1a\xc6\x58\xe9\x20\xed\xc6\xbe\x05\x59\xbe\x3a\x5a\x6c\x9d\x77\x92\xba\xe4\xdf\x0f\xc7\x89\x6b\xcb\x6e\x23\xc9\x33\x2d\x94\xc0\xe9\x1e\xf9\xb9\x37\x3d\xb2\x95\x54\x06\x94\xd1\xec\xd3\x8c\xb1\xdf\x98\x1c\x7f\x19\x53\xbc\x80\x05\x9b\x27\x56\xe6\xa9\x06\x7a\x06\x9a\x1f\xed\x19\x6e\x4a\x6e\xb6\x0b\x36\xcf\xa4\xd9\xda\xe4\xa3\xc0\xe2\x2a\x21\x34\x5b\xa0\x1c\x33\x29\xae\x7a\x90\x92\x93\x91\x3c\xdf\x24\x88\x46\x1b\xe2\xe5\x82\x19\xb2\x70\x5c\x23\xf8\x63\x25\x41\xd1\x30\xa8\xfe\x04\x37\x90\x21\x1d\x16\xec\xf6\xeb\xc3\xb7\x93\xb1\x24\x2c\x81\x8c\x04\xbd\x60\x73\x2d\x88\x1b\xb1\xad\xf7\x5f\xce\xea\x7f\x82\xd4\xaa\x94\x2b\x71\x58\xb0\xf5\xea\xf6\xc7\xfd\xed\xcd\xfd\xe3\x6c\x39\x7b\x25\xc2\xcb\x91\x3c\xc9\x1c\x04\x96\xf2\x1c\xc8\x29\x27\xae\xf9\xad\xf8\x12\x02\xbe\x43\x6b\x1a\x93\x4b\xf4\xcb\xdd\xf7\xcf\x37\x77\x33\xc6\x14\x6e\x0a\xae\x0d\xd0\xc9\xf5\x55\xde\x27\x16\xcf\x40\x5a\xa2\x32\xc4\xc5\xce\xbf\x38\x43\xa8\xf7\xe1\xcf\x73\x20\xe3\x4f\xbc\xe5\xbe\x64\x2c\xbc\xda\xdd\xac\x85\x75\xf4\x00\xe8\x42\xdf\x3e\xac\xd6\x3f\x57\xeb\xa1\xce\x25\xab\xd4\x79\x93\x73\xe3\x0a\xb4\xca\x2c\xd8\xf5\x45\xf6\x3b\x38\x68\x83\x04\xbe\xc4\xbb\xfe\xff\x95\xf3\x40\x0f\x5c\x62\x9f\x12\x96\x09\xee\xf5\x41\x09\xdf\x00\x1c\xc8\x98\xca\x97\x84\xfb\x83\xef\x73\x5b\xce\x17\xb2\xb6\xfa\xf5\xb8\x5a\xdf\x1f\x27\xa0\x97\x37\xd8\x1b\x20\xc5\xf3\x0d\x01\x4f\x0f\x91\x35\xaf\x29\x12\x08\x90\x01\x2d\xdb\x47\x8d\xca\x9d\xcd\xf3\x2a\x0f\xa0\x03\x26\xb6\x07\x8a\x62\xe0\x1b\xaa\xe0\x94\xce\xfb\x79\x6b\xcc\x55\xce\x23\xa3\x2f\x50\x49\x83\xde\x71\x77\xdc\x27\xd7\xb7\x0f\x17\xe9\xc3\x1e\x84\x0d\xe0\xdf\xf5\xef\x0b\x40\xaf\x8a\x9e\xe3\x5f\x69\x8e\x7f\xf7\xbc\x78\x47\x48\x7b\x33\xf2\xd5\xb2\x7f\xc3\xb6\xdd\xa3\x0f\xcb\xce\x2e\xcb\x26\x61\xde\xf3\xfe\x44\xbc\x80\x40\x55\x77\x31\x13\x4d\x5a\x02\x40\x6d\x11\x3c\xdf\x11\x3b\xe6\xe5\x2c\xb2\x5a\x67\xb1\x4a\xb8\xd8\xd9\x32\x54\xe2\xda\xa8\xc8\xa1\x23\x2e\xd3\xeb\xe8\xba\x11\x08\xa4\x54\x60\x9e\x83\x30\x12\x95\x6f\x00\x43\xb8\xf8\x96\xaf\x77\xe3\x69\xea\xdf\x3c\x0e\x64\x8c\x4e\xd4\x5b\x65\x60\x02\xa6\xce\xc5\x4c\x72\x93\xaf\x1f\xf2\x97\x2b\xa3\xe7\x7d\xc2\x8d\x3d\x3e\xef\xc7\x2d\x72\xa9\x8d\x6f\xd8\x1d\xc0\x44\xf3\x4a\x50\x48\x95\x02\xb9\x31\xb7\xad\x31\xba\xe8\x9b\x6f\x8d\x94\x71\x25\xb5\x73\x5e\x0c\x2e\x4e\xc9\xa3\x24\x14\xa0\x87\x2a\xdf\x5e\x59\xd6\x67\xc2\x44\x1c\x0a\x74\x8f\x4d\xd7\xfe\x7a\x06\xde\xd0\x78\xef\xf1\xae\x5e\x9f\xa4\xca\x06\x18\xb4\x97\x26\x1c\xbe\x8e\x2e\x3a\x45\x68\x56\xc6\x1e\x7c\x9a\xe7\xa0\xc3\x4e\x9e\x06\x32\xe6\xe0\x13\xe7\x4e\xf2\xbf\x66\xf5\x20\x91\xaa\x55\x58\x2d\xc5\xa8\x0f\x21\x9d\x0b\xb3\xe1\x7a\xe7\x9d\x41\x07\x32\x5e\x3a\x12\x5b\x29\x41\x58\x01\x5f\x30\x63\x9e\x1f\x76\xeb\x78\xf7\xdb\x46\xd0\x67\x00\xff\x6f\x00\xd1\xef\x23\x9e\xef\x00\x15\x1f\xef\x9b\x51\xcb\xf9\xbd\x5f\xc2\x35\x08\x4b\x10\xf4\x09\xc1\x81\xbc\xdd\x9b\xff\x02\x00\x00\xff\xff\x52\x16\xb5\x37\x85\x15\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 5509, mode: os.FileMode(436), modTime: time.Unix(1581467534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
