// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.pb
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xe1\x8a\xdb\x30\x0c\xc7\x3f\x2f\x4f\x61\xfa\x00\x3b\xf6\x35\x8c\xc2\x8d\x86\x31\x76\x74\xd0\xbb\x8d\x7d\x2b\x8a\xa3\xa5\x5e\x13\xcb\x93\xe5\xd2\xbc\xfd\x68\x9a\x1c\x4b\xd2\x36\xc9\xca\x58\xa1\x04\x14\x29\xfa\x49\xfe\x4b\xb6\xc6\x0a\x5a\xf1\xea\x7d\xa4\xd4\x4f\x4a\xeb\xa7\x52\x16\x4a\x8c\xd5\x22\x0d\xa6\xc8\x3c\xf2\x01\x79\x51\xdb\x73\xda\x3a\x90\x5d\xac\x16\xb9\x91\x5d\x48\xdf\x6a\x2a\x1f\x52\x26\xd9\x21\x17\x94\x1b\xfd\x30\x08\x71\xc0\x62\xa0\xd8\xa6\x44\xe2\x85\xc1\xc5\x4a\x38\x60\xfd\x8e\xf1\x57\x30\x8c\xe5\x2b\xc1\xe9\xa7\x41\x30\x27\xae\x62\xb5\xfa\xf4\xfc\xb9\x31\x3a\x26\x87\x2c\x06\x7d\xac\x16\x5e\x33\x88\xde\x9d\xbf\xbf\x8c\xce\x7f\xc6\x2c\xd8\x0c\xac\xae\x62\xb5\x49\x56\x5f\xd7\xab\xc7\xf5\x4b\xb4\x8c\xae\x54\x38\x5e\xc9\x0f\x53\xa0\x26\x67\xda\x42\x9a\x9e\xf4\xcd\xb7\xea\x4b\x19\x61\x4f\x41\x5e\x4d\x7d\xd0\x8f\x4f\x5f\x3e\x3c\x3e\x45\x4a\x59\xda\x96\xe0\x05\xb9\x71\xbd\xca\xdd\x50\x1c\x90\xbd\x21\x2b\x0c\x7a\x3f\xfd\x70\x2e\x45\xfd\x1f\xfe\x3d\x56\x5e\x88\x71\x2a\x79\xd7\x7f\x44\x37\xcf\xc9\xe6\x5b\xb2\xb9\xa4\x1c\x0e\xd6\xb6\x85\x5f\x12\x4e\x53\xcf\x18\x7d\x06\x02\xb3\xf0\x7b\x01\x7f\xa9\xfb\x6e\x13\xae\xf3\xbf\xb9\x47\xf6\x67\xbb\x06\xce\x3a\xb2\xef\x99\x4f\x89\xe7\x8e\x5c\xdb\x3c\x26\x97\xd2\xd1\x57\x56\x4f\x6e\x5f\x37\x64\xa9\xd4\xfc\x81\x6f\xc7\x97\xa1\xc4\x99\x63\xd3\x8f\xb9\x27\xbf\x63\x3a\x56\x53\x13\xff\xe1\x3c\x22\x99\xe4\xfb\x4b\xb2\x59\xd7\xa3\x38\x90\x0d\x1e\x05\xd9\x42\xb1\x65\x84\xac\xea\x8a\x47\x53\xb0\x12\xab\x77\xa3\xdc\x05\xe5\xb9\xb1\xf9\x54\xf2\x8e\xfb\x3f\x5f\xf3\x37\x04\xdf\xde\x64\x88\x3c\xf3\x22\xeb\x44\xdc\x73\xe4\x78\x44\x1d\x84\x26\x67\xee\xfa\x0f\x77\xf0\x00\x65\xe2\xd6\x72\x4c\x07\x73\xda\xff\xd3\x9b\x30\x08\x99\x41\xf3\x3b\x00\x00\xff\xff\x81\xe3\x3c\x07\x5b\x08\x00\x00")

func configPbBytes() ([]byte, error) {
	return bindataRead(
		_configPb,
		"config.pb",
	)
}

func configPb() (*asset, error) {
	bytes, err := configPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.pb", size: 2139, mode: os.FileMode(420), modTime: time.Unix(1593788292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.pb": configPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.pb": &bintree{configPb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
